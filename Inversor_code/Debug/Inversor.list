
Inversor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073a0  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08007568  08007568  00008568  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007770  08007770  00009010  2**0
                  CONTENTS
  4 .ARM          00000008  08007770  08007770  00008770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007778  08007778  00009010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007778  08007778  00008778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800777c  0800777c  0000877c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08007780  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000404  20000010  08007790  00009010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000414  08007790  00009414  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ee5b  00000000  00000000  00009040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020e2  00000000  00000000  00017e9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc8  00000000  00000000  00019f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ad7  00000000  00000000  0001ad48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023117  00000000  00000000  0001b81f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010c97  00000000  00000000  0003e936  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd778  00000000  00000000  0004f5cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012cd45  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e60  00000000  00000000  0012cd88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  00130be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000010 	.word	0x20000010
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08007550 	.word	0x08007550

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000014 	.word	0x20000014
 8000204:	08007550 	.word	0x08007550

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_uldivmod>:
 8000b54:	b953      	cbnz	r3, 8000b6c <__aeabi_uldivmod+0x18>
 8000b56:	b94a      	cbnz	r2, 8000b6c <__aeabi_uldivmod+0x18>
 8000b58:	2900      	cmp	r1, #0
 8000b5a:	bf08      	it	eq
 8000b5c:	2800      	cmpeq	r0, #0
 8000b5e:	bf1c      	itt	ne
 8000b60:	f04f 31ff 	movne.w	r1, #4294967295
 8000b64:	f04f 30ff 	movne.w	r0, #4294967295
 8000b68:	f000 b96a 	b.w	8000e40 <__aeabi_idiv0>
 8000b6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b74:	f000 f806 	bl	8000b84 <__udivmoddi4>
 8000b78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b80:	b004      	add	sp, #16
 8000b82:	4770      	bx	lr

08000b84 <__udivmoddi4>:
 8000b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b88:	9d08      	ldr	r5, [sp, #32]
 8000b8a:	460c      	mov	r4, r1
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d14e      	bne.n	8000c2e <__udivmoddi4+0xaa>
 8000b90:	4694      	mov	ip, r2
 8000b92:	458c      	cmp	ip, r1
 8000b94:	4686      	mov	lr, r0
 8000b96:	fab2 f282 	clz	r2, r2
 8000b9a:	d962      	bls.n	8000c62 <__udivmoddi4+0xde>
 8000b9c:	b14a      	cbz	r2, 8000bb2 <__udivmoddi4+0x2e>
 8000b9e:	f1c2 0320 	rsb	r3, r2, #32
 8000ba2:	4091      	lsls	r1, r2
 8000ba4:	fa20 f303 	lsr.w	r3, r0, r3
 8000ba8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bac:	4319      	orrs	r1, r3
 8000bae:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bb2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bb6:	fa1f f68c 	uxth.w	r6, ip
 8000bba:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bc2:	fb07 1114 	mls	r1, r7, r4, r1
 8000bc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bca:	fb04 f106 	mul.w	r1, r4, r6
 8000bce:	4299      	cmp	r1, r3
 8000bd0:	d90a      	bls.n	8000be8 <__udivmoddi4+0x64>
 8000bd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bda:	f080 8112 	bcs.w	8000e02 <__udivmoddi4+0x27e>
 8000bde:	4299      	cmp	r1, r3
 8000be0:	f240 810f 	bls.w	8000e02 <__udivmoddi4+0x27e>
 8000be4:	3c02      	subs	r4, #2
 8000be6:	4463      	add	r3, ip
 8000be8:	1a59      	subs	r1, r3, r1
 8000bea:	fa1f f38e 	uxth.w	r3, lr
 8000bee:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bf2:	fb07 1110 	mls	r1, r7, r0, r1
 8000bf6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bfa:	fb00 f606 	mul.w	r6, r0, r6
 8000bfe:	429e      	cmp	r6, r3
 8000c00:	d90a      	bls.n	8000c18 <__udivmoddi4+0x94>
 8000c02:	eb1c 0303 	adds.w	r3, ip, r3
 8000c06:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c0a:	f080 80fc 	bcs.w	8000e06 <__udivmoddi4+0x282>
 8000c0e:	429e      	cmp	r6, r3
 8000c10:	f240 80f9 	bls.w	8000e06 <__udivmoddi4+0x282>
 8000c14:	4463      	add	r3, ip
 8000c16:	3802      	subs	r0, #2
 8000c18:	1b9b      	subs	r3, r3, r6
 8000c1a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c1e:	2100      	movs	r1, #0
 8000c20:	b11d      	cbz	r5, 8000c2a <__udivmoddi4+0xa6>
 8000c22:	40d3      	lsrs	r3, r2
 8000c24:	2200      	movs	r2, #0
 8000c26:	e9c5 3200 	strd	r3, r2, [r5]
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	428b      	cmp	r3, r1
 8000c30:	d905      	bls.n	8000c3e <__udivmoddi4+0xba>
 8000c32:	b10d      	cbz	r5, 8000c38 <__udivmoddi4+0xb4>
 8000c34:	e9c5 0100 	strd	r0, r1, [r5]
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4608      	mov	r0, r1
 8000c3c:	e7f5      	b.n	8000c2a <__udivmoddi4+0xa6>
 8000c3e:	fab3 f183 	clz	r1, r3
 8000c42:	2900      	cmp	r1, #0
 8000c44:	d146      	bne.n	8000cd4 <__udivmoddi4+0x150>
 8000c46:	42a3      	cmp	r3, r4
 8000c48:	d302      	bcc.n	8000c50 <__udivmoddi4+0xcc>
 8000c4a:	4290      	cmp	r0, r2
 8000c4c:	f0c0 80f0 	bcc.w	8000e30 <__udivmoddi4+0x2ac>
 8000c50:	1a86      	subs	r6, r0, r2
 8000c52:	eb64 0303 	sbc.w	r3, r4, r3
 8000c56:	2001      	movs	r0, #1
 8000c58:	2d00      	cmp	r5, #0
 8000c5a:	d0e6      	beq.n	8000c2a <__udivmoddi4+0xa6>
 8000c5c:	e9c5 6300 	strd	r6, r3, [r5]
 8000c60:	e7e3      	b.n	8000c2a <__udivmoddi4+0xa6>
 8000c62:	2a00      	cmp	r2, #0
 8000c64:	f040 8090 	bne.w	8000d88 <__udivmoddi4+0x204>
 8000c68:	eba1 040c 	sub.w	r4, r1, ip
 8000c6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c70:	fa1f f78c 	uxth.w	r7, ip
 8000c74:	2101      	movs	r1, #1
 8000c76:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c7e:	fb08 4416 	mls	r4, r8, r6, r4
 8000c82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c86:	fb07 f006 	mul.w	r0, r7, r6
 8000c8a:	4298      	cmp	r0, r3
 8000c8c:	d908      	bls.n	8000ca0 <__udivmoddi4+0x11c>
 8000c8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c92:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c96:	d202      	bcs.n	8000c9e <__udivmoddi4+0x11a>
 8000c98:	4298      	cmp	r0, r3
 8000c9a:	f200 80cd 	bhi.w	8000e38 <__udivmoddi4+0x2b4>
 8000c9e:	4626      	mov	r6, r4
 8000ca0:	1a1c      	subs	r4, r3, r0
 8000ca2:	fa1f f38e 	uxth.w	r3, lr
 8000ca6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000caa:	fb08 4410 	mls	r4, r8, r0, r4
 8000cae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cb2:	fb00 f707 	mul.w	r7, r0, r7
 8000cb6:	429f      	cmp	r7, r3
 8000cb8:	d908      	bls.n	8000ccc <__udivmoddi4+0x148>
 8000cba:	eb1c 0303 	adds.w	r3, ip, r3
 8000cbe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0x146>
 8000cc4:	429f      	cmp	r7, r3
 8000cc6:	f200 80b0 	bhi.w	8000e2a <__udivmoddi4+0x2a6>
 8000cca:	4620      	mov	r0, r4
 8000ccc:	1bdb      	subs	r3, r3, r7
 8000cce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cd2:	e7a5      	b.n	8000c20 <__udivmoddi4+0x9c>
 8000cd4:	f1c1 0620 	rsb	r6, r1, #32
 8000cd8:	408b      	lsls	r3, r1
 8000cda:	fa22 f706 	lsr.w	r7, r2, r6
 8000cde:	431f      	orrs	r7, r3
 8000ce0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ce4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ce8:	ea43 030c 	orr.w	r3, r3, ip
 8000cec:	40f4      	lsrs	r4, r6
 8000cee:	fa00 f801 	lsl.w	r8, r0, r1
 8000cf2:	0c38      	lsrs	r0, r7, #16
 8000cf4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cf8:	fbb4 fef0 	udiv	lr, r4, r0
 8000cfc:	fa1f fc87 	uxth.w	ip, r7
 8000d00:	fb00 441e 	mls	r4, r0, lr, r4
 8000d04:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d08:	fb0e f90c 	mul.w	r9, lr, ip
 8000d0c:	45a1      	cmp	r9, r4
 8000d0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x1a6>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d1a:	f080 8084 	bcs.w	8000e26 <__udivmoddi4+0x2a2>
 8000d1e:	45a1      	cmp	r9, r4
 8000d20:	f240 8081 	bls.w	8000e26 <__udivmoddi4+0x2a2>
 8000d24:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d28:	443c      	add	r4, r7
 8000d2a:	eba4 0409 	sub.w	r4, r4, r9
 8000d2e:	fa1f f983 	uxth.w	r9, r3
 8000d32:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d36:	fb00 4413 	mls	r4, r0, r3, r4
 8000d3a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d3e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d42:	45a4      	cmp	ip, r4
 8000d44:	d907      	bls.n	8000d56 <__udivmoddi4+0x1d2>
 8000d46:	193c      	adds	r4, r7, r4
 8000d48:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d4c:	d267      	bcs.n	8000e1e <__udivmoddi4+0x29a>
 8000d4e:	45a4      	cmp	ip, r4
 8000d50:	d965      	bls.n	8000e1e <__udivmoddi4+0x29a>
 8000d52:	3b02      	subs	r3, #2
 8000d54:	443c      	add	r4, r7
 8000d56:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d5a:	fba0 9302 	umull	r9, r3, r0, r2
 8000d5e:	eba4 040c 	sub.w	r4, r4, ip
 8000d62:	429c      	cmp	r4, r3
 8000d64:	46ce      	mov	lr, r9
 8000d66:	469c      	mov	ip, r3
 8000d68:	d351      	bcc.n	8000e0e <__udivmoddi4+0x28a>
 8000d6a:	d04e      	beq.n	8000e0a <__udivmoddi4+0x286>
 8000d6c:	b155      	cbz	r5, 8000d84 <__udivmoddi4+0x200>
 8000d6e:	ebb8 030e 	subs.w	r3, r8, lr
 8000d72:	eb64 040c 	sbc.w	r4, r4, ip
 8000d76:	fa04 f606 	lsl.w	r6, r4, r6
 8000d7a:	40cb      	lsrs	r3, r1
 8000d7c:	431e      	orrs	r6, r3
 8000d7e:	40cc      	lsrs	r4, r1
 8000d80:	e9c5 6400 	strd	r6, r4, [r5]
 8000d84:	2100      	movs	r1, #0
 8000d86:	e750      	b.n	8000c2a <__udivmoddi4+0xa6>
 8000d88:	f1c2 0320 	rsb	r3, r2, #32
 8000d8c:	fa20 f103 	lsr.w	r1, r0, r3
 8000d90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d94:	fa24 f303 	lsr.w	r3, r4, r3
 8000d98:	4094      	lsls	r4, r2
 8000d9a:	430c      	orrs	r4, r1
 8000d9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3110 	mls	r1, r8, r0, r3
 8000db0:	0c23      	lsrs	r3, r4, #16
 8000db2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db6:	fb00 f107 	mul.w	r1, r0, r7
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x24c>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dc6:	d22c      	bcs.n	8000e22 <__udivmoddi4+0x29e>
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d92a      	bls.n	8000e22 <__udivmoddi4+0x29e>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	4463      	add	r3, ip
 8000dd0:	1a5b      	subs	r3, r3, r1
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000dd8:	fb08 3311 	mls	r3, r8, r1, r3
 8000ddc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de0:	fb01 f307 	mul.w	r3, r1, r7
 8000de4:	42a3      	cmp	r3, r4
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x276>
 8000de8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dec:	f101 36ff 	add.w	r6, r1, #4294967295
 8000df0:	d213      	bcs.n	8000e1a <__udivmoddi4+0x296>
 8000df2:	42a3      	cmp	r3, r4
 8000df4:	d911      	bls.n	8000e1a <__udivmoddi4+0x296>
 8000df6:	3902      	subs	r1, #2
 8000df8:	4464      	add	r4, ip
 8000dfa:	1ae4      	subs	r4, r4, r3
 8000dfc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e00:	e739      	b.n	8000c76 <__udivmoddi4+0xf2>
 8000e02:	4604      	mov	r4, r0
 8000e04:	e6f0      	b.n	8000be8 <__udivmoddi4+0x64>
 8000e06:	4608      	mov	r0, r1
 8000e08:	e706      	b.n	8000c18 <__udivmoddi4+0x94>
 8000e0a:	45c8      	cmp	r8, r9
 8000e0c:	d2ae      	bcs.n	8000d6c <__udivmoddi4+0x1e8>
 8000e0e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e12:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e16:	3801      	subs	r0, #1
 8000e18:	e7a8      	b.n	8000d6c <__udivmoddi4+0x1e8>
 8000e1a:	4631      	mov	r1, r6
 8000e1c:	e7ed      	b.n	8000dfa <__udivmoddi4+0x276>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	e799      	b.n	8000d56 <__udivmoddi4+0x1d2>
 8000e22:	4630      	mov	r0, r6
 8000e24:	e7d4      	b.n	8000dd0 <__udivmoddi4+0x24c>
 8000e26:	46d6      	mov	lr, sl
 8000e28:	e77f      	b.n	8000d2a <__udivmoddi4+0x1a6>
 8000e2a:	4463      	add	r3, ip
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	e74d      	b.n	8000ccc <__udivmoddi4+0x148>
 8000e30:	4606      	mov	r6, r0
 8000e32:	4623      	mov	r3, r4
 8000e34:	4608      	mov	r0, r1
 8000e36:	e70f      	b.n	8000c58 <__udivmoddi4+0xd4>
 8000e38:	3e02      	subs	r6, #2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	e730      	b.n	8000ca0 <__udivmoddi4+0x11c>
 8000e3e:	bf00      	nop

08000e40 <__aeabi_idiv0>:
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	0000      	movs	r0, r0
	...

08000e48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e48:	b5b0      	push	{r4, r5, r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

	for(int i = 0; i< N_AMOSTRAS/2;i++){
 8000e4e:	2300      	movs	r3, #0
 8000e50:	607b      	str	r3, [r7, #4]
 8000e52:	e02f      	b.n	8000eb4 <main+0x6c>
		pwmP[i] = (sin(3.1415 * i/(N_AMOSTRAS/2)))*90;
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f7ff fb31 	bl	80004bc <__aeabi_i2d>
 8000e5a:	a34d      	add	r3, pc, #308	@ (adr r3, 8000f90 <main+0x148>)
 8000e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e60:	f7ff fb96 	bl	8000590 <__aeabi_dmul>
 8000e64:	4602      	mov	r2, r0
 8000e66:	460b      	mov	r3, r1
 8000e68:	4610      	mov	r0, r2
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	f04f 0200 	mov.w	r2, #0
 8000e70:	4b49      	ldr	r3, [pc, #292]	@ (8000f98 <main+0x150>)
 8000e72:	f7ff fcb7 	bl	80007e4 <__aeabi_ddiv>
 8000e76:	4602      	mov	r2, r0
 8000e78:	460b      	mov	r3, r1
 8000e7a:	ec43 2b17 	vmov	d7, r2, r3
 8000e7e:	eeb0 0a47 	vmov.f32	s0, s14
 8000e82:	eef0 0a67 	vmov.f32	s1, s15
 8000e86:	f005 fb33 	bl	80064f0 <sin>
 8000e8a:	ec51 0b10 	vmov	r0, r1, d0
 8000e8e:	f04f 0200 	mov.w	r2, #0
 8000e92:	4b42      	ldr	r3, [pc, #264]	@ (8000f9c <main+0x154>)
 8000e94:	f7ff fb7c 	bl	8000590 <__aeabi_dmul>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	f7ff fe38 	bl	8000b14 <__aeabi_d2uiz>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	493e      	ldr	r1, [pc, #248]	@ (8000fa0 <main+0x158>)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i< N_AMOSTRAS/2;i++){
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2b0f      	cmp	r3, #15
 8000eb8:	ddcc      	ble.n	8000e54 <main+0xc>
	}

	for(int i = N_AMOSTRAS/2; i < N_AMOSTRAS;i++){
 8000eba:	2310      	movs	r3, #16
 8000ebc:	603b      	str	r3, [r7, #0]
 8000ebe:	e034      	b.n	8000f2a <main+0xe2>
		pwmN[i] = (-sin(3.1415 * i/(N_AMOSTRAS/2)))*90;
 8000ec0:	6838      	ldr	r0, [r7, #0]
 8000ec2:	f7ff fafb 	bl	80004bc <__aeabi_i2d>
 8000ec6:	a332      	add	r3, pc, #200	@ (adr r3, 8000f90 <main+0x148>)
 8000ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ecc:	f7ff fb60 	bl	8000590 <__aeabi_dmul>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	4610      	mov	r0, r2
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	f04f 0200 	mov.w	r2, #0
 8000edc:	4b2e      	ldr	r3, [pc, #184]	@ (8000f98 <main+0x150>)
 8000ede:	f7ff fc81 	bl	80007e4 <__aeabi_ddiv>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	ec43 2b17 	vmov	d7, r2, r3
 8000eea:	eeb0 0a47 	vmov.f32	s0, s14
 8000eee:	eef0 0a67 	vmov.f32	s1, s15
 8000ef2:	f005 fafd 	bl	80064f0 <sin>
 8000ef6:	ec53 2b10 	vmov	r2, r3, d0
 8000efa:	4614      	mov	r4, r2
 8000efc:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8000f00:	f04f 0200 	mov.w	r2, #0
 8000f04:	4b25      	ldr	r3, [pc, #148]	@ (8000f9c <main+0x154>)
 8000f06:	4620      	mov	r0, r4
 8000f08:	4629      	mov	r1, r5
 8000f0a:	f7ff fb41 	bl	8000590 <__aeabi_dmul>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	460b      	mov	r3, r1
 8000f12:	4610      	mov	r0, r2
 8000f14:	4619      	mov	r1, r3
 8000f16:	f7ff fdfd 	bl	8000b14 <__aeabi_d2uiz>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	4921      	ldr	r1, [pc, #132]	@ (8000fa4 <main+0x15c>)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = N_AMOSTRAS/2; i < N_AMOSTRAS;i++){
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	3301      	adds	r3, #1
 8000f28:	603b      	str	r3, [r7, #0]
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	2b1f      	cmp	r3, #31
 8000f2e:	ddc7      	ble.n	8000ec0 <main+0x78>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f30:	f000 fe42 	bl	8001bb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f34:	f000 f846 	bl	8000fc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f38:	f000 fa62 	bl	8001400 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f3c:	f000 fa22 	bl	8001384 <MX_DMA_Init>
  MX_TIM2_Init();
 8000f40:	f000 f900 	bl	8001144 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f44:	f000 f97e 	bl	8001244 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000f48:	f000 f8aa 	bl	80010a0 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000f4c:	f000 f9f0 	bl	8001330 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // Para o ADC
  HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_1);
 8000f50:	2100      	movs	r1, #0
 8000f52:	4815      	ldr	r0, [pc, #84]	@ (8000fa8 <main+0x160>)
 8000f54:	f003 f80c 	bl	8003f70 <HAL_TIM_OC_Start>
  HAL_ADC_Start_DMA(&hadc1, &medidas[0], N_AMOSTRAS);
 8000f58:	2220      	movs	r2, #32
 8000f5a:	4914      	ldr	r1, [pc, #80]	@ (8000fac <main+0x164>)
 8000f5c:	4814      	ldr	r0, [pc, #80]	@ (8000fb0 <main+0x168>)
 8000f5e:	f000 fee1 	bl	8001d24 <HAL_ADC_Start_DMA>

  strncpy(msg, "BEM VINDO(A) \n\r", msgSIZE);
 8000f62:	2264      	movs	r2, #100	@ 0x64
 8000f64:	4913      	ldr	r1, [pc, #76]	@ (8000fb4 <main+0x16c>)
 8000f66:	4814      	ldr	r0, [pc, #80]	@ (8000fb8 <main+0x170>)
 8000f68:	f005 fa88 	bl	800647c <strncpy>
  HAL_UART_Transmit(&huart2, msg, strlen(msg), TIMEOUT_SERIAL);
 8000f6c:	4812      	ldr	r0, [pc, #72]	@ (8000fb8 <main+0x170>)
 8000f6e:	f7ff f94b 	bl	8000208 <strlen>
 8000f72:	4603      	mov	r3, r0
 8000f74:	b29a      	uxth	r2, r3
 8000f76:	2364      	movs	r3, #100	@ 0x64
 8000f78:	490f      	ldr	r1, [pc, #60]	@ (8000fb8 <main+0x170>)
 8000f7a:	4810      	ldr	r0, [pc, #64]	@ (8000fbc <main+0x174>)
 8000f7c:	f004 fa70 	bl	8005460 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart2, &ValSerial, 1);
 8000f80:	2201      	movs	r2, #1
 8000f82:	490f      	ldr	r1, [pc, #60]	@ (8000fc0 <main+0x178>)
 8000f84:	480d      	ldr	r0, [pc, #52]	@ (8000fbc <main+0x174>)
 8000f86:	f004 faf6 	bl	8005576 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f8a:	bf00      	nop
 8000f8c:	e7fd      	b.n	8000f8a <main+0x142>
 8000f8e:	bf00      	nop
 8000f90:	c083126f 	.word	0xc083126f
 8000f94:	400921ca 	.word	0x400921ca
 8000f98:	40300000 	.word	0x40300000
 8000f9c:	40568000 	.word	0x40568000
 8000fa0:	20000310 	.word	0x20000310
 8000fa4:	20000390 	.word	0x20000390
 8000fa8:	200001c0 	.word	0x200001c0
 8000fac:	2000002c 	.word	0x2000002c
 8000fb0:	200000d0 	.word	0x200000d0
 8000fb4:	08007568 	.word	0x08007568
 8000fb8:	2000006c 	.word	0x2000006c
 8000fbc:	200002c8 	.word	0x200002c8
 8000fc0:	20000000 	.word	0x20000000

08000fc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b094      	sub	sp, #80	@ 0x50
 8000fc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fca:	f107 031c 	add.w	r3, r7, #28
 8000fce:	2234      	movs	r2, #52	@ 0x34
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f005 fa4a 	bl	800646c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd8:	f107 0308 	add.w	r3, r7, #8
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe8:	2300      	movs	r3, #0
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	4b2a      	ldr	r3, [pc, #168]	@ (8001098 <SystemClock_Config+0xd4>)
 8000fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff0:	4a29      	ldr	r2, [pc, #164]	@ (8001098 <SystemClock_Config+0xd4>)
 8000ff2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ff6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ff8:	4b27      	ldr	r3, [pc, #156]	@ (8001098 <SystemClock_Config+0xd4>)
 8000ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ffc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001004:	2300      	movs	r3, #0
 8001006:	603b      	str	r3, [r7, #0]
 8001008:	4b24      	ldr	r3, [pc, #144]	@ (800109c <SystemClock_Config+0xd8>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001010:	4a22      	ldr	r2, [pc, #136]	@ (800109c <SystemClock_Config+0xd8>)
 8001012:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001016:	6013      	str	r3, [r2, #0]
 8001018:	4b20      	ldr	r3, [pc, #128]	@ (800109c <SystemClock_Config+0xd8>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001020:	603b      	str	r3, [r7, #0]
 8001022:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001024:	2302      	movs	r3, #2
 8001026:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001028:	2301      	movs	r3, #1
 800102a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800102c:	2310      	movs	r3, #16
 800102e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001030:	2302      	movs	r3, #2
 8001032:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001034:	2300      	movs	r3, #0
 8001036:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001038:	2310      	movs	r3, #16
 800103a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800103c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001040:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001042:	2304      	movs	r3, #4
 8001044:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001046:	2302      	movs	r3, #2
 8001048:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800104a:	2302      	movs	r3, #2
 800104c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800104e:	f107 031c 	add.w	r3, r7, #28
 8001052:	4618      	mov	r0, r3
 8001054:	f002 fc46 	bl	80038e4 <HAL_RCC_OscConfig>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800105e:	f000 fafd 	bl	800165c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001062:	230f      	movs	r3, #15
 8001064:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001066:	2302      	movs	r3, #2
 8001068:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800106a:	2300      	movs	r3, #0
 800106c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800106e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001072:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001074:	2300      	movs	r3, #0
 8001076:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001078:	f107 0308 	add.w	r3, r7, #8
 800107c:	2102      	movs	r1, #2
 800107e:	4618      	mov	r0, r3
 8001080:	f002 f8e6 	bl	8003250 <HAL_RCC_ClockConfig>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800108a:	f000 fae7 	bl	800165c <Error_Handler>
  }
}
 800108e:	bf00      	nop
 8001090:	3750      	adds	r7, #80	@ 0x50
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40023800 	.word	0x40023800
 800109c:	40007000 	.word	0x40007000

080010a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010a6:	463b      	mov	r3, r7
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010b2:	4b22      	ldr	r3, [pc, #136]	@ (800113c <MX_ADC1_Init+0x9c>)
 80010b4:	4a22      	ldr	r2, [pc, #136]	@ (8001140 <MX_ADC1_Init+0xa0>)
 80010b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010b8:	4b20      	ldr	r3, [pc, #128]	@ (800113c <MX_ADC1_Init+0x9c>)
 80010ba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80010be:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010c0:	4b1e      	ldr	r3, [pc, #120]	@ (800113c <MX_ADC1_Init+0x9c>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80010c6:	4b1d      	ldr	r3, [pc, #116]	@ (800113c <MX_ADC1_Init+0x9c>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010cc:	4b1b      	ldr	r3, [pc, #108]	@ (800113c <MX_ADC1_Init+0x9c>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010d2:	4b1a      	ldr	r3, [pc, #104]	@ (800113c <MX_ADC1_Init+0x9c>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80010da:	4b18      	ldr	r3, [pc, #96]	@ (800113c <MX_ADC1_Init+0x9c>)
 80010dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80010e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80010e2:	4b16      	ldr	r3, [pc, #88]	@ (800113c <MX_ADC1_Init+0x9c>)
 80010e4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80010e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010ea:	4b14      	ldr	r3, [pc, #80]	@ (800113c <MX_ADC1_Init+0x9c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010f0:	4b12      	ldr	r3, [pc, #72]	@ (800113c <MX_ADC1_Init+0x9c>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010f6:	4b11      	ldr	r3, [pc, #68]	@ (800113c <MX_ADC1_Init+0x9c>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010fe:	4b0f      	ldr	r3, [pc, #60]	@ (800113c <MX_ADC1_Init+0x9c>)
 8001100:	2201      	movs	r2, #1
 8001102:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001104:	480d      	ldr	r0, [pc, #52]	@ (800113c <MX_ADC1_Init+0x9c>)
 8001106:	f000 fdc9 	bl	8001c9c <HAL_ADC_Init>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001110:	f000 faa4 	bl	800165c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001114:	2300      	movs	r3, #0
 8001116:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001118:	2301      	movs	r3, #1
 800111a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800111c:	2300      	movs	r3, #0
 800111e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001120:	463b      	mov	r3, r7
 8001122:	4619      	mov	r1, r3
 8001124:	4805      	ldr	r0, [pc, #20]	@ (800113c <MX_ADC1_Init+0x9c>)
 8001126:	f000 ff21 	bl	8001f6c <HAL_ADC_ConfigChannel>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001130:	f000 fa94 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001134:	bf00      	nop
 8001136:	3710      	adds	r7, #16
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	200000d0 	.word	0x200000d0
 8001140:	40012000 	.word	0x40012000

08001144 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08e      	sub	sp, #56	@ 0x38
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800114a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	609a      	str	r2, [r3, #8]
 8001156:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001158:	f107 0320 	add.w	r3, r7, #32
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
 8001170:	615a      	str	r2, [r3, #20]
 8001172:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001174:	4b32      	ldr	r3, [pc, #200]	@ (8001240 <MX_TIM2_Init+0xfc>)
 8001176:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800117a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 291;
 800117c:	4b30      	ldr	r3, [pc, #192]	@ (8001240 <MX_TIM2_Init+0xfc>)
 800117e:	f240 1223 	movw	r2, #291	@ 0x123
 8001182:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001184:	4b2e      	ldr	r3, [pc, #184]	@ (8001240 <MX_TIM2_Init+0xfc>)
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 800118a:	4b2d      	ldr	r3, [pc, #180]	@ (8001240 <MX_TIM2_Init+0xfc>)
 800118c:	2263      	movs	r2, #99	@ 0x63
 800118e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001190:	4b2b      	ldr	r3, [pc, #172]	@ (8001240 <MX_TIM2_Init+0xfc>)
 8001192:	2200      	movs	r2, #0
 8001194:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001196:	4b2a      	ldr	r3, [pc, #168]	@ (8001240 <MX_TIM2_Init+0xfc>)
 8001198:	2200      	movs	r2, #0
 800119a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800119c:	4828      	ldr	r0, [pc, #160]	@ (8001240 <MX_TIM2_Init+0xfc>)
 800119e:	f002 fe3f 	bl	8003e20 <HAL_TIM_Base_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80011a8:	f000 fa58 	bl	800165c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011b6:	4619      	mov	r1, r3
 80011b8:	4821      	ldr	r0, [pc, #132]	@ (8001240 <MX_TIM2_Init+0xfc>)
 80011ba:	f003 fbb3 	bl	8004924 <HAL_TIM_ConfigClockSource>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80011c4:	f000 fa4a 	bl	800165c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011c8:	481d      	ldr	r0, [pc, #116]	@ (8001240 <MX_TIM2_Init+0xfc>)
 80011ca:	f002 ff99 	bl	8004100 <HAL_TIM_PWM_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80011d4:	f000 fa42 	bl	800165c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d8:	2300      	movs	r3, #0
 80011da:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011dc:	2300      	movs	r3, #0
 80011de:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011e0:	f107 0320 	add.w	r3, r7, #32
 80011e4:	4619      	mov	r1, r3
 80011e6:	4816      	ldr	r0, [pc, #88]	@ (8001240 <MX_TIM2_Init+0xfc>)
 80011e8:	f004 f86e 	bl	80052c8 <HAL_TIMEx_MasterConfigSynchronization>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80011f2:	f000 fa33 	bl	800165c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011f6:	2360      	movs	r3, #96	@ 0x60
 80011f8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011fe:	2300      	movs	r3, #0
 8001200:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001202:	2300      	movs	r3, #0
 8001204:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	2200      	movs	r2, #0
 800120a:	4619      	mov	r1, r3
 800120c:	480c      	ldr	r0, [pc, #48]	@ (8001240 <MX_TIM2_Init+0xfc>)
 800120e:	f003 fac7 	bl	80047a0 <HAL_TIM_PWM_ConfigChannel>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001218:	f000 fa20 	bl	800165c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	2204      	movs	r2, #4
 8001220:	4619      	mov	r1, r3
 8001222:	4807      	ldr	r0, [pc, #28]	@ (8001240 <MX_TIM2_Init+0xfc>)
 8001224:	f003 fabc 	bl	80047a0 <HAL_TIM_PWM_ConfigChannel>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800122e:	f000 fa15 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001232:	4803      	ldr	r0, [pc, #12]	@ (8001240 <MX_TIM2_Init+0xfc>)
 8001234:	f000 fb5c 	bl	80018f0 <HAL_TIM_MspPostInit>

}
 8001238:	bf00      	nop
 800123a:	3738      	adds	r7, #56	@ 0x38
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000178 	.word	0x20000178

08001244 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08e      	sub	sp, #56	@ 0x38
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800124a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]
 8001256:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001258:	f107 0320 	add.w	r3, r7, #32
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001262:	1d3b      	adds	r3, r7, #4
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
 8001270:	615a      	str	r2, [r3, #20]
 8001272:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001274:	4b2c      	ldr	r3, [pc, #176]	@ (8001328 <MX_TIM3_Init+0xe4>)
 8001276:	4a2d      	ldr	r2, [pc, #180]	@ (800132c <MX_TIM3_Init+0xe8>)
 8001278:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8399;
 800127a:	4b2b      	ldr	r3, [pc, #172]	@ (8001328 <MX_TIM3_Init+0xe4>)
 800127c:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001280:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001282:	4b29      	ldr	r3, [pc, #164]	@ (8001328 <MX_TIM3_Init+0xe4>)
 8001284:	2200      	movs	r2, #0
 8001286:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8001288:	4b27      	ldr	r3, [pc, #156]	@ (8001328 <MX_TIM3_Init+0xe4>)
 800128a:	2263      	movs	r2, #99	@ 0x63
 800128c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800128e:	4b26      	ldr	r3, [pc, #152]	@ (8001328 <MX_TIM3_Init+0xe4>)
 8001290:	2200      	movs	r2, #0
 8001292:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001294:	4b24      	ldr	r3, [pc, #144]	@ (8001328 <MX_TIM3_Init+0xe4>)
 8001296:	2200      	movs	r2, #0
 8001298:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800129a:	4823      	ldr	r0, [pc, #140]	@ (8001328 <MX_TIM3_Init+0xe4>)
 800129c:	f002 fdc0 	bl	8003e20 <HAL_TIM_Base_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80012a6:	f000 f9d9 	bl	800165c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012b0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012b4:	4619      	mov	r1, r3
 80012b6:	481c      	ldr	r0, [pc, #112]	@ (8001328 <MX_TIM3_Init+0xe4>)
 80012b8:	f003 fb34 	bl	8004924 <HAL_TIM_ConfigClockSource>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80012c2:	f000 f9cb 	bl	800165c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80012c6:	4818      	ldr	r0, [pc, #96]	@ (8001328 <MX_TIM3_Init+0xe4>)
 80012c8:	f002 fdf9 	bl	8003ebe <HAL_TIM_OC_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80012d2:	f000 f9c3 	bl	800165c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80012d6:	2320      	movs	r3, #32
 80012d8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012da:	2300      	movs	r3, #0
 80012dc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012de:	f107 0320 	add.w	r3, r7, #32
 80012e2:	4619      	mov	r1, r3
 80012e4:	4810      	ldr	r0, [pc, #64]	@ (8001328 <MX_TIM3_Init+0xe4>)
 80012e6:	f003 ffef 	bl	80052c8 <HAL_TIMEx_MasterConfigSynchronization>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80012f0:	f000 f9b4 	bl	800165c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80012f4:	2330      	movs	r3, #48	@ 0x30
 80012f6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2;
 80012f8:	2302      	movs	r3, #2
 80012fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012fc:	2300      	movs	r3, #0
 80012fe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	2200      	movs	r2, #0
 8001308:	4619      	mov	r1, r3
 800130a:	4807      	ldr	r0, [pc, #28]	@ (8001328 <MX_TIM3_Init+0xe4>)
 800130c:	f003 f9ec 	bl	80046e8 <HAL_TIM_OC_ConfigChannel>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001316:	f000 f9a1 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800131a:	4803      	ldr	r0, [pc, #12]	@ (8001328 <MX_TIM3_Init+0xe4>)
 800131c:	f000 fae8 	bl	80018f0 <HAL_TIM_MspPostInit>

}
 8001320:	bf00      	nop
 8001322:	3738      	adds	r7, #56	@ 0x38
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	200001c0 	.word	0x200001c0
 800132c:	40000400 	.word	0x40000400

08001330 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001334:	4b11      	ldr	r3, [pc, #68]	@ (800137c <MX_USART2_UART_Init+0x4c>)
 8001336:	4a12      	ldr	r2, [pc, #72]	@ (8001380 <MX_USART2_UART_Init+0x50>)
 8001338:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800133a:	4b10      	ldr	r3, [pc, #64]	@ (800137c <MX_USART2_UART_Init+0x4c>)
 800133c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001340:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001342:	4b0e      	ldr	r3, [pc, #56]	@ (800137c <MX_USART2_UART_Init+0x4c>)
 8001344:	2200      	movs	r2, #0
 8001346:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001348:	4b0c      	ldr	r3, [pc, #48]	@ (800137c <MX_USART2_UART_Init+0x4c>)
 800134a:	2200      	movs	r2, #0
 800134c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800134e:	4b0b      	ldr	r3, [pc, #44]	@ (800137c <MX_USART2_UART_Init+0x4c>)
 8001350:	2200      	movs	r2, #0
 8001352:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001354:	4b09      	ldr	r3, [pc, #36]	@ (800137c <MX_USART2_UART_Init+0x4c>)
 8001356:	220c      	movs	r2, #12
 8001358:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800135a:	4b08      	ldr	r3, [pc, #32]	@ (800137c <MX_USART2_UART_Init+0x4c>)
 800135c:	2200      	movs	r2, #0
 800135e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001360:	4b06      	ldr	r3, [pc, #24]	@ (800137c <MX_USART2_UART_Init+0x4c>)
 8001362:	2200      	movs	r2, #0
 8001364:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001366:	4805      	ldr	r0, [pc, #20]	@ (800137c <MX_USART2_UART_Init+0x4c>)
 8001368:	f004 f82a 	bl	80053c0 <HAL_UART_Init>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001372:	f000 f973 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	200002c8 	.word	0x200002c8
 8001380:	40004400 	.word	0x40004400

08001384 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	607b      	str	r3, [r7, #4]
 800138e:	4b1b      	ldr	r3, [pc, #108]	@ (80013fc <MX_DMA_Init+0x78>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001392:	4a1a      	ldr	r2, [pc, #104]	@ (80013fc <MX_DMA_Init+0x78>)
 8001394:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001398:	6313      	str	r3, [r2, #48]	@ 0x30
 800139a:	4b18      	ldr	r3, [pc, #96]	@ (80013fc <MX_DMA_Init+0x78>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013a2:	607b      	str	r3, [r7, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	603b      	str	r3, [r7, #0]
 80013aa:	4b14      	ldr	r3, [pc, #80]	@ (80013fc <MX_DMA_Init+0x78>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ae:	4a13      	ldr	r2, [pc, #76]	@ (80013fc <MX_DMA_Init+0x78>)
 80013b0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80013b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013b6:	4b11      	ldr	r3, [pc, #68]	@ (80013fc <MX_DMA_Init+0x78>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013be:	603b      	str	r3, [r7, #0]
 80013c0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80013c2:	2200      	movs	r2, #0
 80013c4:	2100      	movs	r1, #0
 80013c6:	2010      	movs	r0, #16
 80013c8:	f001 f95b 	bl	8002682 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80013cc:	2010      	movs	r0, #16
 80013ce:	f001 f974 	bl	80026ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80013d2:	2200      	movs	r2, #0
 80013d4:	2100      	movs	r1, #0
 80013d6:	2011      	movs	r0, #17
 80013d8:	f001 f953 	bl	8002682 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80013dc:	2011      	movs	r0, #17
 80013de:	f001 f96c 	bl	80026ba <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80013e2:	2200      	movs	r2, #0
 80013e4:	2100      	movs	r1, #0
 80013e6:	2038      	movs	r0, #56	@ 0x38
 80013e8:	f001 f94b 	bl	8002682 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80013ec:	2038      	movs	r0, #56	@ 0x38
 80013ee:	f001 f964 	bl	80026ba <HAL_NVIC_EnableIRQ>

}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40023800 	.word	0x40023800

08001400 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08a      	sub	sp, #40	@ 0x28
 8001404:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001406:	f107 0314 	add.w	r3, r7, #20
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	609a      	str	r2, [r3, #8]
 8001412:	60da      	str	r2, [r3, #12]
 8001414:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	613b      	str	r3, [r7, #16]
 800141a:	4b37      	ldr	r3, [pc, #220]	@ (80014f8 <MX_GPIO_Init+0xf8>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141e:	4a36      	ldr	r2, [pc, #216]	@ (80014f8 <MX_GPIO_Init+0xf8>)
 8001420:	f043 0304 	orr.w	r3, r3, #4
 8001424:	6313      	str	r3, [r2, #48]	@ 0x30
 8001426:	4b34      	ldr	r3, [pc, #208]	@ (80014f8 <MX_GPIO_Init+0xf8>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142a:	f003 0304 	and.w	r3, r3, #4
 800142e:	613b      	str	r3, [r7, #16]
 8001430:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	4b30      	ldr	r3, [pc, #192]	@ (80014f8 <MX_GPIO_Init+0xf8>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143a:	4a2f      	ldr	r2, [pc, #188]	@ (80014f8 <MX_GPIO_Init+0xf8>)
 800143c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001440:	6313      	str	r3, [r2, #48]	@ 0x30
 8001442:	4b2d      	ldr	r3, [pc, #180]	@ (80014f8 <MX_GPIO_Init+0xf8>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	60bb      	str	r3, [r7, #8]
 8001452:	4b29      	ldr	r3, [pc, #164]	@ (80014f8 <MX_GPIO_Init+0xf8>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001456:	4a28      	ldr	r2, [pc, #160]	@ (80014f8 <MX_GPIO_Init+0xf8>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	6313      	str	r3, [r2, #48]	@ 0x30
 800145e:	4b26      	ldr	r3, [pc, #152]	@ (80014f8 <MX_GPIO_Init+0xf8>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	607b      	str	r3, [r7, #4]
 800146e:	4b22      	ldr	r3, [pc, #136]	@ (80014f8 <MX_GPIO_Init+0xf8>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001472:	4a21      	ldr	r2, [pc, #132]	@ (80014f8 <MX_GPIO_Init+0xf8>)
 8001474:	f043 0302 	orr.w	r3, r3, #2
 8001478:	6313      	str	r3, [r2, #48]	@ 0x30
 800147a:	4b1f      	ldr	r3, [pc, #124]	@ (80014f8 <MX_GPIO_Init+0xf8>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001486:	2200      	movs	r2, #0
 8001488:	2101      	movs	r1, #1
 800148a:	481c      	ldr	r0, [pc, #112]	@ (80014fc <MX_GPIO_Init+0xfc>)
 800148c:	f001 fec6 	bl	800321c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001490:	2200      	movs	r2, #0
 8001492:	2120      	movs	r1, #32
 8001494:	481a      	ldr	r0, [pc, #104]	@ (8001500 <MX_GPIO_Init+0x100>)
 8001496:	f001 fec1 	bl	800321c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800149a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800149e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014a0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80014a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014aa:	f107 0314 	add.w	r3, r7, #20
 80014ae:	4619      	mov	r1, r3
 80014b0:	4812      	ldr	r0, [pc, #72]	@ (80014fc <MX_GPIO_Init+0xfc>)
 80014b2:	f001 fd1f 	bl	8002ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014b6:	2301      	movs	r3, #1
 80014b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ba:	2301      	movs	r3, #1
 80014bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c2:	2300      	movs	r3, #0
 80014c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c6:	f107 0314 	add.w	r3, r7, #20
 80014ca:	4619      	mov	r1, r3
 80014cc:	480b      	ldr	r0, [pc, #44]	@ (80014fc <MX_GPIO_Init+0xfc>)
 80014ce:	f001 fd11 	bl	8002ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80014d2:	2320      	movs	r3, #32
 80014d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d6:	2301      	movs	r3, #1
 80014d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014de:	2300      	movs	r3, #0
 80014e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014e2:	f107 0314 	add.w	r3, r7, #20
 80014e6:	4619      	mov	r1, r3
 80014e8:	4805      	ldr	r0, [pc, #20]	@ (8001500 <MX_GPIO_Init+0x100>)
 80014ea:	f001 fd03 	bl	8002ef4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014ee:	bf00      	nop
 80014f0:	3728      	adds	r7, #40	@ 0x28
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40023800 	.word	0x40023800
 80014fc:	40020800 	.word	0x40020800
 8001500:	40020000 	.word	0x40020000
 8001504:	00000000 	.word	0x00000000

08001508 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
	uint16_t hz = frequenciaMotor * N_AMOSTRAS;
 8001510:	4b2f      	ldr	r3, [pc, #188]	@ (80015d0 <HAL_ADC_ConvCpltCallback+0xc8>)
 8001512:	881b      	ldrh	r3, [r3, #0]
 8001514:	015b      	lsls	r3, r3, #5
 8001516:	817b      	strh	r3, [r7, #10]

	uint16_t PSC = (TIM_INTERNO/(hz*100))-1;
 8001518:	897b      	ldrh	r3, [r7, #10]
 800151a:	2264      	movs	r2, #100	@ 0x64
 800151c:	fb02 f303 	mul.w	r3, r2, r3
 8001520:	4a2c      	ldr	r2, [pc, #176]	@ (80015d4 <HAL_ADC_ConvCpltCallback+0xcc>)
 8001522:	fb92 f3f3 	sdiv	r3, r2, r3
 8001526:	b29b      	uxth	r3, r3
 8001528:	3b01      	subs	r3, #1
 800152a:	813b      	strh	r3, [r7, #8]
	__HAL_TIM_SET_PRESCALER(&htim2, PSC);
 800152c:	4b2a      	ldr	r3, [pc, #168]	@ (80015d8 <HAL_ADC_ConvCpltCallback+0xd0>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	893a      	ldrh	r2, [r7, #8]
 8001532:	629a      	str	r2, [r3, #40]	@ 0x28


	// Filtro ADC e compação
	double resultado = 0;
 8001534:	f04f 0200 	mov.w	r2, #0
 8001538:	f04f 0300 	mov.w	r3, #0
 800153c:	e9c7 2304 	strd	r2, r3, [r7, #16]

	for(int u = 0; u < N_AMOSTRAS; u++){
 8001540:	2300      	movs	r3, #0
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	e013      	b.n	800156e <HAL_ADC_ConvCpltCallback+0x66>
		resultado += medidas[u]*1.0;
 8001546:	4a25      	ldr	r2, [pc, #148]	@ (80015dc <HAL_ADC_ConvCpltCallback+0xd4>)
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800154e:	4618      	mov	r0, r3
 8001550:	f7fe ffb4 	bl	80004bc <__aeabi_i2d>
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800155c:	f7fe fe62 	bl	8000224 <__adddf3>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for(int u = 0; u < N_AMOSTRAS; u++){
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	3301      	adds	r3, #1
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2b1f      	cmp	r3, #31
 8001572:	dde8      	ble.n	8001546 <HAL_ADC_ConvCpltCallback+0x3e>
	}

	resultado = resultado/N_AMOSTRAS;
 8001574:	f04f 0200 	mov.w	r2, #0
 8001578:	4b19      	ldr	r3, [pc, #100]	@ (80015e0 <HAL_ADC_ConvCpltCallback+0xd8>)
 800157a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800157e:	f7ff f931 	bl	80007e4 <__aeabi_ddiv>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	e9c7 2304 	strd	r2, r3, [r7, #16]

	if(resultado > 3400.00){// Ativa o relé
 800158a:	a30f      	add	r3, pc, #60	@ (adr r3, 80015c8 <HAL_ADC_ConvCpltCallback+0xc0>)
 800158c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001590:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001594:	f7ff fa8c 	bl	8000ab0 <__aeabi_dcmpgt>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d005      	beq.n	80015aa <HAL_ADC_ConvCpltCallback+0xa2>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, SET);
 800159e:	2201      	movs	r2, #1
 80015a0:	2101      	movs	r1, #1
 80015a2:	4810      	ldr	r0, [pc, #64]	@ (80015e4 <HAL_ADC_ConvCpltCallback+0xdc>)
 80015a4:	f001 fe3a 	bl	800321c <HAL_GPIO_WritePin>
 80015a8:	e004      	b.n	80015b4 <HAL_ADC_ConvCpltCallback+0xac>
	}else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, RESET);
 80015aa:	2200      	movs	r2, #0
 80015ac:	2101      	movs	r1, #1
 80015ae:	480d      	ldr	r0, [pc, #52]	@ (80015e4 <HAL_ADC_ConvCpltCallback+0xdc>)
 80015b0:	f001 fe34 	bl	800321c <HAL_GPIO_WritePin>
	}

	HAL_ADC_Start_DMA(&hadc1, &medidas[0], N_AMOSTRAS);
 80015b4:	2220      	movs	r2, #32
 80015b6:	4909      	ldr	r1, [pc, #36]	@ (80015dc <HAL_ADC_ConvCpltCallback+0xd4>)
 80015b8:	480b      	ldr	r0, [pc, #44]	@ (80015e8 <HAL_ADC_ConvCpltCallback+0xe0>)
 80015ba:	f000 fbb3 	bl	8001d24 <HAL_ADC_Start_DMA>
}
 80015be:	bf00      	nop
 80015c0:	3718      	adds	r7, #24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	00000000 	.word	0x00000000
 80015cc:	40aa9000 	.word	0x40aa9000
 80015d0:	20000002 	.word	0x20000002
 80015d4:	0501bd00 	.word	0x0501bd00
 80015d8:	20000178 	.word	0x20000178
 80015dc:	2000002c 	.word	0x2000002c
 80015e0:	40400000 	.word	0x40400000
 80015e4:	40020800 	.word	0x40020800
 80015e8:	200000d0 	.word	0x200000d0

080015ec <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
	switch(ValSerial){
 80015f4:	4b13      	ldr	r3, [pc, #76]	@ (8001644 <HAL_UART_RxCpltCallback+0x58>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b50      	cmp	r3, #80	@ 0x50
 80015fa:	d011      	beq.n	8001620 <HAL_UART_RxCpltCallback+0x34>
 80015fc:	2b53      	cmp	r3, #83	@ 0x53
 80015fe:	d118      	bne.n	8001632 <HAL_UART_RxCpltCallback+0x46>
	case 'S':
		 frequenciaMotor = 50;
 8001600:	4b11      	ldr	r3, [pc, #68]	@ (8001648 <HAL_UART_RxCpltCallback+0x5c>)
 8001602:	2232      	movs	r2, #50	@ 0x32
 8001604:	801a      	strh	r2, [r3, #0]
		 HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, &pwmP[0], N_AMOSTRAS);
 8001606:	2320      	movs	r3, #32
 8001608:	4a10      	ldr	r2, [pc, #64]	@ (800164c <HAL_UART_RxCpltCallback+0x60>)
 800160a:	2100      	movs	r1, #0
 800160c:	4810      	ldr	r0, [pc, #64]	@ (8001650 <HAL_UART_RxCpltCallback+0x64>)
 800160e:	f002 fdd1 	bl	80041b4 <HAL_TIM_PWM_Start_DMA>
		 HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_2, &pwmN[0], N_AMOSTRAS);
 8001612:	2320      	movs	r3, #32
 8001614:	4a0f      	ldr	r2, [pc, #60]	@ (8001654 <HAL_UART_RxCpltCallback+0x68>)
 8001616:	2104      	movs	r1, #4
 8001618:	480d      	ldr	r0, [pc, #52]	@ (8001650 <HAL_UART_RxCpltCallback+0x64>)
 800161a:	f002 fdcb 	bl	80041b4 <HAL_TIM_PWM_Start_DMA>
		break;
 800161e:	e008      	b.n	8001632 <HAL_UART_RxCpltCallback+0x46>
	case 'P':
		HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
 8001620:	2100      	movs	r1, #0
 8001622:	480b      	ldr	r0, [pc, #44]	@ (8001650 <HAL_UART_RxCpltCallback+0x64>)
 8001624:	f002 ff8e 	bl	8004544 <HAL_TIM_PWM_Stop_DMA>
		HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_2);
 8001628:	2104      	movs	r1, #4
 800162a:	4809      	ldr	r0, [pc, #36]	@ (8001650 <HAL_UART_RxCpltCallback+0x64>)
 800162c:	f002 ff8a 	bl	8004544 <HAL_TIM_PWM_Stop_DMA>

		break;
 8001630:	bf00      	nop
	}
	HAL_UART_Receive_IT(&huart2, &ValSerial,1);
 8001632:	2201      	movs	r2, #1
 8001634:	4903      	ldr	r1, [pc, #12]	@ (8001644 <HAL_UART_RxCpltCallback+0x58>)
 8001636:	4808      	ldr	r0, [pc, #32]	@ (8001658 <HAL_UART_RxCpltCallback+0x6c>)
 8001638:	f003 ff9d 	bl	8005576 <HAL_UART_Receive_IT>
}
 800163c:	bf00      	nop
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20000000 	.word	0x20000000
 8001648:	20000002 	.word	0x20000002
 800164c:	20000310 	.word	0x20000310
 8001650:	20000178 	.word	0x20000178
 8001654:	20000390 	.word	0x20000390
 8001658:	200002c8 	.word	0x200002c8

0800165c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001660:	b672      	cpsid	i
}
 8001662:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001664:	bf00      	nop
 8001666:	e7fd      	b.n	8001664 <Error_Handler+0x8>

08001668 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	607b      	str	r3, [r7, #4]
 8001672:	4b10      	ldr	r3, [pc, #64]	@ (80016b4 <HAL_MspInit+0x4c>)
 8001674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001676:	4a0f      	ldr	r2, [pc, #60]	@ (80016b4 <HAL_MspInit+0x4c>)
 8001678:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800167c:	6453      	str	r3, [r2, #68]	@ 0x44
 800167e:	4b0d      	ldr	r3, [pc, #52]	@ (80016b4 <HAL_MspInit+0x4c>)
 8001680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001682:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001686:	607b      	str	r3, [r7, #4]
 8001688:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	603b      	str	r3, [r7, #0]
 800168e:	4b09      	ldr	r3, [pc, #36]	@ (80016b4 <HAL_MspInit+0x4c>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001692:	4a08      	ldr	r2, [pc, #32]	@ (80016b4 <HAL_MspInit+0x4c>)
 8001694:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001698:	6413      	str	r3, [r2, #64]	@ 0x40
 800169a:	4b06      	ldr	r3, [pc, #24]	@ (80016b4 <HAL_MspInit+0x4c>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016a2:	603b      	str	r3, [r7, #0]
 80016a4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016a6:	2007      	movs	r0, #7
 80016a8:	f000 ffe0 	bl	800266c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ac:	bf00      	nop
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40023800 	.word	0x40023800

080016b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b08a      	sub	sp, #40	@ 0x28
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]
 80016ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a2e      	ldr	r2, [pc, #184]	@ (8001790 <HAL_ADC_MspInit+0xd8>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d156      	bne.n	8001788 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	613b      	str	r3, [r7, #16]
 80016de:	4b2d      	ldr	r3, [pc, #180]	@ (8001794 <HAL_ADC_MspInit+0xdc>)
 80016e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016e2:	4a2c      	ldr	r2, [pc, #176]	@ (8001794 <HAL_ADC_MspInit+0xdc>)
 80016e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80016ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001794 <HAL_ADC_MspInit+0xdc>)
 80016ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016f2:	613b      	str	r3, [r7, #16]
 80016f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	4b26      	ldr	r3, [pc, #152]	@ (8001794 <HAL_ADC_MspInit+0xdc>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fe:	4a25      	ldr	r2, [pc, #148]	@ (8001794 <HAL_ADC_MspInit+0xdc>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	6313      	str	r3, [r2, #48]	@ 0x30
 8001706:	4b23      	ldr	r3, [pc, #140]	@ (8001794 <HAL_ADC_MspInit+0xdc>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001712:	2301      	movs	r3, #1
 8001714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001716:	2303      	movs	r3, #3
 8001718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171e:	f107 0314 	add.w	r3, r7, #20
 8001722:	4619      	mov	r1, r3
 8001724:	481c      	ldr	r0, [pc, #112]	@ (8001798 <HAL_ADC_MspInit+0xe0>)
 8001726:	f001 fbe5 	bl	8002ef4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800172a:	4b1c      	ldr	r3, [pc, #112]	@ (800179c <HAL_ADC_MspInit+0xe4>)
 800172c:	4a1c      	ldr	r2, [pc, #112]	@ (80017a0 <HAL_ADC_MspInit+0xe8>)
 800172e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001730:	4b1a      	ldr	r3, [pc, #104]	@ (800179c <HAL_ADC_MspInit+0xe4>)
 8001732:	2200      	movs	r2, #0
 8001734:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001736:	4b19      	ldr	r3, [pc, #100]	@ (800179c <HAL_ADC_MspInit+0xe4>)
 8001738:	2200      	movs	r2, #0
 800173a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800173c:	4b17      	ldr	r3, [pc, #92]	@ (800179c <HAL_ADC_MspInit+0xe4>)
 800173e:	2200      	movs	r2, #0
 8001740:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001742:	4b16      	ldr	r3, [pc, #88]	@ (800179c <HAL_ADC_MspInit+0xe4>)
 8001744:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001748:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800174a:	4b14      	ldr	r3, [pc, #80]	@ (800179c <HAL_ADC_MspInit+0xe4>)
 800174c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001750:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001752:	4b12      	ldr	r3, [pc, #72]	@ (800179c <HAL_ADC_MspInit+0xe4>)
 8001754:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001758:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800175a:	4b10      	ldr	r3, [pc, #64]	@ (800179c <HAL_ADC_MspInit+0xe4>)
 800175c:	2200      	movs	r2, #0
 800175e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001760:	4b0e      	ldr	r3, [pc, #56]	@ (800179c <HAL_ADC_MspInit+0xe4>)
 8001762:	2200      	movs	r2, #0
 8001764:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001766:	4b0d      	ldr	r3, [pc, #52]	@ (800179c <HAL_ADC_MspInit+0xe4>)
 8001768:	2200      	movs	r2, #0
 800176a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800176c:	480b      	ldr	r0, [pc, #44]	@ (800179c <HAL_ADC_MspInit+0xe4>)
 800176e:	f000 ffbf 	bl	80026f0 <HAL_DMA_Init>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001778:	f7ff ff70 	bl	800165c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4a07      	ldr	r2, [pc, #28]	@ (800179c <HAL_ADC_MspInit+0xe4>)
 8001780:	639a      	str	r2, [r3, #56]	@ 0x38
 8001782:	4a06      	ldr	r2, [pc, #24]	@ (800179c <HAL_ADC_MspInit+0xe4>)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001788:	bf00      	nop
 800178a:	3728      	adds	r7, #40	@ 0x28
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40012000 	.word	0x40012000
 8001794:	40023800 	.word	0x40023800
 8001798:	40020000 	.word	0x40020000
 800179c:	20000118 	.word	0x20000118
 80017a0:	40026410 	.word	0x40026410

080017a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017b4:	d178      	bne.n	80018a8 <HAL_TIM_Base_MspInit+0x104>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	4b47      	ldr	r3, [pc, #284]	@ (80018d8 <HAL_TIM_Base_MspInit+0x134>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017be:	4a46      	ldr	r2, [pc, #280]	@ (80018d8 <HAL_TIM_Base_MspInit+0x134>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80017c6:	4b44      	ldr	r3, [pc, #272]	@ (80018d8 <HAL_TIM_Base_MspInit+0x134>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 80017d2:	4b42      	ldr	r3, [pc, #264]	@ (80018dc <HAL_TIM_Base_MspInit+0x138>)
 80017d4:	4a42      	ldr	r2, [pc, #264]	@ (80018e0 <HAL_TIM_Base_MspInit+0x13c>)
 80017d6:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 80017d8:	4b40      	ldr	r3, [pc, #256]	@ (80018dc <HAL_TIM_Base_MspInit+0x138>)
 80017da:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80017de:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017e0:	4b3e      	ldr	r3, [pc, #248]	@ (80018dc <HAL_TIM_Base_MspInit+0x138>)
 80017e2:	2240      	movs	r2, #64	@ 0x40
 80017e4:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80017e6:	4b3d      	ldr	r3, [pc, #244]	@ (80018dc <HAL_TIM_Base_MspInit+0x138>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80017ec:	4b3b      	ldr	r3, [pc, #236]	@ (80018dc <HAL_TIM_Base_MspInit+0x138>)
 80017ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017f2:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017f4:	4b39      	ldr	r3, [pc, #228]	@ (80018dc <HAL_TIM_Base_MspInit+0x138>)
 80017f6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80017fa:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017fc:	4b37      	ldr	r3, [pc, #220]	@ (80018dc <HAL_TIM_Base_MspInit+0x138>)
 80017fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001802:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8001804:	4b35      	ldr	r3, [pc, #212]	@ (80018dc <HAL_TIM_Base_MspInit+0x138>)
 8001806:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800180a:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800180c:	4b33      	ldr	r3, [pc, #204]	@ (80018dc <HAL_TIM_Base_MspInit+0x138>)
 800180e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001812:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001814:	4b31      	ldr	r3, [pc, #196]	@ (80018dc <HAL_TIM_Base_MspInit+0x138>)
 8001816:	2200      	movs	r2, #0
 8001818:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 800181a:	4830      	ldr	r0, [pc, #192]	@ (80018dc <HAL_TIM_Base_MspInit+0x138>)
 800181c:	f000 ff68 	bl	80026f0 <HAL_DMA_Init>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <HAL_TIM_Base_MspInit+0x86>
    {
      Error_Handler();
 8001826:	f7ff ff19 	bl	800165c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a2b      	ldr	r2, [pc, #172]	@ (80018dc <HAL_TIM_Base_MspInit+0x138>)
 800182e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001830:	4a2a      	ldr	r2, [pc, #168]	@ (80018dc <HAL_TIM_Base_MspInit+0x138>)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Stream6;
 8001836:	4b2b      	ldr	r3, [pc, #172]	@ (80018e4 <HAL_TIM_Base_MspInit+0x140>)
 8001838:	4a2b      	ldr	r2, [pc, #172]	@ (80018e8 <HAL_TIM_Base_MspInit+0x144>)
 800183a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Channel = DMA_CHANNEL_3;
 800183c:	4b29      	ldr	r3, [pc, #164]	@ (80018e4 <HAL_TIM_Base_MspInit+0x140>)
 800183e:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001842:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001844:	4b27      	ldr	r3, [pc, #156]	@ (80018e4 <HAL_TIM_Base_MspInit+0x140>)
 8001846:	2240      	movs	r2, #64	@ 0x40
 8001848:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 800184a:	4b26      	ldr	r3, [pc, #152]	@ (80018e4 <HAL_TIM_Base_MspInit+0x140>)
 800184c:	2200      	movs	r2, #0
 800184e:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8001850:	4b24      	ldr	r3, [pc, #144]	@ (80018e4 <HAL_TIM_Base_MspInit+0x140>)
 8001852:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001856:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001858:	4b22      	ldr	r3, [pc, #136]	@ (80018e4 <HAL_TIM_Base_MspInit+0x140>)
 800185a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800185e:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001860:	4b20      	ldr	r3, [pc, #128]	@ (80018e4 <HAL_TIM_Base_MspInit+0x140>)
 8001862:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001866:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 8001868:	4b1e      	ldr	r3, [pc, #120]	@ (80018e4 <HAL_TIM_Base_MspInit+0x140>)
 800186a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800186e:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 8001870:	4b1c      	ldr	r3, [pc, #112]	@ (80018e4 <HAL_TIM_Base_MspInit+0x140>)
 8001872:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001876:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch2_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001878:	4b1a      	ldr	r3, [pc, #104]	@ (80018e4 <HAL_TIM_Base_MspInit+0x140>)
 800187a:	2200      	movs	r2, #0
 800187c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 800187e:	4819      	ldr	r0, [pc, #100]	@ (80018e4 <HAL_TIM_Base_MspInit+0x140>)
 8001880:	f000 ff36 	bl	80026f0 <HAL_DMA_Init>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <HAL_TIM_Base_MspInit+0xea>
    {
      Error_Handler();
 800188a:	f7ff fee7 	bl	800165c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a14      	ldr	r2, [pc, #80]	@ (80018e4 <HAL_TIM_Base_MspInit+0x140>)
 8001892:	629a      	str	r2, [r3, #40]	@ 0x28
 8001894:	4a13      	ldr	r2, [pc, #76]	@ (80018e4 <HAL_TIM_Base_MspInit+0x140>)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a11      	ldr	r2, [pc, #68]	@ (80018e4 <HAL_TIM_Base_MspInit+0x140>)
 800189e:	631a      	str	r2, [r3, #48]	@ 0x30
 80018a0:	4a10      	ldr	r2, [pc, #64]	@ (80018e4 <HAL_TIM_Base_MspInit+0x140>)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80018a6:	e012      	b.n	80018ce <HAL_TIM_Base_MspInit+0x12a>
  else if(htim_base->Instance==TIM3)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a0f      	ldr	r2, [pc, #60]	@ (80018ec <HAL_TIM_Base_MspInit+0x148>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d10d      	bne.n	80018ce <HAL_TIM_Base_MspInit+0x12a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	60bb      	str	r3, [r7, #8]
 80018b6:	4b08      	ldr	r3, [pc, #32]	@ (80018d8 <HAL_TIM_Base_MspInit+0x134>)
 80018b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ba:	4a07      	ldr	r2, [pc, #28]	@ (80018d8 <HAL_TIM_Base_MspInit+0x134>)
 80018bc:	f043 0302 	orr.w	r3, r3, #2
 80018c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80018c2:	4b05      	ldr	r3, [pc, #20]	@ (80018d8 <HAL_TIM_Base_MspInit+0x134>)
 80018c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	60bb      	str	r3, [r7, #8]
 80018cc:	68bb      	ldr	r3, [r7, #8]
}
 80018ce:	bf00      	nop
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40023800 	.word	0x40023800
 80018dc:	20000208 	.word	0x20000208
 80018e0:	40026088 	.word	0x40026088
 80018e4:	20000268 	.word	0x20000268
 80018e8:	400260a0 	.word	0x400260a0
 80018ec:	40000400 	.word	0x40000400

080018f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b08a      	sub	sp, #40	@ 0x28
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f8:	f107 0314 	add.w	r3, r7, #20
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	60da      	str	r2, [r3, #12]
 8001906:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001910:	d13e      	bne.n	8001990 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	613b      	str	r3, [r7, #16]
 8001916:	4b32      	ldr	r3, [pc, #200]	@ (80019e0 <HAL_TIM_MspPostInit+0xf0>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191a:	4a31      	ldr	r2, [pc, #196]	@ (80019e0 <HAL_TIM_MspPostInit+0xf0>)
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	6313      	str	r3, [r2, #48]	@ 0x30
 8001922:	4b2f      	ldr	r3, [pc, #188]	@ (80019e0 <HAL_TIM_MspPostInit+0xf0>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	613b      	str	r3, [r7, #16]
 800192c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	4b2b      	ldr	r3, [pc, #172]	@ (80019e0 <HAL_TIM_MspPostInit+0xf0>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001936:	4a2a      	ldr	r2, [pc, #168]	@ (80019e0 <HAL_TIM_MspPostInit+0xf0>)
 8001938:	f043 0302 	orr.w	r3, r3, #2
 800193c:	6313      	str	r3, [r2, #48]	@ 0x30
 800193e:	4b28      	ldr	r3, [pc, #160]	@ (80019e0 <HAL_TIM_MspPostInit+0xf0>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB9     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800194a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800194e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001950:	2302      	movs	r3, #2
 8001952:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001958:	2300      	movs	r3, #0
 800195a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800195c:	2301      	movs	r3, #1
 800195e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001960:	f107 0314 	add.w	r3, r7, #20
 8001964:	4619      	mov	r1, r3
 8001966:	481f      	ldr	r0, [pc, #124]	@ (80019e4 <HAL_TIM_MspPostInit+0xf4>)
 8001968:	f001 fac4 	bl	8002ef4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800196c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001970:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001972:	2302      	movs	r3, #2
 8001974:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001976:	2300      	movs	r3, #0
 8001978:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197a:	2300      	movs	r3, #0
 800197c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800197e:	2301      	movs	r3, #1
 8001980:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001982:	f107 0314 	add.w	r3, r7, #20
 8001986:	4619      	mov	r1, r3
 8001988:	4817      	ldr	r0, [pc, #92]	@ (80019e8 <HAL_TIM_MspPostInit+0xf8>)
 800198a:	f001 fab3 	bl	8002ef4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800198e:	e022      	b.n	80019d6 <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM3)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a15      	ldr	r2, [pc, #84]	@ (80019ec <HAL_TIM_MspPostInit+0xfc>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d11d      	bne.n	80019d6 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	4b10      	ldr	r3, [pc, #64]	@ (80019e0 <HAL_TIM_MspPostInit+0xf0>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a2:	4a0f      	ldr	r2, [pc, #60]	@ (80019e0 <HAL_TIM_MspPostInit+0xf0>)
 80019a4:	f043 0301 	orr.w	r3, r3, #1
 80019a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019aa:	4b0d      	ldr	r3, [pc, #52]	@ (80019e0 <HAL_TIM_MspPostInit+0xf0>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	60bb      	str	r3, [r7, #8]
 80019b4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019b6:	2340      	movs	r3, #64	@ 0x40
 80019b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ba:	2302      	movs	r3, #2
 80019bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c2:	2300      	movs	r3, #0
 80019c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019c6:	2302      	movs	r3, #2
 80019c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ca:	f107 0314 	add.w	r3, r7, #20
 80019ce:	4619      	mov	r1, r3
 80019d0:	4804      	ldr	r0, [pc, #16]	@ (80019e4 <HAL_TIM_MspPostInit+0xf4>)
 80019d2:	f001 fa8f 	bl	8002ef4 <HAL_GPIO_Init>
}
 80019d6:	bf00      	nop
 80019d8:	3728      	adds	r7, #40	@ 0x28
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40023800 	.word	0x40023800
 80019e4:	40020000 	.word	0x40020000
 80019e8:	40020400 	.word	0x40020400
 80019ec:	40000400 	.word	0x40000400

080019f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08a      	sub	sp, #40	@ 0x28
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f8:	f107 0314 	add.w	r3, r7, #20
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a1d      	ldr	r2, [pc, #116]	@ (8001a84 <HAL_UART_MspInit+0x94>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d133      	bne.n	8001a7a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	613b      	str	r3, [r7, #16]
 8001a16:	4b1c      	ldr	r3, [pc, #112]	@ (8001a88 <HAL_UART_MspInit+0x98>)
 8001a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1a:	4a1b      	ldr	r2, [pc, #108]	@ (8001a88 <HAL_UART_MspInit+0x98>)
 8001a1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a20:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a22:	4b19      	ldr	r3, [pc, #100]	@ (8001a88 <HAL_UART_MspInit+0x98>)
 8001a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a2a:	613b      	str	r3, [r7, #16]
 8001a2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	4b15      	ldr	r3, [pc, #84]	@ (8001a88 <HAL_UART_MspInit+0x98>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a36:	4a14      	ldr	r2, [pc, #80]	@ (8001a88 <HAL_UART_MspInit+0x98>)
 8001a38:	f043 0301 	orr.w	r3, r3, #1
 8001a3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a3e:	4b12      	ldr	r3, [pc, #72]	@ (8001a88 <HAL_UART_MspInit+0x98>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a4a:	230c      	movs	r3, #12
 8001a4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4e:	2302      	movs	r3, #2
 8001a50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a52:	2300      	movs	r3, #0
 8001a54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a56:	2303      	movs	r3, #3
 8001a58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a5a:	2307      	movs	r3, #7
 8001a5c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5e:	f107 0314 	add.w	r3, r7, #20
 8001a62:	4619      	mov	r1, r3
 8001a64:	4809      	ldr	r0, [pc, #36]	@ (8001a8c <HAL_UART_MspInit+0x9c>)
 8001a66:	f001 fa45 	bl	8002ef4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	2026      	movs	r0, #38	@ 0x26
 8001a70:	f000 fe07 	bl	8002682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a74:	2026      	movs	r0, #38	@ 0x26
 8001a76:	f000 fe20 	bl	80026ba <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001a7a:	bf00      	nop
 8001a7c:	3728      	adds	r7, #40	@ 0x28
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40004400 	.word	0x40004400
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	40020000 	.word	0x40020000

08001a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a94:	bf00      	nop
 8001a96:	e7fd      	b.n	8001a94 <NMI_Handler+0x4>

08001a98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a9c:	bf00      	nop
 8001a9e:	e7fd      	b.n	8001a9c <HardFault_Handler+0x4>

08001aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aa4:	bf00      	nop
 8001aa6:	e7fd      	b.n	8001aa4 <MemManage_Handler+0x4>

08001aa8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aac:	bf00      	nop
 8001aae:	e7fd      	b.n	8001aac <BusFault_Handler+0x4>

08001ab0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ab4:	bf00      	nop
 8001ab6:	e7fd      	b.n	8001ab4 <UsageFault_Handler+0x4>

08001ab8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr

08001ac6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aca:	bf00      	nop
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ad8:	bf00      	nop
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ae6:	f000 f8b9 	bl	8001c5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
	...

08001af0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001af4:	4802      	ldr	r0, [pc, #8]	@ (8001b00 <DMA1_Stream5_IRQHandler+0x10>)
 8001af6:	f000 ff93 	bl	8002a20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20000208 	.word	0x20000208

08001b04 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8001b08:	4802      	ldr	r0, [pc, #8]	@ (8001b14 <DMA1_Stream6_IRQHandler+0x10>)
 8001b0a:	f000 ff89 	bl	8002a20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	20000268 	.word	0x20000268

08001b18 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b1c:	4802      	ldr	r0, [pc, #8]	@ (8001b28 <USART2_IRQHandler+0x10>)
 8001b1e:	f003 fd4f 	bl	80055c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	200002c8 	.word	0x200002c8

08001b2c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b30:	4802      	ldr	r0, [pc, #8]	@ (8001b3c <DMA2_Stream0_IRQHandler+0x10>)
 8001b32:	f000 ff75 	bl	8002a20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20000118 	.word	0x20000118

08001b40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b44:	4b06      	ldr	r3, [pc, #24]	@ (8001b60 <SystemInit+0x20>)
 8001b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b4a:	4a05      	ldr	r2, [pc, #20]	@ (8001b60 <SystemInit+0x20>)
 8001b4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b54:	bf00      	nop
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	e000ed00 	.word	0xe000ed00

08001b64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b64:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b9c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001b68:	f7ff ffea 	bl	8001b40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b6c:	480c      	ldr	r0, [pc, #48]	@ (8001ba0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b6e:	490d      	ldr	r1, [pc, #52]	@ (8001ba4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b70:	4a0d      	ldr	r2, [pc, #52]	@ (8001ba8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b74:	e002      	b.n	8001b7c <LoopCopyDataInit>

08001b76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b7a:	3304      	adds	r3, #4

08001b7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b80:	d3f9      	bcc.n	8001b76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b82:	4a0a      	ldr	r2, [pc, #40]	@ (8001bac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b84:	4c0a      	ldr	r4, [pc, #40]	@ (8001bb0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b88:	e001      	b.n	8001b8e <LoopFillZerobss>

08001b8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b8c:	3204      	adds	r2, #4

08001b8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b90:	d3fb      	bcc.n	8001b8a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001b92:	f004 fc87 	bl	80064a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b96:	f7ff f957 	bl	8000e48 <main>
  bx  lr    
 8001b9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ba0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ba4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001ba8:	08007780 	.word	0x08007780
  ldr r2, =_sbss
 8001bac:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001bb0:	20000414 	.word	0x20000414

08001bb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bb4:	e7fe      	b.n	8001bb4 <ADC_IRQHandler>
	...

08001bb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bbc:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf8 <HAL_Init+0x40>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a0d      	ldr	r2, [pc, #52]	@ (8001bf8 <HAL_Init+0x40>)
 8001bc2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf8 <HAL_Init+0x40>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a0a      	ldr	r2, [pc, #40]	@ (8001bf8 <HAL_Init+0x40>)
 8001bce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bd4:	4b08      	ldr	r3, [pc, #32]	@ (8001bf8 <HAL_Init+0x40>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a07      	ldr	r2, [pc, #28]	@ (8001bf8 <HAL_Init+0x40>)
 8001bda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001be0:	2003      	movs	r0, #3
 8001be2:	f000 fd43 	bl	800266c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001be6:	2000      	movs	r0, #0
 8001be8:	f000 f808 	bl	8001bfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bec:	f7ff fd3c 	bl	8001668 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40023c00 	.word	0x40023c00

08001bfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c04:	4b12      	ldr	r3, [pc, #72]	@ (8001c50 <HAL_InitTick+0x54>)
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	4b12      	ldr	r3, [pc, #72]	@ (8001c54 <HAL_InitTick+0x58>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f000 fd5b 	bl	80026d6 <HAL_SYSTICK_Config>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e00e      	b.n	8001c48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2b0f      	cmp	r3, #15
 8001c2e:	d80a      	bhi.n	8001c46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c30:	2200      	movs	r2, #0
 8001c32:	6879      	ldr	r1, [r7, #4]
 8001c34:	f04f 30ff 	mov.w	r0, #4294967295
 8001c38:	f000 fd23 	bl	8002682 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c3c:	4a06      	ldr	r2, [pc, #24]	@ (8001c58 <HAL_InitTick+0x5c>)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
 8001c44:	e000      	b.n	8001c48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	20000004 	.word	0x20000004
 8001c54:	2000000c 	.word	0x2000000c
 8001c58:	20000008 	.word	0x20000008

08001c5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c60:	4b06      	ldr	r3, [pc, #24]	@ (8001c7c <HAL_IncTick+0x20>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	461a      	mov	r2, r3
 8001c66:	4b06      	ldr	r3, [pc, #24]	@ (8001c80 <HAL_IncTick+0x24>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	4a04      	ldr	r2, [pc, #16]	@ (8001c80 <HAL_IncTick+0x24>)
 8001c6e:	6013      	str	r3, [r2, #0]
}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	2000000c 	.word	0x2000000c
 8001c80:	20000410 	.word	0x20000410

08001c84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  return uwTick;
 8001c88:	4b03      	ldr	r3, [pc, #12]	@ (8001c98 <HAL_GetTick+0x14>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	20000410 	.word	0x20000410

08001c9c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d101      	bne.n	8001cb2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e033      	b.n	8001d1a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d109      	bne.n	8001cce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7ff fcfc 	bl	80016b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd2:	f003 0310 	and.w	r3, r3, #16
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d118      	bne.n	8001d0c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cde:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001ce2:	f023 0302 	bic.w	r3, r3, #2
 8001ce6:	f043 0202 	orr.w	r2, r3, #2
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 fa6e 	bl	80021d0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfe:	f023 0303 	bic.w	r3, r3, #3
 8001d02:	f043 0201 	orr.w	r2, r3, #1
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d0a:	e001      	b.n	8001d10 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
	...

08001d24 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001d30:	2300      	movs	r3, #0
 8001d32:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d101      	bne.n	8001d42 <HAL_ADC_Start_DMA+0x1e>
 8001d3e:	2302      	movs	r3, #2
 8001d40:	e0e9      	b.n	8001f16 <HAL_ADC_Start_DMA+0x1f2>
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2201      	movs	r2, #1
 8001d46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d018      	beq.n	8001d8a <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	689a      	ldr	r2, [r3, #8]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f042 0201 	orr.w	r2, r2, #1
 8001d66:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d68:	4b6d      	ldr	r3, [pc, #436]	@ (8001f20 <HAL_ADC_Start_DMA+0x1fc>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a6d      	ldr	r2, [pc, #436]	@ (8001f24 <HAL_ADC_Start_DMA+0x200>)
 8001d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d72:	0c9a      	lsrs	r2, r3, #18
 8001d74:	4613      	mov	r3, r2
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	4413      	add	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001d7c:	e002      	b.n	8001d84 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	3b01      	subs	r3, #1
 8001d82:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1f9      	bne.n	8001d7e <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d98:	d107      	bne.n	8001daa <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001da8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	f040 80a1 	bne.w	8001efc <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dbe:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001dc2:	f023 0301 	bic.w	r3, r3, #1
 8001dc6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d007      	beq.n	8001dec <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001de4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001df4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001df8:	d106      	bne.n	8001e08 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dfe:	f023 0206 	bic.w	r2, r3, #6
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	645a      	str	r2, [r3, #68]	@ 0x44
 8001e06:	e002      	b.n	8001e0e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e16:	4b44      	ldr	r3, [pc, #272]	@ (8001f28 <HAL_ADC_Start_DMA+0x204>)
 8001e18:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e1e:	4a43      	ldr	r2, [pc, #268]	@ (8001f2c <HAL_ADC_Start_DMA+0x208>)
 8001e20:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e26:	4a42      	ldr	r2, [pc, #264]	@ (8001f30 <HAL_ADC_Start_DMA+0x20c>)
 8001e28:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e2e:	4a41      	ldr	r2, [pc, #260]	@ (8001f34 <HAL_ADC_Start_DMA+0x210>)
 8001e30:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001e3a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	685a      	ldr	r2, [r3, #4]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001e4a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	689a      	ldr	r2, [r3, #8]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e5a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	334c      	adds	r3, #76	@ 0x4c
 8001e66:	4619      	mov	r1, r3
 8001e68:	68ba      	ldr	r2, [r7, #8]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f000 fcee 	bl	800284c <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f003 031f 	and.w	r3, r3, #31
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d12a      	bne.n	8001ed2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a2d      	ldr	r2, [pc, #180]	@ (8001f38 <HAL_ADC_Start_DMA+0x214>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d015      	beq.n	8001eb2 <HAL_ADC_Start_DMA+0x18e>
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a2c      	ldr	r2, [pc, #176]	@ (8001f3c <HAL_ADC_Start_DMA+0x218>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d105      	bne.n	8001e9c <HAL_ADC_Start_DMA+0x178>
 8001e90:	4b25      	ldr	r3, [pc, #148]	@ (8001f28 <HAL_ADC_Start_DMA+0x204>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f003 031f 	and.w	r3, r3, #31
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d00a      	beq.n	8001eb2 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a27      	ldr	r2, [pc, #156]	@ (8001f40 <HAL_ADC_Start_DMA+0x21c>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d136      	bne.n	8001f14 <HAL_ADC_Start_DMA+0x1f0>
 8001ea6:	4b20      	ldr	r3, [pc, #128]	@ (8001f28 <HAL_ADC_Start_DMA+0x204>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f003 0310 	and.w	r3, r3, #16
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d130      	bne.n	8001f14 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d129      	bne.n	8001f14 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	689a      	ldr	r2, [r3, #8]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001ece:	609a      	str	r2, [r3, #8]
 8001ed0:	e020      	b.n	8001f14 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a18      	ldr	r2, [pc, #96]	@ (8001f38 <HAL_ADC_Start_DMA+0x214>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d11b      	bne.n	8001f14 <HAL_ADC_Start_DMA+0x1f0>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d114      	bne.n	8001f14 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	689a      	ldr	r2, [r3, #8]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001ef8:	609a      	str	r2, [r3, #8]
 8001efa:	e00b      	b.n	8001f14 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f00:	f043 0210 	orr.w	r2, r3, #16
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f0c:	f043 0201 	orr.w	r2, r3, #1
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3718      	adds	r7, #24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	20000004 	.word	0x20000004
 8001f24:	431bde83 	.word	0x431bde83
 8001f28:	40012300 	.word	0x40012300
 8001f2c:	080023c9 	.word	0x080023c9
 8001f30:	08002483 	.word	0x08002483
 8001f34:	0800249f 	.word	0x0800249f
 8001f38:	40012000 	.word	0x40012000
 8001f3c:	40012100 	.word	0x40012100
 8001f40:	40012200 	.word	0x40012200

08001f44 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f76:	2300      	movs	r3, #0
 8001f78:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d101      	bne.n	8001f88 <HAL_ADC_ConfigChannel+0x1c>
 8001f84:	2302      	movs	r3, #2
 8001f86:	e113      	b.n	80021b0 <HAL_ADC_ConfigChannel+0x244>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2b09      	cmp	r3, #9
 8001f96:	d925      	bls.n	8001fe4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	68d9      	ldr	r1, [r3, #12]
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	4413      	add	r3, r2
 8001fac:	3b1e      	subs	r3, #30
 8001fae:	2207      	movs	r2, #7
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	43da      	mvns	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	400a      	ands	r2, r1
 8001fbc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68d9      	ldr	r1, [r3, #12]
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	4618      	mov	r0, r3
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	4403      	add	r3, r0
 8001fd6:	3b1e      	subs	r3, #30
 8001fd8:	409a      	lsls	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	60da      	str	r2, [r3, #12]
 8001fe2:	e022      	b.n	800202a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6919      	ldr	r1, [r3, #16]
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	4413      	add	r3, r2
 8001ff8:	2207      	movs	r2, #7
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43da      	mvns	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	400a      	ands	r2, r1
 8002006:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6919      	ldr	r1, [r3, #16]
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	689a      	ldr	r2, [r3, #8]
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	b29b      	uxth	r3, r3
 8002018:	4618      	mov	r0, r3
 800201a:	4603      	mov	r3, r0
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	4403      	add	r3, r0
 8002020:	409a      	lsls	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	430a      	orrs	r2, r1
 8002028:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	2b06      	cmp	r3, #6
 8002030:	d824      	bhi.n	800207c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685a      	ldr	r2, [r3, #4]
 800203c:	4613      	mov	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	4413      	add	r3, r2
 8002042:	3b05      	subs	r3, #5
 8002044:	221f      	movs	r2, #31
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	43da      	mvns	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	400a      	ands	r2, r1
 8002052:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	b29b      	uxth	r3, r3
 8002060:	4618      	mov	r0, r3
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685a      	ldr	r2, [r3, #4]
 8002066:	4613      	mov	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	4413      	add	r3, r2
 800206c:	3b05      	subs	r3, #5
 800206e:	fa00 f203 	lsl.w	r2, r0, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	430a      	orrs	r2, r1
 8002078:	635a      	str	r2, [r3, #52]	@ 0x34
 800207a:	e04c      	b.n	8002116 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	2b0c      	cmp	r3, #12
 8002082:	d824      	bhi.n	80020ce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	4613      	mov	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4413      	add	r3, r2
 8002094:	3b23      	subs	r3, #35	@ 0x23
 8002096:	221f      	movs	r2, #31
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	43da      	mvns	r2, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	400a      	ands	r2, r1
 80020a4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	4618      	mov	r0, r3
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685a      	ldr	r2, [r3, #4]
 80020b8:	4613      	mov	r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	4413      	add	r3, r2
 80020be:	3b23      	subs	r3, #35	@ 0x23
 80020c0:	fa00 f203 	lsl.w	r2, r0, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	430a      	orrs	r2, r1
 80020ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80020cc:	e023      	b.n	8002116 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685a      	ldr	r2, [r3, #4]
 80020d8:	4613      	mov	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	4413      	add	r3, r2
 80020de:	3b41      	subs	r3, #65	@ 0x41
 80020e0:	221f      	movs	r2, #31
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	43da      	mvns	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	400a      	ands	r2, r1
 80020ee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	4618      	mov	r0, r3
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685a      	ldr	r2, [r3, #4]
 8002102:	4613      	mov	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	3b41      	subs	r3, #65	@ 0x41
 800210a:	fa00 f203 	lsl.w	r2, r0, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	430a      	orrs	r2, r1
 8002114:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002116:	4b29      	ldr	r3, [pc, #164]	@ (80021bc <HAL_ADC_ConfigChannel+0x250>)
 8002118:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a28      	ldr	r2, [pc, #160]	@ (80021c0 <HAL_ADC_ConfigChannel+0x254>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d10f      	bne.n	8002144 <HAL_ADC_ConfigChannel+0x1d8>
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2b12      	cmp	r3, #18
 800212a:	d10b      	bne.n	8002144 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a1d      	ldr	r2, [pc, #116]	@ (80021c0 <HAL_ADC_ConfigChannel+0x254>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d12b      	bne.n	80021a6 <HAL_ADC_ConfigChannel+0x23a>
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a1c      	ldr	r2, [pc, #112]	@ (80021c4 <HAL_ADC_ConfigChannel+0x258>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d003      	beq.n	8002160 <HAL_ADC_ConfigChannel+0x1f4>
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2b11      	cmp	r3, #17
 800215e:	d122      	bne.n	80021a6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a11      	ldr	r2, [pc, #68]	@ (80021c4 <HAL_ADC_ConfigChannel+0x258>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d111      	bne.n	80021a6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002182:	4b11      	ldr	r3, [pc, #68]	@ (80021c8 <HAL_ADC_ConfigChannel+0x25c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a11      	ldr	r2, [pc, #68]	@ (80021cc <HAL_ADC_ConfigChannel+0x260>)
 8002188:	fba2 2303 	umull	r2, r3, r2, r3
 800218c:	0c9a      	lsrs	r2, r3, #18
 800218e:	4613      	mov	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4413      	add	r3, r2
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002198:	e002      	b.n	80021a0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	3b01      	subs	r3, #1
 800219e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1f9      	bne.n	800219a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3714      	adds	r7, #20
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	40012300 	.word	0x40012300
 80021c0:	40012000 	.word	0x40012000
 80021c4:	10000012 	.word	0x10000012
 80021c8:	20000004 	.word	0x20000004
 80021cc:	431bde83 	.word	0x431bde83

080021d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021d8:	4b79      	ldr	r3, [pc, #484]	@ (80023c0 <ADC_Init+0x1f0>)
 80021da:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	685a      	ldr	r2, [r3, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	431a      	orrs	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002204:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	6859      	ldr	r1, [r3, #4]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	021a      	lsls	r2, r3, #8
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	430a      	orrs	r2, r1
 8002218:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	685a      	ldr	r2, [r3, #4]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002228:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	6859      	ldr	r1, [r3, #4]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	430a      	orrs	r2, r1
 800223a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	689a      	ldr	r2, [r3, #8]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800224a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	6899      	ldr	r1, [r3, #8]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68da      	ldr	r2, [r3, #12]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	430a      	orrs	r2, r1
 800225c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002262:	4a58      	ldr	r2, [pc, #352]	@ (80023c4 <ADC_Init+0x1f4>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d022      	beq.n	80022ae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	689a      	ldr	r2, [r3, #8]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002276:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6899      	ldr	r1, [r3, #8]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	430a      	orrs	r2, r1
 8002288:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002298:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6899      	ldr	r1, [r3, #8]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	430a      	orrs	r2, r1
 80022aa:	609a      	str	r2, [r3, #8]
 80022ac:	e00f      	b.n	80022ce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	689a      	ldr	r2, [r3, #8]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80022bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80022cc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	689a      	ldr	r2, [r3, #8]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f022 0202 	bic.w	r2, r2, #2
 80022dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6899      	ldr	r1, [r3, #8]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	7e1b      	ldrb	r3, [r3, #24]
 80022e8:	005a      	lsls	r2, r3, #1
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	430a      	orrs	r2, r1
 80022f0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d01b      	beq.n	8002334 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	685a      	ldr	r2, [r3, #4]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800230a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800231a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6859      	ldr	r1, [r3, #4]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002326:	3b01      	subs	r3, #1
 8002328:	035a      	lsls	r2, r3, #13
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	430a      	orrs	r2, r1
 8002330:	605a      	str	r2, [r3, #4]
 8002332:	e007      	b.n	8002344 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	685a      	ldr	r2, [r3, #4]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002342:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002352:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	69db      	ldr	r3, [r3, #28]
 800235e:	3b01      	subs	r3, #1
 8002360:	051a      	lsls	r2, r3, #20
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	430a      	orrs	r2, r1
 8002368:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002378:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6899      	ldr	r1, [r3, #8]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002386:	025a      	lsls	r2, r3, #9
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	430a      	orrs	r2, r1
 800238e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	689a      	ldr	r2, [r3, #8]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800239e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	6899      	ldr	r1, [r3, #8]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	029a      	lsls	r2, r3, #10
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	430a      	orrs	r2, r1
 80023b2:	609a      	str	r2, [r3, #8]
}
 80023b4:	bf00      	nop
 80023b6:	3714      	adds	r7, #20
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	40012300 	.word	0x40012300
 80023c4:	0f000001 	.word	0x0f000001

080023c8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023d4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023da:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d13c      	bne.n	800245c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d12b      	bne.n	8002454 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002400:	2b00      	cmp	r3, #0
 8002402:	d127      	bne.n	8002454 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800240a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800240e:	2b00      	cmp	r3, #0
 8002410:	d006      	beq.n	8002420 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800241c:	2b00      	cmp	r3, #0
 800241e:	d119      	bne.n	8002454 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	685a      	ldr	r2, [r3, #4]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f022 0220 	bic.w	r2, r2, #32
 800242e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002434:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002440:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d105      	bne.n	8002454 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244c:	f043 0201 	orr.w	r2, r3, #1
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002454:	68f8      	ldr	r0, [r7, #12]
 8002456:	f7ff f857 	bl	8001508 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800245a:	e00e      	b.n	800247a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002460:	f003 0310 	and.w	r3, r3, #16
 8002464:	2b00      	cmp	r3, #0
 8002466:	d003      	beq.n	8002470 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002468:	68f8      	ldr	r0, [r7, #12]
 800246a:	f7ff fd75 	bl	8001f58 <HAL_ADC_ErrorCallback>
}
 800246e:	e004      	b.n	800247a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	4798      	blx	r3
}
 800247a:	bf00      	nop
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b084      	sub	sp, #16
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800248e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002490:	68f8      	ldr	r0, [r7, #12]
 8002492:	f7ff fd57 	bl	8001f44 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002496:	bf00      	nop
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b084      	sub	sp, #16
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024aa:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2240      	movs	r2, #64	@ 0x40
 80024b0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024b6:	f043 0204 	orr.w	r2, r3, #4
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f7ff fd4a 	bl	8001f58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024c4:	bf00      	nop
 80024c6:	3710      	adds	r7, #16
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002510 <__NVIC_SetPriorityGrouping+0x44>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024e2:	68ba      	ldr	r2, [r7, #8]
 80024e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024e8:	4013      	ands	r3, r2
 80024ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024fe:	4a04      	ldr	r2, [pc, #16]	@ (8002510 <__NVIC_SetPriorityGrouping+0x44>)
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	60d3      	str	r3, [r2, #12]
}
 8002504:	bf00      	nop
 8002506:	3714      	adds	r7, #20
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr
 8002510:	e000ed00 	.word	0xe000ed00

08002514 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002518:	4b04      	ldr	r3, [pc, #16]	@ (800252c <__NVIC_GetPriorityGrouping+0x18>)
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	0a1b      	lsrs	r3, r3, #8
 800251e:	f003 0307 	and.w	r3, r3, #7
}
 8002522:	4618      	mov	r0, r3
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	e000ed00 	.word	0xe000ed00

08002530 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	4603      	mov	r3, r0
 8002538:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800253a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253e:	2b00      	cmp	r3, #0
 8002540:	db0b      	blt.n	800255a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002542:	79fb      	ldrb	r3, [r7, #7]
 8002544:	f003 021f 	and.w	r2, r3, #31
 8002548:	4907      	ldr	r1, [pc, #28]	@ (8002568 <__NVIC_EnableIRQ+0x38>)
 800254a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254e:	095b      	lsrs	r3, r3, #5
 8002550:	2001      	movs	r0, #1
 8002552:	fa00 f202 	lsl.w	r2, r0, r2
 8002556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	e000e100 	.word	0xe000e100

0800256c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	4603      	mov	r3, r0
 8002574:	6039      	str	r1, [r7, #0]
 8002576:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257c:	2b00      	cmp	r3, #0
 800257e:	db0a      	blt.n	8002596 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	b2da      	uxtb	r2, r3
 8002584:	490c      	ldr	r1, [pc, #48]	@ (80025b8 <__NVIC_SetPriority+0x4c>)
 8002586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258a:	0112      	lsls	r2, r2, #4
 800258c:	b2d2      	uxtb	r2, r2
 800258e:	440b      	add	r3, r1
 8002590:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002594:	e00a      	b.n	80025ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	b2da      	uxtb	r2, r3
 800259a:	4908      	ldr	r1, [pc, #32]	@ (80025bc <__NVIC_SetPriority+0x50>)
 800259c:	79fb      	ldrb	r3, [r7, #7]
 800259e:	f003 030f 	and.w	r3, r3, #15
 80025a2:	3b04      	subs	r3, #4
 80025a4:	0112      	lsls	r2, r2, #4
 80025a6:	b2d2      	uxtb	r2, r2
 80025a8:	440b      	add	r3, r1
 80025aa:	761a      	strb	r2, [r3, #24]
}
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr
 80025b8:	e000e100 	.word	0xe000e100
 80025bc:	e000ed00 	.word	0xe000ed00

080025c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b089      	sub	sp, #36	@ 0x24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f003 0307 	and.w	r3, r3, #7
 80025d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	f1c3 0307 	rsb	r3, r3, #7
 80025da:	2b04      	cmp	r3, #4
 80025dc:	bf28      	it	cs
 80025de:	2304      	movcs	r3, #4
 80025e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	3304      	adds	r3, #4
 80025e6:	2b06      	cmp	r3, #6
 80025e8:	d902      	bls.n	80025f0 <NVIC_EncodePriority+0x30>
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	3b03      	subs	r3, #3
 80025ee:	e000      	b.n	80025f2 <NVIC_EncodePriority+0x32>
 80025f0:	2300      	movs	r3, #0
 80025f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f4:	f04f 32ff 	mov.w	r2, #4294967295
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	43da      	mvns	r2, r3
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	401a      	ands	r2, r3
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002608:	f04f 31ff 	mov.w	r1, #4294967295
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	fa01 f303 	lsl.w	r3, r1, r3
 8002612:	43d9      	mvns	r1, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002618:	4313      	orrs	r3, r2
         );
}
 800261a:	4618      	mov	r0, r3
 800261c:	3724      	adds	r7, #36	@ 0x24
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
	...

08002628 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	3b01      	subs	r3, #1
 8002634:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002638:	d301      	bcc.n	800263e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800263a:	2301      	movs	r3, #1
 800263c:	e00f      	b.n	800265e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800263e:	4a0a      	ldr	r2, [pc, #40]	@ (8002668 <SysTick_Config+0x40>)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	3b01      	subs	r3, #1
 8002644:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002646:	210f      	movs	r1, #15
 8002648:	f04f 30ff 	mov.w	r0, #4294967295
 800264c:	f7ff ff8e 	bl	800256c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002650:	4b05      	ldr	r3, [pc, #20]	@ (8002668 <SysTick_Config+0x40>)
 8002652:	2200      	movs	r2, #0
 8002654:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002656:	4b04      	ldr	r3, [pc, #16]	@ (8002668 <SysTick_Config+0x40>)
 8002658:	2207      	movs	r2, #7
 800265a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	e000e010 	.word	0xe000e010

0800266c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f7ff ff29 	bl	80024cc <__NVIC_SetPriorityGrouping>
}
 800267a:	bf00      	nop
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002682:	b580      	push	{r7, lr}
 8002684:	b086      	sub	sp, #24
 8002686:	af00      	add	r7, sp, #0
 8002688:	4603      	mov	r3, r0
 800268a:	60b9      	str	r1, [r7, #8]
 800268c:	607a      	str	r2, [r7, #4]
 800268e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002690:	2300      	movs	r3, #0
 8002692:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002694:	f7ff ff3e 	bl	8002514 <__NVIC_GetPriorityGrouping>
 8002698:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	68b9      	ldr	r1, [r7, #8]
 800269e:	6978      	ldr	r0, [r7, #20]
 80026a0:	f7ff ff8e 	bl	80025c0 <NVIC_EncodePriority>
 80026a4:	4602      	mov	r2, r0
 80026a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026aa:	4611      	mov	r1, r2
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7ff ff5d 	bl	800256c <__NVIC_SetPriority>
}
 80026b2:	bf00      	nop
 80026b4:	3718      	adds	r7, #24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b082      	sub	sp, #8
 80026be:	af00      	add	r7, sp, #0
 80026c0:	4603      	mov	r3, r0
 80026c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7ff ff31 	bl	8002530 <__NVIC_EnableIRQ>
}
 80026ce:	bf00      	nop
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b082      	sub	sp, #8
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f7ff ffa2 	bl	8002628 <SysTick_Config>
 80026e4:	4603      	mov	r3, r0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
	...

080026f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026f8:	2300      	movs	r3, #0
 80026fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80026fc:	f7ff fac2 	bl	8001c84 <HAL_GetTick>
 8002700:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d101      	bne.n	800270c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e099      	b.n	8002840 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2202      	movs	r2, #2
 8002710:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f022 0201 	bic.w	r2, r2, #1
 800272a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800272c:	e00f      	b.n	800274e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800272e:	f7ff faa9 	bl	8001c84 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b05      	cmp	r3, #5
 800273a:	d908      	bls.n	800274e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2220      	movs	r2, #32
 8002740:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2203      	movs	r2, #3
 8002746:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e078      	b.n	8002840 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1e8      	bne.n	800272e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002764:	697a      	ldr	r2, [r7, #20]
 8002766:	4b38      	ldr	r3, [pc, #224]	@ (8002848 <HAL_DMA_Init+0x158>)
 8002768:	4013      	ands	r3, r2
 800276a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800277a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	691b      	ldr	r3, [r3, #16]
 8002780:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002786:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002792:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	4313      	orrs	r3, r2
 800279e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a4:	2b04      	cmp	r3, #4
 80027a6:	d107      	bne.n	80027b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b0:	4313      	orrs	r3, r2
 80027b2:	697a      	ldr	r2, [r7, #20]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	f023 0307 	bic.w	r3, r3, #7
 80027ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d4:	697a      	ldr	r2, [r7, #20]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027de:	2b04      	cmp	r3, #4
 80027e0:	d117      	bne.n	8002812 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027e6:	697a      	ldr	r2, [r7, #20]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00e      	beq.n	8002812 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f000 fb01 	bl	8002dfc <DMA_CheckFifoParam>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d008      	beq.n	8002812 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2240      	movs	r2, #64	@ 0x40
 8002804:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2201      	movs	r2, #1
 800280a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800280e:	2301      	movs	r3, #1
 8002810:	e016      	b.n	8002840 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f000 fab8 	bl	8002d90 <DMA_CalcBaseAndBitshift>
 8002820:	4603      	mov	r3, r0
 8002822:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002828:	223f      	movs	r2, #63	@ 0x3f
 800282a:	409a      	lsls	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2201      	movs	r2, #1
 800283a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	3718      	adds	r7, #24
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	f010803f 	.word	0xf010803f

0800284c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b086      	sub	sp, #24
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
 8002858:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800285a:	2300      	movs	r3, #0
 800285c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002862:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800286a:	2b01      	cmp	r3, #1
 800286c:	d101      	bne.n	8002872 <HAL_DMA_Start_IT+0x26>
 800286e:	2302      	movs	r3, #2
 8002870:	e040      	b.n	80028f4 <HAL_DMA_Start_IT+0xa8>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2201      	movs	r2, #1
 8002876:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b01      	cmp	r3, #1
 8002884:	d12f      	bne.n	80028e6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2202      	movs	r2, #2
 800288a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	68b9      	ldr	r1, [r7, #8]
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f000 fa4a 	bl	8002d34 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028a4:	223f      	movs	r2, #63	@ 0x3f
 80028a6:	409a      	lsls	r2, r3
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f042 0216 	orr.w	r2, r2, #22
 80028ba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d007      	beq.n	80028d4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f042 0208 	orr.w	r2, r2, #8
 80028d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f042 0201 	orr.w	r2, r2, #1
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	e005      	b.n	80028f2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80028ee:	2302      	movs	r3, #2
 80028f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80028f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3718      	adds	r7, #24
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002908:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800290a:	f7ff f9bb 	bl	8001c84 <HAL_GetTick>
 800290e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002916:	b2db      	uxtb	r3, r3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d008      	beq.n	800292e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2280      	movs	r2, #128	@ 0x80
 8002920:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e052      	b.n	80029d4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 0216 	bic.w	r2, r2, #22
 800293c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	695a      	ldr	r2, [r3, #20]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800294c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002952:	2b00      	cmp	r3, #0
 8002954:	d103      	bne.n	800295e <HAL_DMA_Abort+0x62>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800295a:	2b00      	cmp	r3, #0
 800295c:	d007      	beq.n	800296e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 0208 	bic.w	r2, r2, #8
 800296c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f022 0201 	bic.w	r2, r2, #1
 800297c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800297e:	e013      	b.n	80029a8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002980:	f7ff f980 	bl	8001c84 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b05      	cmp	r3, #5
 800298c:	d90c      	bls.n	80029a8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2220      	movs	r2, #32
 8002992:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2203      	movs	r2, #3
 8002998:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e015      	b.n	80029d4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1e4      	bne.n	8002980 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ba:	223f      	movs	r2, #63	@ 0x3f
 80029bc:	409a      	lsls	r2, r3
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3710      	adds	r7, #16
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d004      	beq.n	80029fa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2280      	movs	r2, #128	@ 0x80
 80029f4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e00c      	b.n	8002a14 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2205      	movs	r2, #5
 80029fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 0201 	bic.w	r2, r2, #1
 8002a10:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a2c:	4b8e      	ldr	r3, [pc, #568]	@ (8002c68 <HAL_DMA_IRQHandler+0x248>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a8e      	ldr	r2, [pc, #568]	@ (8002c6c <HAL_DMA_IRQHandler+0x24c>)
 8002a32:	fba2 2303 	umull	r2, r3, r2, r3
 8002a36:	0a9b      	lsrs	r3, r3, #10
 8002a38:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a3e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a4a:	2208      	movs	r2, #8
 8002a4c:	409a      	lsls	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	4013      	ands	r3, r2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d01a      	beq.n	8002a8c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0304 	and.w	r3, r3, #4
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d013      	beq.n	8002a8c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f022 0204 	bic.w	r2, r2, #4
 8002a72:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a78:	2208      	movs	r2, #8
 8002a7a:	409a      	lsls	r2, r3
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a84:	f043 0201 	orr.w	r2, r3, #1
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a90:	2201      	movs	r2, #1
 8002a92:	409a      	lsls	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	4013      	ands	r3, r2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d012      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00b      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aae:	2201      	movs	r2, #1
 8002ab0:	409a      	lsls	r2, r3
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aba:	f043 0202 	orr.w	r2, r3, #2
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ac6:	2204      	movs	r2, #4
 8002ac8:	409a      	lsls	r2, r3
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	4013      	ands	r3, r2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d012      	beq.n	8002af8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0302 	and.w	r3, r3, #2
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d00b      	beq.n	8002af8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ae4:	2204      	movs	r2, #4
 8002ae6:	409a      	lsls	r2, r3
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002af0:	f043 0204 	orr.w	r2, r3, #4
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002afc:	2210      	movs	r2, #16
 8002afe:	409a      	lsls	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	4013      	ands	r3, r2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d043      	beq.n	8002b90 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0308 	and.w	r3, r3, #8
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d03c      	beq.n	8002b90 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b1a:	2210      	movs	r2, #16
 8002b1c:	409a      	lsls	r2, r3
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d018      	beq.n	8002b62 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d108      	bne.n	8002b50 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d024      	beq.n	8002b90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	4798      	blx	r3
 8002b4e:	e01f      	b.n	8002b90 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d01b      	beq.n	8002b90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	4798      	blx	r3
 8002b60:	e016      	b.n	8002b90 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d107      	bne.n	8002b80 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 0208 	bic.w	r2, r2, #8
 8002b7e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d003      	beq.n	8002b90 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b94:	2220      	movs	r2, #32
 8002b96:	409a      	lsls	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 808f 	beq.w	8002cc0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0310 	and.w	r3, r3, #16
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f000 8087 	beq.w	8002cc0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bb6:	2220      	movs	r2, #32
 8002bb8:	409a      	lsls	r2, r3
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b05      	cmp	r3, #5
 8002bc8:	d136      	bne.n	8002c38 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f022 0216 	bic.w	r2, r2, #22
 8002bd8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	695a      	ldr	r2, [r3, #20]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002be8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d103      	bne.n	8002bfa <HAL_DMA_IRQHandler+0x1da>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d007      	beq.n	8002c0a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 0208 	bic.w	r2, r2, #8
 8002c08:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c0e:	223f      	movs	r2, #63	@ 0x3f
 8002c10:	409a      	lsls	r2, r3
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d07e      	beq.n	8002d2c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	4798      	blx	r3
        }
        return;
 8002c36:	e079      	b.n	8002d2c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d01d      	beq.n	8002c82 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d10d      	bne.n	8002c70 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d031      	beq.n	8002cc0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	4798      	blx	r3
 8002c64:	e02c      	b.n	8002cc0 <HAL_DMA_IRQHandler+0x2a0>
 8002c66:	bf00      	nop
 8002c68:	20000004 	.word	0x20000004
 8002c6c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d023      	beq.n	8002cc0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	4798      	blx	r3
 8002c80:	e01e      	b.n	8002cc0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d10f      	bne.n	8002cb0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f022 0210 	bic.w	r2, r2, #16
 8002c9e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d003      	beq.n	8002cc0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d032      	beq.n	8002d2e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d022      	beq.n	8002d1a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2205      	movs	r2, #5
 8002cd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f022 0201 	bic.w	r2, r2, #1
 8002cea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	3301      	adds	r3, #1
 8002cf0:	60bb      	str	r3, [r7, #8]
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d307      	bcc.n	8002d08 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1f2      	bne.n	8002cec <HAL_DMA_IRQHandler+0x2cc>
 8002d06:	e000      	b.n	8002d0a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002d08:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d005      	beq.n	8002d2e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	4798      	blx	r3
 8002d2a:	e000      	b.n	8002d2e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002d2c:	bf00      	nop
    }
  }
}
 8002d2e:	3718      	adds	r7, #24
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
 8002d40:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002d50:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	2b40      	cmp	r3, #64	@ 0x40
 8002d60:	d108      	bne.n	8002d74 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68ba      	ldr	r2, [r7, #8]
 8002d70:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002d72:	e007      	b.n	8002d84 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68ba      	ldr	r2, [r7, #8]
 8002d7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	60da      	str	r2, [r3, #12]
}
 8002d84:	bf00      	nop
 8002d86:	3714      	adds	r7, #20
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	3b10      	subs	r3, #16
 8002da0:	4a14      	ldr	r2, [pc, #80]	@ (8002df4 <DMA_CalcBaseAndBitshift+0x64>)
 8002da2:	fba2 2303 	umull	r2, r3, r2, r3
 8002da6:	091b      	lsrs	r3, r3, #4
 8002da8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002daa:	4a13      	ldr	r2, [pc, #76]	@ (8002df8 <DMA_CalcBaseAndBitshift+0x68>)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	4413      	add	r3, r2
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	461a      	mov	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2b03      	cmp	r3, #3
 8002dbc:	d909      	bls.n	8002dd2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002dc6:	f023 0303 	bic.w	r3, r3, #3
 8002dca:	1d1a      	adds	r2, r3, #4
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	659a      	str	r2, [r3, #88]	@ 0x58
 8002dd0:	e007      	b.n	8002de2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002dda:	f023 0303 	bic.w	r3, r3, #3
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3714      	adds	r7, #20
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	aaaaaaab 	.word	0xaaaaaaab
 8002df8:	08007590 	.word	0x08007590

08002dfc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e04:	2300      	movs	r3, #0
 8002e06:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e0c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d11f      	bne.n	8002e56 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	2b03      	cmp	r3, #3
 8002e1a:	d856      	bhi.n	8002eca <DMA_CheckFifoParam+0xce>
 8002e1c:	a201      	add	r2, pc, #4	@ (adr r2, 8002e24 <DMA_CheckFifoParam+0x28>)
 8002e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e22:	bf00      	nop
 8002e24:	08002e35 	.word	0x08002e35
 8002e28:	08002e47 	.word	0x08002e47
 8002e2c:	08002e35 	.word	0x08002e35
 8002e30:	08002ecb 	.word	0x08002ecb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e38:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d046      	beq.n	8002ece <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e44:	e043      	b.n	8002ece <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e4a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002e4e:	d140      	bne.n	8002ed2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e54:	e03d      	b.n	8002ed2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e5e:	d121      	bne.n	8002ea4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	2b03      	cmp	r3, #3
 8002e64:	d837      	bhi.n	8002ed6 <DMA_CheckFifoParam+0xda>
 8002e66:	a201      	add	r2, pc, #4	@ (adr r2, 8002e6c <DMA_CheckFifoParam+0x70>)
 8002e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e6c:	08002e7d 	.word	0x08002e7d
 8002e70:	08002e83 	.word	0x08002e83
 8002e74:	08002e7d 	.word	0x08002e7d
 8002e78:	08002e95 	.word	0x08002e95
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e80:	e030      	b.n	8002ee4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e86:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d025      	beq.n	8002eda <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e92:	e022      	b.n	8002eda <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e98:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002e9c:	d11f      	bne.n	8002ede <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ea2:	e01c      	b.n	8002ede <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d903      	bls.n	8002eb2 <DMA_CheckFifoParam+0xb6>
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	2b03      	cmp	r3, #3
 8002eae:	d003      	beq.n	8002eb8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002eb0:	e018      	b.n	8002ee4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	73fb      	strb	r3, [r7, #15]
      break;
 8002eb6:	e015      	b.n	8002ee4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ebc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00e      	beq.n	8002ee2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ec8:	e00b      	b.n	8002ee2 <DMA_CheckFifoParam+0xe6>
      break;
 8002eca:	bf00      	nop
 8002ecc:	e00a      	b.n	8002ee4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ece:	bf00      	nop
 8002ed0:	e008      	b.n	8002ee4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ed2:	bf00      	nop
 8002ed4:	e006      	b.n	8002ee4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ed6:	bf00      	nop
 8002ed8:	e004      	b.n	8002ee4 <DMA_CheckFifoParam+0xe8>
      break;
 8002eda:	bf00      	nop
 8002edc:	e002      	b.n	8002ee4 <DMA_CheckFifoParam+0xe8>
      break;   
 8002ede:	bf00      	nop
 8002ee0:	e000      	b.n	8002ee4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ee2:	bf00      	nop
    }
  } 
  
  return status; 
 8002ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3714      	adds	r7, #20
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop

08002ef4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b089      	sub	sp, #36	@ 0x24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002efe:	2300      	movs	r3, #0
 8002f00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f02:	2300      	movs	r3, #0
 8002f04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f06:	2300      	movs	r3, #0
 8002f08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	61fb      	str	r3, [r7, #28]
 8002f0e:	e165      	b.n	80031dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f10:	2201      	movs	r2, #1
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	fa02 f303 	lsl.w	r3, r2, r3
 8002f18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	697a      	ldr	r2, [r7, #20]
 8002f20:	4013      	ands	r3, r2
 8002f22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	f040 8154 	bne.w	80031d6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f003 0303 	and.w	r3, r3, #3
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d005      	beq.n	8002f46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d130      	bne.n	8002fa8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	2203      	movs	r2, #3
 8002f52:	fa02 f303 	lsl.w	r3, r2, r3
 8002f56:	43db      	mvns	r3, r3
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	68da      	ldr	r2, [r3, #12]
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	69ba      	ldr	r2, [r7, #24]
 8002f74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	43db      	mvns	r3, r3
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	091b      	lsrs	r3, r3, #4
 8002f92:	f003 0201 	and.w	r2, r3, #1
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f003 0303 	and.w	r3, r3, #3
 8002fb0:	2b03      	cmp	r3, #3
 8002fb2:	d017      	beq.n	8002fe4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	2203      	movs	r2, #3
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	43db      	mvns	r3, r3
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	689a      	ldr	r2, [r3, #8]
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f003 0303 	and.w	r3, r3, #3
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d123      	bne.n	8003038 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	08da      	lsrs	r2, r3, #3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	3208      	adds	r2, #8
 8002ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	f003 0307 	and.w	r3, r3, #7
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	220f      	movs	r2, #15
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	43db      	mvns	r3, r3
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	4013      	ands	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	691a      	ldr	r2, [r3, #16]
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	f003 0307 	and.w	r3, r3, #7
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	4313      	orrs	r3, r2
 8003028:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	08da      	lsrs	r2, r3, #3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	3208      	adds	r2, #8
 8003032:	69b9      	ldr	r1, [r7, #24]
 8003034:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	2203      	movs	r2, #3
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	43db      	mvns	r3, r3
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	4013      	ands	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f003 0203 	and.w	r2, r3, #3
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	4313      	orrs	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003074:	2b00      	cmp	r3, #0
 8003076:	f000 80ae 	beq.w	80031d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800307a:	2300      	movs	r3, #0
 800307c:	60fb      	str	r3, [r7, #12]
 800307e:	4b5d      	ldr	r3, [pc, #372]	@ (80031f4 <HAL_GPIO_Init+0x300>)
 8003080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003082:	4a5c      	ldr	r2, [pc, #368]	@ (80031f4 <HAL_GPIO_Init+0x300>)
 8003084:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003088:	6453      	str	r3, [r2, #68]	@ 0x44
 800308a:	4b5a      	ldr	r3, [pc, #360]	@ (80031f4 <HAL_GPIO_Init+0x300>)
 800308c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800308e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003092:	60fb      	str	r3, [r7, #12]
 8003094:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003096:	4a58      	ldr	r2, [pc, #352]	@ (80031f8 <HAL_GPIO_Init+0x304>)
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	089b      	lsrs	r3, r3, #2
 800309c:	3302      	adds	r3, #2
 800309e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	f003 0303 	and.w	r3, r3, #3
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	220f      	movs	r2, #15
 80030ae:	fa02 f303 	lsl.w	r3, r2, r3
 80030b2:	43db      	mvns	r3, r3
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	4013      	ands	r3, r2
 80030b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a4f      	ldr	r2, [pc, #316]	@ (80031fc <HAL_GPIO_Init+0x308>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d025      	beq.n	800310e <HAL_GPIO_Init+0x21a>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a4e      	ldr	r2, [pc, #312]	@ (8003200 <HAL_GPIO_Init+0x30c>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d01f      	beq.n	800310a <HAL_GPIO_Init+0x216>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a4d      	ldr	r2, [pc, #308]	@ (8003204 <HAL_GPIO_Init+0x310>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d019      	beq.n	8003106 <HAL_GPIO_Init+0x212>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a4c      	ldr	r2, [pc, #304]	@ (8003208 <HAL_GPIO_Init+0x314>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d013      	beq.n	8003102 <HAL_GPIO_Init+0x20e>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a4b      	ldr	r2, [pc, #300]	@ (800320c <HAL_GPIO_Init+0x318>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d00d      	beq.n	80030fe <HAL_GPIO_Init+0x20a>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a4a      	ldr	r2, [pc, #296]	@ (8003210 <HAL_GPIO_Init+0x31c>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d007      	beq.n	80030fa <HAL_GPIO_Init+0x206>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a49      	ldr	r2, [pc, #292]	@ (8003214 <HAL_GPIO_Init+0x320>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d101      	bne.n	80030f6 <HAL_GPIO_Init+0x202>
 80030f2:	2306      	movs	r3, #6
 80030f4:	e00c      	b.n	8003110 <HAL_GPIO_Init+0x21c>
 80030f6:	2307      	movs	r3, #7
 80030f8:	e00a      	b.n	8003110 <HAL_GPIO_Init+0x21c>
 80030fa:	2305      	movs	r3, #5
 80030fc:	e008      	b.n	8003110 <HAL_GPIO_Init+0x21c>
 80030fe:	2304      	movs	r3, #4
 8003100:	e006      	b.n	8003110 <HAL_GPIO_Init+0x21c>
 8003102:	2303      	movs	r3, #3
 8003104:	e004      	b.n	8003110 <HAL_GPIO_Init+0x21c>
 8003106:	2302      	movs	r3, #2
 8003108:	e002      	b.n	8003110 <HAL_GPIO_Init+0x21c>
 800310a:	2301      	movs	r3, #1
 800310c:	e000      	b.n	8003110 <HAL_GPIO_Init+0x21c>
 800310e:	2300      	movs	r3, #0
 8003110:	69fa      	ldr	r2, [r7, #28]
 8003112:	f002 0203 	and.w	r2, r2, #3
 8003116:	0092      	lsls	r2, r2, #2
 8003118:	4093      	lsls	r3, r2
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	4313      	orrs	r3, r2
 800311e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003120:	4935      	ldr	r1, [pc, #212]	@ (80031f8 <HAL_GPIO_Init+0x304>)
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	089b      	lsrs	r3, r3, #2
 8003126:	3302      	adds	r3, #2
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800312e:	4b3a      	ldr	r3, [pc, #232]	@ (8003218 <HAL_GPIO_Init+0x324>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	43db      	mvns	r3, r3
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	4013      	ands	r3, r2
 800313c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d003      	beq.n	8003152 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	4313      	orrs	r3, r2
 8003150:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003152:	4a31      	ldr	r2, [pc, #196]	@ (8003218 <HAL_GPIO_Init+0x324>)
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003158:	4b2f      	ldr	r3, [pc, #188]	@ (8003218 <HAL_GPIO_Init+0x324>)
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	43db      	mvns	r3, r3
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	4013      	ands	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d003      	beq.n	800317c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	4313      	orrs	r3, r2
 800317a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800317c:	4a26      	ldr	r2, [pc, #152]	@ (8003218 <HAL_GPIO_Init+0x324>)
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003182:	4b25      	ldr	r3, [pc, #148]	@ (8003218 <HAL_GPIO_Init+0x324>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	43db      	mvns	r3, r3
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	4013      	ands	r3, r2
 8003190:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d003      	beq.n	80031a6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031a6:	4a1c      	ldr	r2, [pc, #112]	@ (8003218 <HAL_GPIO_Init+0x324>)
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031ac:	4b1a      	ldr	r3, [pc, #104]	@ (8003218 <HAL_GPIO_Init+0x324>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	43db      	mvns	r3, r3
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	4013      	ands	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d003      	beq.n	80031d0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031d0:	4a11      	ldr	r2, [pc, #68]	@ (8003218 <HAL_GPIO_Init+0x324>)
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	3301      	adds	r3, #1
 80031da:	61fb      	str	r3, [r7, #28]
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	2b0f      	cmp	r3, #15
 80031e0:	f67f ae96 	bls.w	8002f10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031e4:	bf00      	nop
 80031e6:	bf00      	nop
 80031e8:	3724      	adds	r7, #36	@ 0x24
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	40023800 	.word	0x40023800
 80031f8:	40013800 	.word	0x40013800
 80031fc:	40020000 	.word	0x40020000
 8003200:	40020400 	.word	0x40020400
 8003204:	40020800 	.word	0x40020800
 8003208:	40020c00 	.word	0x40020c00
 800320c:	40021000 	.word	0x40021000
 8003210:	40021400 	.word	0x40021400
 8003214:	40021800 	.word	0x40021800
 8003218:	40013c00 	.word	0x40013c00

0800321c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	460b      	mov	r3, r1
 8003226:	807b      	strh	r3, [r7, #2]
 8003228:	4613      	mov	r3, r2
 800322a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800322c:	787b      	ldrb	r3, [r7, #1]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d003      	beq.n	800323a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003232:	887a      	ldrh	r2, [r7, #2]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003238:	e003      	b.n	8003242 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800323a:	887b      	ldrh	r3, [r7, #2]
 800323c:	041a      	lsls	r2, r3, #16
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	619a      	str	r2, [r3, #24]
}
 8003242:	bf00      	nop
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
	...

08003250 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d101      	bne.n	8003264 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e0cc      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003264:	4b68      	ldr	r3, [pc, #416]	@ (8003408 <HAL_RCC_ClockConfig+0x1b8>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 030f 	and.w	r3, r3, #15
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	429a      	cmp	r2, r3
 8003270:	d90c      	bls.n	800328c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003272:	4b65      	ldr	r3, [pc, #404]	@ (8003408 <HAL_RCC_ClockConfig+0x1b8>)
 8003274:	683a      	ldr	r2, [r7, #0]
 8003276:	b2d2      	uxtb	r2, r2
 8003278:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800327a:	4b63      	ldr	r3, [pc, #396]	@ (8003408 <HAL_RCC_ClockConfig+0x1b8>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 030f 	and.w	r3, r3, #15
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	429a      	cmp	r2, r3
 8003286:	d001      	beq.n	800328c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e0b8      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d020      	beq.n	80032da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0304 	and.w	r3, r3, #4
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d005      	beq.n	80032b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032a4:	4b59      	ldr	r3, [pc, #356]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	4a58      	ldr	r2, [pc, #352]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80032aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80032ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0308 	and.w	r3, r3, #8
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d005      	beq.n	80032c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032bc:	4b53      	ldr	r3, [pc, #332]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	4a52      	ldr	r2, [pc, #328]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80032c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80032c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032c8:	4b50      	ldr	r3, [pc, #320]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	494d      	ldr	r1, [pc, #308]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d044      	beq.n	8003370 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d107      	bne.n	80032fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ee:	4b47      	ldr	r3, [pc, #284]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d119      	bne.n	800332e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e07f      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	2b02      	cmp	r3, #2
 8003304:	d003      	beq.n	800330e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800330a:	2b03      	cmp	r3, #3
 800330c:	d107      	bne.n	800331e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800330e:	4b3f      	ldr	r3, [pc, #252]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d109      	bne.n	800332e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e06f      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800331e:	4b3b      	ldr	r3, [pc, #236]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e067      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800332e:	4b37      	ldr	r3, [pc, #220]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f023 0203 	bic.w	r2, r3, #3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	4934      	ldr	r1, [pc, #208]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 800333c:	4313      	orrs	r3, r2
 800333e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003340:	f7fe fca0 	bl	8001c84 <HAL_GetTick>
 8003344:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003346:	e00a      	b.n	800335e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003348:	f7fe fc9c 	bl	8001c84 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003356:	4293      	cmp	r3, r2
 8003358:	d901      	bls.n	800335e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e04f      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800335e:	4b2b      	ldr	r3, [pc, #172]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f003 020c 	and.w	r2, r3, #12
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	429a      	cmp	r2, r3
 800336e:	d1eb      	bne.n	8003348 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003370:	4b25      	ldr	r3, [pc, #148]	@ (8003408 <HAL_RCC_ClockConfig+0x1b8>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 030f 	and.w	r3, r3, #15
 8003378:	683a      	ldr	r2, [r7, #0]
 800337a:	429a      	cmp	r2, r3
 800337c:	d20c      	bcs.n	8003398 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800337e:	4b22      	ldr	r3, [pc, #136]	@ (8003408 <HAL_RCC_ClockConfig+0x1b8>)
 8003380:	683a      	ldr	r2, [r7, #0]
 8003382:	b2d2      	uxtb	r2, r2
 8003384:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003386:	4b20      	ldr	r3, [pc, #128]	@ (8003408 <HAL_RCC_ClockConfig+0x1b8>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 030f 	and.w	r3, r3, #15
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	429a      	cmp	r2, r3
 8003392:	d001      	beq.n	8003398 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e032      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0304 	and.w	r3, r3, #4
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d008      	beq.n	80033b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033a4:	4b19      	ldr	r3, [pc, #100]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	4916      	ldr	r1, [pc, #88]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0308 	and.w	r3, r3, #8
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d009      	beq.n	80033d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033c2:	4b12      	ldr	r3, [pc, #72]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	490e      	ldr	r1, [pc, #56]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033d6:	f000 f855 	bl	8003484 <HAL_RCC_GetSysClockFreq>
 80033da:	4602      	mov	r2, r0
 80033dc:	4b0b      	ldr	r3, [pc, #44]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	091b      	lsrs	r3, r3, #4
 80033e2:	f003 030f 	and.w	r3, r3, #15
 80033e6:	490a      	ldr	r1, [pc, #40]	@ (8003410 <HAL_RCC_ClockConfig+0x1c0>)
 80033e8:	5ccb      	ldrb	r3, [r1, r3]
 80033ea:	fa22 f303 	lsr.w	r3, r2, r3
 80033ee:	4a09      	ldr	r2, [pc, #36]	@ (8003414 <HAL_RCC_ClockConfig+0x1c4>)
 80033f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80033f2:	4b09      	ldr	r3, [pc, #36]	@ (8003418 <HAL_RCC_ClockConfig+0x1c8>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7fe fc00 	bl	8001bfc <HAL_InitTick>

  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	40023c00 	.word	0x40023c00
 800340c:	40023800 	.word	0x40023800
 8003410:	08007578 	.word	0x08007578
 8003414:	20000004 	.word	0x20000004
 8003418:	20000008 	.word	0x20000008

0800341c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003420:	4b03      	ldr	r3, [pc, #12]	@ (8003430 <HAL_RCC_GetHCLKFreq+0x14>)
 8003422:	681b      	ldr	r3, [r3, #0]
}
 8003424:	4618      	mov	r0, r3
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	20000004 	.word	0x20000004

08003434 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003438:	f7ff fff0 	bl	800341c <HAL_RCC_GetHCLKFreq>
 800343c:	4602      	mov	r2, r0
 800343e:	4b05      	ldr	r3, [pc, #20]	@ (8003454 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	0a9b      	lsrs	r3, r3, #10
 8003444:	f003 0307 	and.w	r3, r3, #7
 8003448:	4903      	ldr	r1, [pc, #12]	@ (8003458 <HAL_RCC_GetPCLK1Freq+0x24>)
 800344a:	5ccb      	ldrb	r3, [r1, r3]
 800344c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003450:	4618      	mov	r0, r3
 8003452:	bd80      	pop	{r7, pc}
 8003454:	40023800 	.word	0x40023800
 8003458:	08007588 	.word	0x08007588

0800345c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003460:	f7ff ffdc 	bl	800341c <HAL_RCC_GetHCLKFreq>
 8003464:	4602      	mov	r2, r0
 8003466:	4b05      	ldr	r3, [pc, #20]	@ (800347c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	0b5b      	lsrs	r3, r3, #13
 800346c:	f003 0307 	and.w	r3, r3, #7
 8003470:	4903      	ldr	r1, [pc, #12]	@ (8003480 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003472:	5ccb      	ldrb	r3, [r1, r3]
 8003474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003478:	4618      	mov	r0, r3
 800347a:	bd80      	pop	{r7, pc}
 800347c:	40023800 	.word	0x40023800
 8003480:	08007588 	.word	0x08007588

08003484 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003484:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003488:	b0ae      	sub	sp, #184	@ 0xb8
 800348a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800348c:	2300      	movs	r3, #0
 800348e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003492:	2300      	movs	r3, #0
 8003494:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003498:	2300      	movs	r3, #0
 800349a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800349e:	2300      	movs	r3, #0
 80034a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80034a4:	2300      	movs	r3, #0
 80034a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034aa:	4bcb      	ldr	r3, [pc, #812]	@ (80037d8 <HAL_RCC_GetSysClockFreq+0x354>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f003 030c 	and.w	r3, r3, #12
 80034b2:	2b0c      	cmp	r3, #12
 80034b4:	f200 8206 	bhi.w	80038c4 <HAL_RCC_GetSysClockFreq+0x440>
 80034b8:	a201      	add	r2, pc, #4	@ (adr r2, 80034c0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80034ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034be:	bf00      	nop
 80034c0:	080034f5 	.word	0x080034f5
 80034c4:	080038c5 	.word	0x080038c5
 80034c8:	080038c5 	.word	0x080038c5
 80034cc:	080038c5 	.word	0x080038c5
 80034d0:	080034fd 	.word	0x080034fd
 80034d4:	080038c5 	.word	0x080038c5
 80034d8:	080038c5 	.word	0x080038c5
 80034dc:	080038c5 	.word	0x080038c5
 80034e0:	08003505 	.word	0x08003505
 80034e4:	080038c5 	.word	0x080038c5
 80034e8:	080038c5 	.word	0x080038c5
 80034ec:	080038c5 	.word	0x080038c5
 80034f0:	080036f5 	.word	0x080036f5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034f4:	4bb9      	ldr	r3, [pc, #740]	@ (80037dc <HAL_RCC_GetSysClockFreq+0x358>)
 80034f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80034fa:	e1e7      	b.n	80038cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034fc:	4bb8      	ldr	r3, [pc, #736]	@ (80037e0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80034fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003502:	e1e3      	b.n	80038cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003504:	4bb4      	ldr	r3, [pc, #720]	@ (80037d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800350c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003510:	4bb1      	ldr	r3, [pc, #708]	@ (80037d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d071      	beq.n	8003600 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800351c:	4bae      	ldr	r3, [pc, #696]	@ (80037d8 <HAL_RCC_GetSysClockFreq+0x354>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	099b      	lsrs	r3, r3, #6
 8003522:	2200      	movs	r2, #0
 8003524:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003528:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800352c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003530:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003534:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003538:	2300      	movs	r3, #0
 800353a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800353e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003542:	4622      	mov	r2, r4
 8003544:	462b      	mov	r3, r5
 8003546:	f04f 0000 	mov.w	r0, #0
 800354a:	f04f 0100 	mov.w	r1, #0
 800354e:	0159      	lsls	r1, r3, #5
 8003550:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003554:	0150      	lsls	r0, r2, #5
 8003556:	4602      	mov	r2, r0
 8003558:	460b      	mov	r3, r1
 800355a:	4621      	mov	r1, r4
 800355c:	1a51      	subs	r1, r2, r1
 800355e:	6439      	str	r1, [r7, #64]	@ 0x40
 8003560:	4629      	mov	r1, r5
 8003562:	eb63 0301 	sbc.w	r3, r3, r1
 8003566:	647b      	str	r3, [r7, #68]	@ 0x44
 8003568:	f04f 0200 	mov.w	r2, #0
 800356c:	f04f 0300 	mov.w	r3, #0
 8003570:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003574:	4649      	mov	r1, r9
 8003576:	018b      	lsls	r3, r1, #6
 8003578:	4641      	mov	r1, r8
 800357a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800357e:	4641      	mov	r1, r8
 8003580:	018a      	lsls	r2, r1, #6
 8003582:	4641      	mov	r1, r8
 8003584:	1a51      	subs	r1, r2, r1
 8003586:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003588:	4649      	mov	r1, r9
 800358a:	eb63 0301 	sbc.w	r3, r3, r1
 800358e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003590:	f04f 0200 	mov.w	r2, #0
 8003594:	f04f 0300 	mov.w	r3, #0
 8003598:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800359c:	4649      	mov	r1, r9
 800359e:	00cb      	lsls	r3, r1, #3
 80035a0:	4641      	mov	r1, r8
 80035a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035a6:	4641      	mov	r1, r8
 80035a8:	00ca      	lsls	r2, r1, #3
 80035aa:	4610      	mov	r0, r2
 80035ac:	4619      	mov	r1, r3
 80035ae:	4603      	mov	r3, r0
 80035b0:	4622      	mov	r2, r4
 80035b2:	189b      	adds	r3, r3, r2
 80035b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80035b6:	462b      	mov	r3, r5
 80035b8:	460a      	mov	r2, r1
 80035ba:	eb42 0303 	adc.w	r3, r2, r3
 80035be:	637b      	str	r3, [r7, #52]	@ 0x34
 80035c0:	f04f 0200 	mov.w	r2, #0
 80035c4:	f04f 0300 	mov.w	r3, #0
 80035c8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80035cc:	4629      	mov	r1, r5
 80035ce:	024b      	lsls	r3, r1, #9
 80035d0:	4621      	mov	r1, r4
 80035d2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80035d6:	4621      	mov	r1, r4
 80035d8:	024a      	lsls	r2, r1, #9
 80035da:	4610      	mov	r0, r2
 80035dc:	4619      	mov	r1, r3
 80035de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80035e2:	2200      	movs	r2, #0
 80035e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80035e8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80035ec:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80035f0:	f7fd fab0 	bl	8000b54 <__aeabi_uldivmod>
 80035f4:	4602      	mov	r2, r0
 80035f6:	460b      	mov	r3, r1
 80035f8:	4613      	mov	r3, r2
 80035fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80035fe:	e067      	b.n	80036d0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003600:	4b75      	ldr	r3, [pc, #468]	@ (80037d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	099b      	lsrs	r3, r3, #6
 8003606:	2200      	movs	r2, #0
 8003608:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800360c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003610:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003614:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003618:	67bb      	str	r3, [r7, #120]	@ 0x78
 800361a:	2300      	movs	r3, #0
 800361c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800361e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003622:	4622      	mov	r2, r4
 8003624:	462b      	mov	r3, r5
 8003626:	f04f 0000 	mov.w	r0, #0
 800362a:	f04f 0100 	mov.w	r1, #0
 800362e:	0159      	lsls	r1, r3, #5
 8003630:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003634:	0150      	lsls	r0, r2, #5
 8003636:	4602      	mov	r2, r0
 8003638:	460b      	mov	r3, r1
 800363a:	4621      	mov	r1, r4
 800363c:	1a51      	subs	r1, r2, r1
 800363e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003640:	4629      	mov	r1, r5
 8003642:	eb63 0301 	sbc.w	r3, r3, r1
 8003646:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003648:	f04f 0200 	mov.w	r2, #0
 800364c:	f04f 0300 	mov.w	r3, #0
 8003650:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003654:	4649      	mov	r1, r9
 8003656:	018b      	lsls	r3, r1, #6
 8003658:	4641      	mov	r1, r8
 800365a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800365e:	4641      	mov	r1, r8
 8003660:	018a      	lsls	r2, r1, #6
 8003662:	4641      	mov	r1, r8
 8003664:	ebb2 0a01 	subs.w	sl, r2, r1
 8003668:	4649      	mov	r1, r9
 800366a:	eb63 0b01 	sbc.w	fp, r3, r1
 800366e:	f04f 0200 	mov.w	r2, #0
 8003672:	f04f 0300 	mov.w	r3, #0
 8003676:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800367a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800367e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003682:	4692      	mov	sl, r2
 8003684:	469b      	mov	fp, r3
 8003686:	4623      	mov	r3, r4
 8003688:	eb1a 0303 	adds.w	r3, sl, r3
 800368c:	623b      	str	r3, [r7, #32]
 800368e:	462b      	mov	r3, r5
 8003690:	eb4b 0303 	adc.w	r3, fp, r3
 8003694:	627b      	str	r3, [r7, #36]	@ 0x24
 8003696:	f04f 0200 	mov.w	r2, #0
 800369a:	f04f 0300 	mov.w	r3, #0
 800369e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80036a2:	4629      	mov	r1, r5
 80036a4:	028b      	lsls	r3, r1, #10
 80036a6:	4621      	mov	r1, r4
 80036a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036ac:	4621      	mov	r1, r4
 80036ae:	028a      	lsls	r2, r1, #10
 80036b0:	4610      	mov	r0, r2
 80036b2:	4619      	mov	r1, r3
 80036b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80036b8:	2200      	movs	r2, #0
 80036ba:	673b      	str	r3, [r7, #112]	@ 0x70
 80036bc:	677a      	str	r2, [r7, #116]	@ 0x74
 80036be:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80036c2:	f7fd fa47 	bl	8000b54 <__aeabi_uldivmod>
 80036c6:	4602      	mov	r2, r0
 80036c8:	460b      	mov	r3, r1
 80036ca:	4613      	mov	r3, r2
 80036cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80036d0:	4b41      	ldr	r3, [pc, #260]	@ (80037d8 <HAL_RCC_GetSysClockFreq+0x354>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	0c1b      	lsrs	r3, r3, #16
 80036d6:	f003 0303 	and.w	r3, r3, #3
 80036da:	3301      	adds	r3, #1
 80036dc:	005b      	lsls	r3, r3, #1
 80036de:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80036e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80036e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80036ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80036f2:	e0eb      	b.n	80038cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036f4:	4b38      	ldr	r3, [pc, #224]	@ (80037d8 <HAL_RCC_GetSysClockFreq+0x354>)
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80036fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003700:	4b35      	ldr	r3, [pc, #212]	@ (80037d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d06b      	beq.n	80037e4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800370c:	4b32      	ldr	r3, [pc, #200]	@ (80037d8 <HAL_RCC_GetSysClockFreq+0x354>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	099b      	lsrs	r3, r3, #6
 8003712:	2200      	movs	r2, #0
 8003714:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003716:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003718:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800371a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800371e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003720:	2300      	movs	r3, #0
 8003722:	667b      	str	r3, [r7, #100]	@ 0x64
 8003724:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003728:	4622      	mov	r2, r4
 800372a:	462b      	mov	r3, r5
 800372c:	f04f 0000 	mov.w	r0, #0
 8003730:	f04f 0100 	mov.w	r1, #0
 8003734:	0159      	lsls	r1, r3, #5
 8003736:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800373a:	0150      	lsls	r0, r2, #5
 800373c:	4602      	mov	r2, r0
 800373e:	460b      	mov	r3, r1
 8003740:	4621      	mov	r1, r4
 8003742:	1a51      	subs	r1, r2, r1
 8003744:	61b9      	str	r1, [r7, #24]
 8003746:	4629      	mov	r1, r5
 8003748:	eb63 0301 	sbc.w	r3, r3, r1
 800374c:	61fb      	str	r3, [r7, #28]
 800374e:	f04f 0200 	mov.w	r2, #0
 8003752:	f04f 0300 	mov.w	r3, #0
 8003756:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800375a:	4659      	mov	r1, fp
 800375c:	018b      	lsls	r3, r1, #6
 800375e:	4651      	mov	r1, sl
 8003760:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003764:	4651      	mov	r1, sl
 8003766:	018a      	lsls	r2, r1, #6
 8003768:	4651      	mov	r1, sl
 800376a:	ebb2 0801 	subs.w	r8, r2, r1
 800376e:	4659      	mov	r1, fp
 8003770:	eb63 0901 	sbc.w	r9, r3, r1
 8003774:	f04f 0200 	mov.w	r2, #0
 8003778:	f04f 0300 	mov.w	r3, #0
 800377c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003780:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003784:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003788:	4690      	mov	r8, r2
 800378a:	4699      	mov	r9, r3
 800378c:	4623      	mov	r3, r4
 800378e:	eb18 0303 	adds.w	r3, r8, r3
 8003792:	613b      	str	r3, [r7, #16]
 8003794:	462b      	mov	r3, r5
 8003796:	eb49 0303 	adc.w	r3, r9, r3
 800379a:	617b      	str	r3, [r7, #20]
 800379c:	f04f 0200 	mov.w	r2, #0
 80037a0:	f04f 0300 	mov.w	r3, #0
 80037a4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80037a8:	4629      	mov	r1, r5
 80037aa:	024b      	lsls	r3, r1, #9
 80037ac:	4621      	mov	r1, r4
 80037ae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80037b2:	4621      	mov	r1, r4
 80037b4:	024a      	lsls	r2, r1, #9
 80037b6:	4610      	mov	r0, r2
 80037b8:	4619      	mov	r1, r3
 80037ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80037be:	2200      	movs	r2, #0
 80037c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80037c2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80037c4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80037c8:	f7fd f9c4 	bl	8000b54 <__aeabi_uldivmod>
 80037cc:	4602      	mov	r2, r0
 80037ce:	460b      	mov	r3, r1
 80037d0:	4613      	mov	r3, r2
 80037d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80037d6:	e065      	b.n	80038a4 <HAL_RCC_GetSysClockFreq+0x420>
 80037d8:	40023800 	.word	0x40023800
 80037dc:	00f42400 	.word	0x00f42400
 80037e0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037e4:	4b3d      	ldr	r3, [pc, #244]	@ (80038dc <HAL_RCC_GetSysClockFreq+0x458>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	099b      	lsrs	r3, r3, #6
 80037ea:	2200      	movs	r2, #0
 80037ec:	4618      	mov	r0, r3
 80037ee:	4611      	mov	r1, r2
 80037f0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80037f4:	653b      	str	r3, [r7, #80]	@ 0x50
 80037f6:	2300      	movs	r3, #0
 80037f8:	657b      	str	r3, [r7, #84]	@ 0x54
 80037fa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80037fe:	4642      	mov	r2, r8
 8003800:	464b      	mov	r3, r9
 8003802:	f04f 0000 	mov.w	r0, #0
 8003806:	f04f 0100 	mov.w	r1, #0
 800380a:	0159      	lsls	r1, r3, #5
 800380c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003810:	0150      	lsls	r0, r2, #5
 8003812:	4602      	mov	r2, r0
 8003814:	460b      	mov	r3, r1
 8003816:	4641      	mov	r1, r8
 8003818:	1a51      	subs	r1, r2, r1
 800381a:	60b9      	str	r1, [r7, #8]
 800381c:	4649      	mov	r1, r9
 800381e:	eb63 0301 	sbc.w	r3, r3, r1
 8003822:	60fb      	str	r3, [r7, #12]
 8003824:	f04f 0200 	mov.w	r2, #0
 8003828:	f04f 0300 	mov.w	r3, #0
 800382c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003830:	4659      	mov	r1, fp
 8003832:	018b      	lsls	r3, r1, #6
 8003834:	4651      	mov	r1, sl
 8003836:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800383a:	4651      	mov	r1, sl
 800383c:	018a      	lsls	r2, r1, #6
 800383e:	4651      	mov	r1, sl
 8003840:	1a54      	subs	r4, r2, r1
 8003842:	4659      	mov	r1, fp
 8003844:	eb63 0501 	sbc.w	r5, r3, r1
 8003848:	f04f 0200 	mov.w	r2, #0
 800384c:	f04f 0300 	mov.w	r3, #0
 8003850:	00eb      	lsls	r3, r5, #3
 8003852:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003856:	00e2      	lsls	r2, r4, #3
 8003858:	4614      	mov	r4, r2
 800385a:	461d      	mov	r5, r3
 800385c:	4643      	mov	r3, r8
 800385e:	18e3      	adds	r3, r4, r3
 8003860:	603b      	str	r3, [r7, #0]
 8003862:	464b      	mov	r3, r9
 8003864:	eb45 0303 	adc.w	r3, r5, r3
 8003868:	607b      	str	r3, [r7, #4]
 800386a:	f04f 0200 	mov.w	r2, #0
 800386e:	f04f 0300 	mov.w	r3, #0
 8003872:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003876:	4629      	mov	r1, r5
 8003878:	028b      	lsls	r3, r1, #10
 800387a:	4621      	mov	r1, r4
 800387c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003880:	4621      	mov	r1, r4
 8003882:	028a      	lsls	r2, r1, #10
 8003884:	4610      	mov	r0, r2
 8003886:	4619      	mov	r1, r3
 8003888:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800388c:	2200      	movs	r2, #0
 800388e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003890:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003892:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003896:	f7fd f95d 	bl	8000b54 <__aeabi_uldivmod>
 800389a:	4602      	mov	r2, r0
 800389c:	460b      	mov	r3, r1
 800389e:	4613      	mov	r3, r2
 80038a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80038a4:	4b0d      	ldr	r3, [pc, #52]	@ (80038dc <HAL_RCC_GetSysClockFreq+0x458>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	0f1b      	lsrs	r3, r3, #28
 80038aa:	f003 0307 	and.w	r3, r3, #7
 80038ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80038b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80038b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80038ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80038be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80038c2:	e003      	b.n	80038cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038c4:	4b06      	ldr	r3, [pc, #24]	@ (80038e0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80038c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80038ca:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	37b8      	adds	r7, #184	@ 0xb8
 80038d4:	46bd      	mov	sp, r7
 80038d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038da:	bf00      	nop
 80038dc:	40023800 	.word	0x40023800
 80038e0:	00f42400 	.word	0x00f42400

080038e4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e28d      	b.n	8003e12 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f000 8083 	beq.w	8003a0a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003904:	4b94      	ldr	r3, [pc, #592]	@ (8003b58 <HAL_RCC_OscConfig+0x274>)
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f003 030c 	and.w	r3, r3, #12
 800390c:	2b04      	cmp	r3, #4
 800390e:	d019      	beq.n	8003944 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003910:	4b91      	ldr	r3, [pc, #580]	@ (8003b58 <HAL_RCC_OscConfig+0x274>)
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f003 030c 	and.w	r3, r3, #12
        || \
 8003918:	2b08      	cmp	r3, #8
 800391a:	d106      	bne.n	800392a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800391c:	4b8e      	ldr	r3, [pc, #568]	@ (8003b58 <HAL_RCC_OscConfig+0x274>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003924:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003928:	d00c      	beq.n	8003944 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800392a:	4b8b      	ldr	r3, [pc, #556]	@ (8003b58 <HAL_RCC_OscConfig+0x274>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003932:	2b0c      	cmp	r3, #12
 8003934:	d112      	bne.n	800395c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003936:	4b88      	ldr	r3, [pc, #544]	@ (8003b58 <HAL_RCC_OscConfig+0x274>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800393e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003942:	d10b      	bne.n	800395c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003944:	4b84      	ldr	r3, [pc, #528]	@ (8003b58 <HAL_RCC_OscConfig+0x274>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d05b      	beq.n	8003a08 <HAL_RCC_OscConfig+0x124>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d157      	bne.n	8003a08 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e25a      	b.n	8003e12 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003964:	d106      	bne.n	8003974 <HAL_RCC_OscConfig+0x90>
 8003966:	4b7c      	ldr	r3, [pc, #496]	@ (8003b58 <HAL_RCC_OscConfig+0x274>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a7b      	ldr	r2, [pc, #492]	@ (8003b58 <HAL_RCC_OscConfig+0x274>)
 800396c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003970:	6013      	str	r3, [r2, #0]
 8003972:	e01d      	b.n	80039b0 <HAL_RCC_OscConfig+0xcc>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800397c:	d10c      	bne.n	8003998 <HAL_RCC_OscConfig+0xb4>
 800397e:	4b76      	ldr	r3, [pc, #472]	@ (8003b58 <HAL_RCC_OscConfig+0x274>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a75      	ldr	r2, [pc, #468]	@ (8003b58 <HAL_RCC_OscConfig+0x274>)
 8003984:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003988:	6013      	str	r3, [r2, #0]
 800398a:	4b73      	ldr	r3, [pc, #460]	@ (8003b58 <HAL_RCC_OscConfig+0x274>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a72      	ldr	r2, [pc, #456]	@ (8003b58 <HAL_RCC_OscConfig+0x274>)
 8003990:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003994:	6013      	str	r3, [r2, #0]
 8003996:	e00b      	b.n	80039b0 <HAL_RCC_OscConfig+0xcc>
 8003998:	4b6f      	ldr	r3, [pc, #444]	@ (8003b58 <HAL_RCC_OscConfig+0x274>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a6e      	ldr	r2, [pc, #440]	@ (8003b58 <HAL_RCC_OscConfig+0x274>)
 800399e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039a2:	6013      	str	r3, [r2, #0]
 80039a4:	4b6c      	ldr	r3, [pc, #432]	@ (8003b58 <HAL_RCC_OscConfig+0x274>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a6b      	ldr	r2, [pc, #428]	@ (8003b58 <HAL_RCC_OscConfig+0x274>)
 80039aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d013      	beq.n	80039e0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b8:	f7fe f964 	bl	8001c84 <HAL_GetTick>
 80039bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039be:	e008      	b.n	80039d2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039c0:	f7fe f960 	bl	8001c84 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b64      	cmp	r3, #100	@ 0x64
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e21f      	b.n	8003e12 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039d2:	4b61      	ldr	r3, [pc, #388]	@ (8003b58 <HAL_RCC_OscConfig+0x274>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d0f0      	beq.n	80039c0 <HAL_RCC_OscConfig+0xdc>
 80039de:	e014      	b.n	8003a0a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e0:	f7fe f950 	bl	8001c84 <HAL_GetTick>
 80039e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039e6:	e008      	b.n	80039fa <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039e8:	f7fe f94c 	bl	8001c84 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b64      	cmp	r3, #100	@ 0x64
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e20b      	b.n	8003e12 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039fa:	4b57      	ldr	r3, [pc, #348]	@ (8003b58 <HAL_RCC_OscConfig+0x274>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1f0      	bne.n	80039e8 <HAL_RCC_OscConfig+0x104>
 8003a06:	e000      	b.n	8003a0a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d06f      	beq.n	8003af6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003a16:	4b50      	ldr	r3, [pc, #320]	@ (8003b58 <HAL_RCC_OscConfig+0x274>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 030c 	and.w	r3, r3, #12
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d017      	beq.n	8003a52 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003a22:	4b4d      	ldr	r3, [pc, #308]	@ (8003b58 <HAL_RCC_OscConfig+0x274>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f003 030c 	and.w	r3, r3, #12
        || \
 8003a2a:	2b08      	cmp	r3, #8
 8003a2c:	d105      	bne.n	8003a3a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003a2e:	4b4a      	ldr	r3, [pc, #296]	@ (8003b58 <HAL_RCC_OscConfig+0x274>)
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00b      	beq.n	8003a52 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a3a:	4b47      	ldr	r3, [pc, #284]	@ (8003b58 <HAL_RCC_OscConfig+0x274>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003a42:	2b0c      	cmp	r3, #12
 8003a44:	d11c      	bne.n	8003a80 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a46:	4b44      	ldr	r3, [pc, #272]	@ (8003b58 <HAL_RCC_OscConfig+0x274>)
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d116      	bne.n	8003a80 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a52:	4b41      	ldr	r3, [pc, #260]	@ (8003b58 <HAL_RCC_OscConfig+0x274>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d005      	beq.n	8003a6a <HAL_RCC_OscConfig+0x186>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d001      	beq.n	8003a6a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e1d3      	b.n	8003e12 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a6a:	4b3b      	ldr	r3, [pc, #236]	@ (8003b58 <HAL_RCC_OscConfig+0x274>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	00db      	lsls	r3, r3, #3
 8003a78:	4937      	ldr	r1, [pc, #220]	@ (8003b58 <HAL_RCC_OscConfig+0x274>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a7e:	e03a      	b.n	8003af6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d020      	beq.n	8003aca <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a88:	4b34      	ldr	r3, [pc, #208]	@ (8003b5c <HAL_RCC_OscConfig+0x278>)
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a8e:	f7fe f8f9 	bl	8001c84 <HAL_GetTick>
 8003a92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a94:	e008      	b.n	8003aa8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a96:	f7fe f8f5 	bl	8001c84 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d901      	bls.n	8003aa8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e1b4      	b.n	8003e12 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aa8:	4b2b      	ldr	r3, [pc, #172]	@ (8003b58 <HAL_RCC_OscConfig+0x274>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d0f0      	beq.n	8003a96 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ab4:	4b28      	ldr	r3, [pc, #160]	@ (8003b58 <HAL_RCC_OscConfig+0x274>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	00db      	lsls	r3, r3, #3
 8003ac2:	4925      	ldr	r1, [pc, #148]	@ (8003b58 <HAL_RCC_OscConfig+0x274>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	600b      	str	r3, [r1, #0]
 8003ac8:	e015      	b.n	8003af6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aca:	4b24      	ldr	r3, [pc, #144]	@ (8003b5c <HAL_RCC_OscConfig+0x278>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad0:	f7fe f8d8 	bl	8001c84 <HAL_GetTick>
 8003ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ad8:	f7fe f8d4 	bl	8001c84 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e193      	b.n	8003e12 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aea:	4b1b      	ldr	r3, [pc, #108]	@ (8003b58 <HAL_RCC_OscConfig+0x274>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1f0      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0308 	and.w	r3, r3, #8
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d036      	beq.n	8003b70 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d016      	beq.n	8003b38 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b0a:	4b15      	ldr	r3, [pc, #84]	@ (8003b60 <HAL_RCC_OscConfig+0x27c>)
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b10:	f7fe f8b8 	bl	8001c84 <HAL_GetTick>
 8003b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b16:	e008      	b.n	8003b2a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b18:	f7fe f8b4 	bl	8001c84 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e173      	b.n	8003e12 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8003b58 <HAL_RCC_OscConfig+0x274>)
 8003b2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d0f0      	beq.n	8003b18 <HAL_RCC_OscConfig+0x234>
 8003b36:	e01b      	b.n	8003b70 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b38:	4b09      	ldr	r3, [pc, #36]	@ (8003b60 <HAL_RCC_OscConfig+0x27c>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b3e:	f7fe f8a1 	bl	8001c84 <HAL_GetTick>
 8003b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b44:	e00e      	b.n	8003b64 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b46:	f7fe f89d 	bl	8001c84 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d907      	bls.n	8003b64 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e15c      	b.n	8003e12 <HAL_RCC_OscConfig+0x52e>
 8003b58:	40023800 	.word	0x40023800
 8003b5c:	42470000 	.word	0x42470000
 8003b60:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b64:	4b8a      	ldr	r3, [pc, #552]	@ (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003b66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b68:	f003 0302 	and.w	r3, r3, #2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d1ea      	bne.n	8003b46 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0304 	and.w	r3, r3, #4
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	f000 8097 	beq.w	8003cac <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b82:	4b83      	ldr	r3, [pc, #524]	@ (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d10f      	bne.n	8003bae <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b8e:	2300      	movs	r3, #0
 8003b90:	60bb      	str	r3, [r7, #8]
 8003b92:	4b7f      	ldr	r3, [pc, #508]	@ (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b96:	4a7e      	ldr	r2, [pc, #504]	@ (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003b98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b9e:	4b7c      	ldr	r3, [pc, #496]	@ (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ba6:	60bb      	str	r3, [r7, #8]
 8003ba8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003baa:	2301      	movs	r3, #1
 8003bac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bae:	4b79      	ldr	r3, [pc, #484]	@ (8003d94 <HAL_RCC_OscConfig+0x4b0>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d118      	bne.n	8003bec <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bba:	4b76      	ldr	r3, [pc, #472]	@ (8003d94 <HAL_RCC_OscConfig+0x4b0>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a75      	ldr	r2, [pc, #468]	@ (8003d94 <HAL_RCC_OscConfig+0x4b0>)
 8003bc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bc6:	f7fe f85d 	bl	8001c84 <HAL_GetTick>
 8003bca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bcc:	e008      	b.n	8003be0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bce:	f7fe f859 	bl	8001c84 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d901      	bls.n	8003be0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e118      	b.n	8003e12 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be0:	4b6c      	ldr	r3, [pc, #432]	@ (8003d94 <HAL_RCC_OscConfig+0x4b0>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d0f0      	beq.n	8003bce <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d106      	bne.n	8003c02 <HAL_RCC_OscConfig+0x31e>
 8003bf4:	4b66      	ldr	r3, [pc, #408]	@ (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003bf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bf8:	4a65      	ldr	r2, [pc, #404]	@ (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003bfa:	f043 0301 	orr.w	r3, r3, #1
 8003bfe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c00:	e01c      	b.n	8003c3c <HAL_RCC_OscConfig+0x358>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	2b05      	cmp	r3, #5
 8003c08:	d10c      	bne.n	8003c24 <HAL_RCC_OscConfig+0x340>
 8003c0a:	4b61      	ldr	r3, [pc, #388]	@ (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003c0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c0e:	4a60      	ldr	r2, [pc, #384]	@ (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003c10:	f043 0304 	orr.w	r3, r3, #4
 8003c14:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c16:	4b5e      	ldr	r3, [pc, #376]	@ (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003c18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c1a:	4a5d      	ldr	r2, [pc, #372]	@ (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003c1c:	f043 0301 	orr.w	r3, r3, #1
 8003c20:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c22:	e00b      	b.n	8003c3c <HAL_RCC_OscConfig+0x358>
 8003c24:	4b5a      	ldr	r3, [pc, #360]	@ (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003c26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c28:	4a59      	ldr	r2, [pc, #356]	@ (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003c2a:	f023 0301 	bic.w	r3, r3, #1
 8003c2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c30:	4b57      	ldr	r3, [pc, #348]	@ (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003c32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c34:	4a56      	ldr	r2, [pc, #344]	@ (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003c36:	f023 0304 	bic.w	r3, r3, #4
 8003c3a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d015      	beq.n	8003c70 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c44:	f7fe f81e 	bl	8001c84 <HAL_GetTick>
 8003c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c4a:	e00a      	b.n	8003c62 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c4c:	f7fe f81a 	bl	8001c84 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e0d7      	b.n	8003e12 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c62:	4b4b      	ldr	r3, [pc, #300]	@ (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003c64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d0ee      	beq.n	8003c4c <HAL_RCC_OscConfig+0x368>
 8003c6e:	e014      	b.n	8003c9a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c70:	f7fe f808 	bl	8001c84 <HAL_GetTick>
 8003c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c76:	e00a      	b.n	8003c8e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c78:	f7fe f804 	bl	8001c84 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e0c1      	b.n	8003e12 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c8e:	4b40      	ldr	r3, [pc, #256]	@ (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003c90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1ee      	bne.n	8003c78 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c9a:	7dfb      	ldrb	r3, [r7, #23]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d105      	bne.n	8003cac <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ca0:	4b3b      	ldr	r3, [pc, #236]	@ (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca4:	4a3a      	ldr	r2, [pc, #232]	@ (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003ca6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003caa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f000 80ad 	beq.w	8003e10 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cb6:	4b36      	ldr	r3, [pc, #216]	@ (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f003 030c 	and.w	r3, r3, #12
 8003cbe:	2b08      	cmp	r3, #8
 8003cc0:	d060      	beq.n	8003d84 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d145      	bne.n	8003d56 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cca:	4b33      	ldr	r3, [pc, #204]	@ (8003d98 <HAL_RCC_OscConfig+0x4b4>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd0:	f7fd ffd8 	bl	8001c84 <HAL_GetTick>
 8003cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cd6:	e008      	b.n	8003cea <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cd8:	f7fd ffd4 	bl	8001c84 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e093      	b.n	8003e12 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cea:	4b29      	ldr	r3, [pc, #164]	@ (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1f0      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	69da      	ldr	r2, [r3, #28]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d04:	019b      	lsls	r3, r3, #6
 8003d06:	431a      	orrs	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d0c:	085b      	lsrs	r3, r3, #1
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	041b      	lsls	r3, r3, #16
 8003d12:	431a      	orrs	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d18:	061b      	lsls	r3, r3, #24
 8003d1a:	431a      	orrs	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d20:	071b      	lsls	r3, r3, #28
 8003d22:	491b      	ldr	r1, [pc, #108]	@ (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d28:	4b1b      	ldr	r3, [pc, #108]	@ (8003d98 <HAL_RCC_OscConfig+0x4b4>)
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2e:	f7fd ffa9 	bl	8001c84 <HAL_GetTick>
 8003d32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d34:	e008      	b.n	8003d48 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d36:	f7fd ffa5 	bl	8001c84 <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d901      	bls.n	8003d48 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e064      	b.n	8003e12 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d48:	4b11      	ldr	r3, [pc, #68]	@ (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d0f0      	beq.n	8003d36 <HAL_RCC_OscConfig+0x452>
 8003d54:	e05c      	b.n	8003e10 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d56:	4b10      	ldr	r3, [pc, #64]	@ (8003d98 <HAL_RCC_OscConfig+0x4b4>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5c:	f7fd ff92 	bl	8001c84 <HAL_GetTick>
 8003d60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d62:	e008      	b.n	8003d76 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d64:	f7fd ff8e 	bl	8001c84 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e04d      	b.n	8003e12 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d76:	4b06      	ldr	r3, [pc, #24]	@ (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1f0      	bne.n	8003d64 <HAL_RCC_OscConfig+0x480>
 8003d82:	e045      	b.n	8003e10 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d107      	bne.n	8003d9c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e040      	b.n	8003e12 <HAL_RCC_OscConfig+0x52e>
 8003d90:	40023800 	.word	0x40023800
 8003d94:	40007000 	.word	0x40007000
 8003d98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d9c:	4b1f      	ldr	r3, [pc, #124]	@ (8003e1c <HAL_RCC_OscConfig+0x538>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d030      	beq.n	8003e0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d129      	bne.n	8003e0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d122      	bne.n	8003e0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003dcc:	4013      	ands	r3, r2
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003dd2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d119      	bne.n	8003e0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003de2:	085b      	lsrs	r3, r3, #1
 8003de4:	3b01      	subs	r3, #1
 8003de6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d10f      	bne.n	8003e0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003df6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d107      	bne.n	8003e0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e06:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d001      	beq.n	8003e10 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e000      	b.n	8003e12 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3718      	adds	r7, #24
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	40023800 	.word	0x40023800

08003e20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e041      	b.n	8003eb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d106      	bne.n	8003e4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f7fd fcac 	bl	80017a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2202      	movs	r2, #2
 8003e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	3304      	adds	r3, #4
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	4610      	mov	r0, r2
 8003e60:	f000 ff16 	bl	8004c90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3708      	adds	r7, #8
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b082      	sub	sp, #8
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d101      	bne.n	8003ed0 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e041      	b.n	8003f54 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d106      	bne.n	8003eea <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f000 f839 	bl	8003f5c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2202      	movs	r2, #2
 8003eee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	3304      	adds	r3, #4
 8003efa:	4619      	mov	r1, r3
 8003efc:	4610      	mov	r0, r2
 8003efe:	f000 fec7 	bl	8004c90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2201      	movs	r2, #1
 8003f06:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2201      	movs	r2, #1
 8003f16:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3708      	adds	r7, #8
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d109      	bne.n	8003f94 <HAL_TIM_OC_Start+0x24>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	bf14      	ite	ne
 8003f8c:	2301      	movne	r3, #1
 8003f8e:	2300      	moveq	r3, #0
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	e022      	b.n	8003fda <HAL_TIM_OC_Start+0x6a>
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	2b04      	cmp	r3, #4
 8003f98:	d109      	bne.n	8003fae <HAL_TIM_OC_Start+0x3e>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	bf14      	ite	ne
 8003fa6:	2301      	movne	r3, #1
 8003fa8:	2300      	moveq	r3, #0
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	e015      	b.n	8003fda <HAL_TIM_OC_Start+0x6a>
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	2b08      	cmp	r3, #8
 8003fb2:	d109      	bne.n	8003fc8 <HAL_TIM_OC_Start+0x58>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	bf14      	ite	ne
 8003fc0:	2301      	movne	r3, #1
 8003fc2:	2300      	moveq	r3, #0
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	e008      	b.n	8003fda <HAL_TIM_OC_Start+0x6a>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	bf14      	ite	ne
 8003fd4:	2301      	movne	r3, #1
 8003fd6:	2300      	moveq	r3, #0
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d001      	beq.n	8003fe2 <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e07c      	b.n	80040dc <HAL_TIM_OC_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d104      	bne.n	8003ff2 <HAL_TIM_OC_Start+0x82>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2202      	movs	r2, #2
 8003fec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ff0:	e013      	b.n	800401a <HAL_TIM_OC_Start+0xaa>
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	2b04      	cmp	r3, #4
 8003ff6:	d104      	bne.n	8004002 <HAL_TIM_OC_Start+0x92>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2202      	movs	r2, #2
 8003ffc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004000:	e00b      	b.n	800401a <HAL_TIM_OC_Start+0xaa>
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	2b08      	cmp	r3, #8
 8004006:	d104      	bne.n	8004012 <HAL_TIM_OC_Start+0xa2>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2202      	movs	r2, #2
 800400c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004010:	e003      	b.n	800401a <HAL_TIM_OC_Start+0xaa>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2202      	movs	r2, #2
 8004016:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2201      	movs	r2, #1
 8004020:	6839      	ldr	r1, [r7, #0]
 8004022:	4618      	mov	r0, r3
 8004024:	f001 f92a 	bl	800527c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a2d      	ldr	r2, [pc, #180]	@ (80040e4 <HAL_TIM_OC_Start+0x174>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d004      	beq.n	800403c <HAL_TIM_OC_Start+0xcc>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a2c      	ldr	r2, [pc, #176]	@ (80040e8 <HAL_TIM_OC_Start+0x178>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d101      	bne.n	8004040 <HAL_TIM_OC_Start+0xd0>
 800403c:	2301      	movs	r3, #1
 800403e:	e000      	b.n	8004042 <HAL_TIM_OC_Start+0xd2>
 8004040:	2300      	movs	r3, #0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d007      	beq.n	8004056 <HAL_TIM_OC_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004054:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a22      	ldr	r2, [pc, #136]	@ (80040e4 <HAL_TIM_OC_Start+0x174>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d022      	beq.n	80040a6 <HAL_TIM_OC_Start+0x136>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004068:	d01d      	beq.n	80040a6 <HAL_TIM_OC_Start+0x136>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a1f      	ldr	r2, [pc, #124]	@ (80040ec <HAL_TIM_OC_Start+0x17c>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d018      	beq.n	80040a6 <HAL_TIM_OC_Start+0x136>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a1d      	ldr	r2, [pc, #116]	@ (80040f0 <HAL_TIM_OC_Start+0x180>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d013      	beq.n	80040a6 <HAL_TIM_OC_Start+0x136>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a1c      	ldr	r2, [pc, #112]	@ (80040f4 <HAL_TIM_OC_Start+0x184>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d00e      	beq.n	80040a6 <HAL_TIM_OC_Start+0x136>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a16      	ldr	r2, [pc, #88]	@ (80040e8 <HAL_TIM_OC_Start+0x178>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d009      	beq.n	80040a6 <HAL_TIM_OC_Start+0x136>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a18      	ldr	r2, [pc, #96]	@ (80040f8 <HAL_TIM_OC_Start+0x188>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d004      	beq.n	80040a6 <HAL_TIM_OC_Start+0x136>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a16      	ldr	r2, [pc, #88]	@ (80040fc <HAL_TIM_OC_Start+0x18c>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d111      	bne.n	80040ca <HAL_TIM_OC_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f003 0307 	and.w	r3, r3, #7
 80040b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2b06      	cmp	r3, #6
 80040b6:	d010      	beq.n	80040da <HAL_TIM_OC_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f042 0201 	orr.w	r2, r2, #1
 80040c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040c8:	e007      	b.n	80040da <HAL_TIM_OC_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f042 0201 	orr.w	r2, r2, #1
 80040d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3710      	adds	r7, #16
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	40010000 	.word	0x40010000
 80040e8:	40010400 	.word	0x40010400
 80040ec:	40000400 	.word	0x40000400
 80040f0:	40000800 	.word	0x40000800
 80040f4:	40000c00 	.word	0x40000c00
 80040f8:	40014000 	.word	0x40014000
 80040fc:	40001800 	.word	0x40001800

08004100 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d101      	bne.n	8004112 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e041      	b.n	8004196 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d106      	bne.n	800412c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 f839 	bl	800419e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2202      	movs	r2, #2
 8004130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	3304      	adds	r3, #4
 800413c:	4619      	mov	r1, r3
 800413e:	4610      	mov	r0, r2
 8004140:	f000 fda6 	bl	8004c90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3708      	adds	r7, #8
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800419e:	b480      	push	{r7}
 80041a0:	b083      	sub	sp, #12
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80041a6:	bf00      	nop
 80041a8:	370c      	adds	r7, #12
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
	...

080041b4 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b086      	sub	sp, #24
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]
 80041c0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80041c2:	2300      	movs	r3, #0
 80041c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d109      	bne.n	80041e0 <HAL_TIM_PWM_Start_DMA+0x2c>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	bf0c      	ite	eq
 80041d8:	2301      	moveq	r3, #1
 80041da:	2300      	movne	r3, #0
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	e022      	b.n	8004226 <HAL_TIM_PWM_Start_DMA+0x72>
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	2b04      	cmp	r3, #4
 80041e4:	d109      	bne.n	80041fa <HAL_TIM_PWM_Start_DMA+0x46>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	bf0c      	ite	eq
 80041f2:	2301      	moveq	r3, #1
 80041f4:	2300      	movne	r3, #0
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	e015      	b.n	8004226 <HAL_TIM_PWM_Start_DMA+0x72>
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	2b08      	cmp	r3, #8
 80041fe:	d109      	bne.n	8004214 <HAL_TIM_PWM_Start_DMA+0x60>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004206:	b2db      	uxtb	r3, r3
 8004208:	2b02      	cmp	r3, #2
 800420a:	bf0c      	ite	eq
 800420c:	2301      	moveq	r3, #1
 800420e:	2300      	movne	r3, #0
 8004210:	b2db      	uxtb	r3, r3
 8004212:	e008      	b.n	8004226 <HAL_TIM_PWM_Start_DMA+0x72>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800421a:	b2db      	uxtb	r3, r3
 800421c:	2b02      	cmp	r3, #2
 800421e:	bf0c      	ite	eq
 8004220:	2301      	moveq	r3, #1
 8004222:	2300      	movne	r3, #0
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d001      	beq.n	800422e <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800422a:	2302      	movs	r3, #2
 800422c:	e171      	b.n	8004512 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d109      	bne.n	8004248 <HAL_TIM_PWM_Start_DMA+0x94>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800423a:	b2db      	uxtb	r3, r3
 800423c:	2b01      	cmp	r3, #1
 800423e:	bf0c      	ite	eq
 8004240:	2301      	moveq	r3, #1
 8004242:	2300      	movne	r3, #0
 8004244:	b2db      	uxtb	r3, r3
 8004246:	e022      	b.n	800428e <HAL_TIM_PWM_Start_DMA+0xda>
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	2b04      	cmp	r3, #4
 800424c:	d109      	bne.n	8004262 <HAL_TIM_PWM_Start_DMA+0xae>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b01      	cmp	r3, #1
 8004258:	bf0c      	ite	eq
 800425a:	2301      	moveq	r3, #1
 800425c:	2300      	movne	r3, #0
 800425e:	b2db      	uxtb	r3, r3
 8004260:	e015      	b.n	800428e <HAL_TIM_PWM_Start_DMA+0xda>
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	2b08      	cmp	r3, #8
 8004266:	d109      	bne.n	800427c <HAL_TIM_PWM_Start_DMA+0xc8>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800426e:	b2db      	uxtb	r3, r3
 8004270:	2b01      	cmp	r3, #1
 8004272:	bf0c      	ite	eq
 8004274:	2301      	moveq	r3, #1
 8004276:	2300      	movne	r3, #0
 8004278:	b2db      	uxtb	r3, r3
 800427a:	e008      	b.n	800428e <HAL_TIM_PWM_Start_DMA+0xda>
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004282:	b2db      	uxtb	r3, r3
 8004284:	2b01      	cmp	r3, #1
 8004286:	bf0c      	ite	eq
 8004288:	2301      	moveq	r3, #1
 800428a:	2300      	movne	r3, #0
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d024      	beq.n	80042dc <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d002      	beq.n	800429e <HAL_TIM_PWM_Start_DMA+0xea>
 8004298:	887b      	ldrh	r3, [r7, #2]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e137      	b.n	8004512 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d104      	bne.n	80042b2 <HAL_TIM_PWM_Start_DMA+0xfe>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2202      	movs	r2, #2
 80042ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042b0:	e016      	b.n	80042e0 <HAL_TIM_PWM_Start_DMA+0x12c>
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	2b04      	cmp	r3, #4
 80042b6:	d104      	bne.n	80042c2 <HAL_TIM_PWM_Start_DMA+0x10e>
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2202      	movs	r2, #2
 80042bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042c0:	e00e      	b.n	80042e0 <HAL_TIM_PWM_Start_DMA+0x12c>
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	2b08      	cmp	r3, #8
 80042c6:	d104      	bne.n	80042d2 <HAL_TIM_PWM_Start_DMA+0x11e>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2202      	movs	r2, #2
 80042cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042d0:	e006      	b.n	80042e0 <HAL_TIM_PWM_Start_DMA+0x12c>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2202      	movs	r2, #2
 80042d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80042da:	e001      	b.n	80042e0 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e118      	b.n	8004512 <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	2b0c      	cmp	r3, #12
 80042e4:	f200 80ae 	bhi.w	8004444 <HAL_TIM_PWM_Start_DMA+0x290>
 80042e8:	a201      	add	r2, pc, #4	@ (adr r2, 80042f0 <HAL_TIM_PWM_Start_DMA+0x13c>)
 80042ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ee:	bf00      	nop
 80042f0:	08004325 	.word	0x08004325
 80042f4:	08004445 	.word	0x08004445
 80042f8:	08004445 	.word	0x08004445
 80042fc:	08004445 	.word	0x08004445
 8004300:	0800436d 	.word	0x0800436d
 8004304:	08004445 	.word	0x08004445
 8004308:	08004445 	.word	0x08004445
 800430c:	08004445 	.word	0x08004445
 8004310:	080043b5 	.word	0x080043b5
 8004314:	08004445 	.word	0x08004445
 8004318:	08004445 	.word	0x08004445
 800431c:	08004445 	.word	0x08004445
 8004320:	080043fd 	.word	0x080043fd
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004328:	4a7c      	ldr	r2, [pc, #496]	@ (800451c <HAL_TIM_PWM_Start_DMA+0x368>)
 800432a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004330:	4a7b      	ldr	r2, [pc, #492]	@ (8004520 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8004332:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004338:	4a7a      	ldr	r2, [pc, #488]	@ (8004524 <HAL_TIM_PWM_Start_DMA+0x370>)
 800433a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8004340:	6879      	ldr	r1, [r7, #4]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	3334      	adds	r3, #52	@ 0x34
 8004348:	461a      	mov	r2, r3
 800434a:	887b      	ldrh	r3, [r7, #2]
 800434c:	f7fe fa7e 	bl	800284c <HAL_DMA_Start_IT>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d001      	beq.n	800435a <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e0db      	b.n	8004512 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68da      	ldr	r2, [r3, #12]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004368:	60da      	str	r2, [r3, #12]
      break;
 800436a:	e06e      	b.n	800444a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004370:	4a6a      	ldr	r2, [pc, #424]	@ (800451c <HAL_TIM_PWM_Start_DMA+0x368>)
 8004372:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004378:	4a69      	ldr	r2, [pc, #420]	@ (8004520 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800437a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004380:	4a68      	ldr	r2, [pc, #416]	@ (8004524 <HAL_TIM_PWM_Start_DMA+0x370>)
 8004382:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8004388:	6879      	ldr	r1, [r7, #4]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	3338      	adds	r3, #56	@ 0x38
 8004390:	461a      	mov	r2, r3
 8004392:	887b      	ldrh	r3, [r7, #2]
 8004394:	f7fe fa5a 	bl	800284c <HAL_DMA_Start_IT>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d001      	beq.n	80043a2 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e0b7      	b.n	8004512 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68da      	ldr	r2, [r3, #12]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80043b0:	60da      	str	r2, [r3, #12]
      break;
 80043b2:	e04a      	b.n	800444a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b8:	4a58      	ldr	r2, [pc, #352]	@ (800451c <HAL_TIM_PWM_Start_DMA+0x368>)
 80043ba:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c0:	4a57      	ldr	r2, [pc, #348]	@ (8004520 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80043c2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c8:	4a56      	ldr	r2, [pc, #344]	@ (8004524 <HAL_TIM_PWM_Start_DMA+0x370>)
 80043ca:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80043d0:	6879      	ldr	r1, [r7, #4]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	333c      	adds	r3, #60	@ 0x3c
 80043d8:	461a      	mov	r2, r3
 80043da:	887b      	ldrh	r3, [r7, #2]
 80043dc:	f7fe fa36 	bl	800284c <HAL_DMA_Start_IT>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d001      	beq.n	80043ea <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e093      	b.n	8004512 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68da      	ldr	r2, [r3, #12]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043f8:	60da      	str	r2, [r3, #12]
      break;
 80043fa:	e026      	b.n	800444a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004400:	4a46      	ldr	r2, [pc, #280]	@ (800451c <HAL_TIM_PWM_Start_DMA+0x368>)
 8004402:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004408:	4a45      	ldr	r2, [pc, #276]	@ (8004520 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800440a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004410:	4a44      	ldr	r2, [pc, #272]	@ (8004524 <HAL_TIM_PWM_Start_DMA+0x370>)
 8004412:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004418:	6879      	ldr	r1, [r7, #4]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	3340      	adds	r3, #64	@ 0x40
 8004420:	461a      	mov	r2, r3
 8004422:	887b      	ldrh	r3, [r7, #2]
 8004424:	f7fe fa12 	bl	800284c <HAL_DMA_Start_IT>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d001      	beq.n	8004432 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e06f      	b.n	8004512 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68da      	ldr	r2, [r3, #12]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004440:	60da      	str	r2, [r3, #12]
      break;
 8004442:	e002      	b.n	800444a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	75fb      	strb	r3, [r7, #23]
      break;
 8004448:	bf00      	nop
  }

  if (status == HAL_OK)
 800444a:	7dfb      	ldrb	r3, [r7, #23]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d15f      	bne.n	8004510 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2201      	movs	r2, #1
 8004456:	68b9      	ldr	r1, [r7, #8]
 8004458:	4618      	mov	r0, r3
 800445a:	f000 ff0f 	bl	800527c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a31      	ldr	r2, [pc, #196]	@ (8004528 <HAL_TIM_PWM_Start_DMA+0x374>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d004      	beq.n	8004472 <HAL_TIM_PWM_Start_DMA+0x2be>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a2f      	ldr	r2, [pc, #188]	@ (800452c <HAL_TIM_PWM_Start_DMA+0x378>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d101      	bne.n	8004476 <HAL_TIM_PWM_Start_DMA+0x2c2>
 8004472:	2301      	movs	r3, #1
 8004474:	e000      	b.n	8004478 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8004476:	2300      	movs	r3, #0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d007      	beq.n	800448c <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800448a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a25      	ldr	r2, [pc, #148]	@ (8004528 <HAL_TIM_PWM_Start_DMA+0x374>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d022      	beq.n	80044dc <HAL_TIM_PWM_Start_DMA+0x328>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800449e:	d01d      	beq.n	80044dc <HAL_TIM_PWM_Start_DMA+0x328>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a22      	ldr	r2, [pc, #136]	@ (8004530 <HAL_TIM_PWM_Start_DMA+0x37c>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d018      	beq.n	80044dc <HAL_TIM_PWM_Start_DMA+0x328>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a21      	ldr	r2, [pc, #132]	@ (8004534 <HAL_TIM_PWM_Start_DMA+0x380>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d013      	beq.n	80044dc <HAL_TIM_PWM_Start_DMA+0x328>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a1f      	ldr	r2, [pc, #124]	@ (8004538 <HAL_TIM_PWM_Start_DMA+0x384>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d00e      	beq.n	80044dc <HAL_TIM_PWM_Start_DMA+0x328>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a1a      	ldr	r2, [pc, #104]	@ (800452c <HAL_TIM_PWM_Start_DMA+0x378>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d009      	beq.n	80044dc <HAL_TIM_PWM_Start_DMA+0x328>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a1b      	ldr	r2, [pc, #108]	@ (800453c <HAL_TIM_PWM_Start_DMA+0x388>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d004      	beq.n	80044dc <HAL_TIM_PWM_Start_DMA+0x328>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a1a      	ldr	r2, [pc, #104]	@ (8004540 <HAL_TIM_PWM_Start_DMA+0x38c>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d111      	bne.n	8004500 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f003 0307 	and.w	r3, r3, #7
 80044e6:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	2b06      	cmp	r3, #6
 80044ec:	d010      	beq.n	8004510 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f042 0201 	orr.w	r2, r2, #1
 80044fc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044fe:	e007      	b.n	8004510 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f042 0201 	orr.w	r2, r2, #1
 800450e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004510:	7dfb      	ldrb	r3, [r7, #23]
}
 8004512:	4618      	mov	r0, r3
 8004514:	3718      	adds	r7, #24
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	08004b81 	.word	0x08004b81
 8004520:	08004c29 	.word	0x08004c29
 8004524:	08004aef 	.word	0x08004aef
 8004528:	40010000 	.word	0x40010000
 800452c:	40010400 	.word	0x40010400
 8004530:	40000400 	.word	0x40000400
 8004534:	40000800 	.word	0x40000800
 8004538:	40000c00 	.word	0x40000c00
 800453c:	40014000 	.word	0x40014000
 8004540:	40001800 	.word	0x40001800

08004544 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800454e:	2300      	movs	r3, #0
 8004550:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	2b0c      	cmp	r3, #12
 8004556:	d855      	bhi.n	8004604 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8004558:	a201      	add	r2, pc, #4	@ (adr r2, 8004560 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800455a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800455e:	bf00      	nop
 8004560:	08004595 	.word	0x08004595
 8004564:	08004605 	.word	0x08004605
 8004568:	08004605 	.word	0x08004605
 800456c:	08004605 	.word	0x08004605
 8004570:	080045b1 	.word	0x080045b1
 8004574:	08004605 	.word	0x08004605
 8004578:	08004605 	.word	0x08004605
 800457c:	08004605 	.word	0x08004605
 8004580:	080045cd 	.word	0x080045cd
 8004584:	08004605 	.word	0x08004605
 8004588:	08004605 	.word	0x08004605
 800458c:	08004605 	.word	0x08004605
 8004590:	080045e9 	.word	0x080045e9
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68da      	ldr	r2, [r3, #12]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80045a2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7fe fa17 	bl	80029dc <HAL_DMA_Abort_IT>
      break;
 80045ae:	e02c      	b.n	800460a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68da      	ldr	r2, [r3, #12]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045be:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7fe fa09 	bl	80029dc <HAL_DMA_Abort_IT>
      break;
 80045ca:	e01e      	b.n	800460a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68da      	ldr	r2, [r3, #12]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045da:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7fe f9fb 	bl	80029dc <HAL_DMA_Abort_IT>
      break;
 80045e6:	e010      	b.n	800460a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68da      	ldr	r2, [r3, #12]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80045f6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7fe f9ed 	bl	80029dc <HAL_DMA_Abort_IT>
      break;
 8004602:	e002      	b.n	800460a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	73fb      	strb	r3, [r7, #15]
      break;
 8004608:	bf00      	nop
  }

  if (status == HAL_OK)
 800460a:	7bfb      	ldrb	r3, [r7, #15]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d161      	bne.n	80046d4 <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2200      	movs	r2, #0
 8004616:	6839      	ldr	r1, [r7, #0]
 8004618:	4618      	mov	r0, r3
 800461a:	f000 fe2f 	bl	800527c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a2f      	ldr	r2, [pc, #188]	@ (80046e0 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d004      	beq.n	8004632 <HAL_TIM_PWM_Stop_DMA+0xee>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a2d      	ldr	r2, [pc, #180]	@ (80046e4 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d101      	bne.n	8004636 <HAL_TIM_PWM_Stop_DMA+0xf2>
 8004632:	2301      	movs	r3, #1
 8004634:	e000      	b.n	8004638 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8004636:	2300      	movs	r3, #0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d017      	beq.n	800466c <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	6a1a      	ldr	r2, [r3, #32]
 8004642:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004646:	4013      	ands	r3, r2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d10f      	bne.n	800466c <HAL_TIM_PWM_Stop_DMA+0x128>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	6a1a      	ldr	r2, [r3, #32]
 8004652:	f240 4344 	movw	r3, #1092	@ 0x444
 8004656:	4013      	ands	r3, r2
 8004658:	2b00      	cmp	r3, #0
 800465a:	d107      	bne.n	800466c <HAL_TIM_PWM_Stop_DMA+0x128>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800466a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	6a1a      	ldr	r2, [r3, #32]
 8004672:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004676:	4013      	ands	r3, r2
 8004678:	2b00      	cmp	r3, #0
 800467a:	d10f      	bne.n	800469c <HAL_TIM_PWM_Stop_DMA+0x158>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	6a1a      	ldr	r2, [r3, #32]
 8004682:	f240 4344 	movw	r3, #1092	@ 0x444
 8004686:	4013      	ands	r3, r2
 8004688:	2b00      	cmp	r3, #0
 800468a:	d107      	bne.n	800469c <HAL_TIM_PWM_Stop_DMA+0x158>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f022 0201 	bic.w	r2, r2, #1
 800469a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d104      	bne.n	80046ac <HAL_TIM_PWM_Stop_DMA+0x168>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2201      	movs	r2, #1
 80046a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046aa:	e013      	b.n	80046d4 <HAL_TIM_PWM_Stop_DMA+0x190>
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	2b04      	cmp	r3, #4
 80046b0:	d104      	bne.n	80046bc <HAL_TIM_PWM_Stop_DMA+0x178>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046ba:	e00b      	b.n	80046d4 <HAL_TIM_PWM_Stop_DMA+0x190>
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	2b08      	cmp	r3, #8
 80046c0:	d104      	bne.n	80046cc <HAL_TIM_PWM_Stop_DMA+0x188>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046ca:	e003      	b.n	80046d4 <HAL_TIM_PWM_Stop_DMA+0x190>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 80046d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	40010000 	.word	0x40010000
 80046e4:	40010400 	.word	0x40010400

080046e8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046f4:	2300      	movs	r3, #0
 80046f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d101      	bne.n	8004706 <HAL_TIM_OC_ConfigChannel+0x1e>
 8004702:	2302      	movs	r3, #2
 8004704:	e048      	b.n	8004798 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2201      	movs	r2, #1
 800470a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2b0c      	cmp	r3, #12
 8004712:	d839      	bhi.n	8004788 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004714:	a201      	add	r2, pc, #4	@ (adr r2, 800471c <HAL_TIM_OC_ConfigChannel+0x34>)
 8004716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800471a:	bf00      	nop
 800471c:	08004751 	.word	0x08004751
 8004720:	08004789 	.word	0x08004789
 8004724:	08004789 	.word	0x08004789
 8004728:	08004789 	.word	0x08004789
 800472c:	0800475f 	.word	0x0800475f
 8004730:	08004789 	.word	0x08004789
 8004734:	08004789 	.word	0x08004789
 8004738:	08004789 	.word	0x08004789
 800473c:	0800476d 	.word	0x0800476d
 8004740:	08004789 	.word	0x08004789
 8004744:	08004789 	.word	0x08004789
 8004748:	08004789 	.word	0x08004789
 800474c:	0800477b 	.word	0x0800477b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68b9      	ldr	r1, [r7, #8]
 8004756:	4618      	mov	r0, r3
 8004758:	f000 fb46 	bl	8004de8 <TIM_OC1_SetConfig>
      break;
 800475c:	e017      	b.n	800478e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68b9      	ldr	r1, [r7, #8]
 8004764:	4618      	mov	r0, r3
 8004766:	f000 fbaf 	bl	8004ec8 <TIM_OC2_SetConfig>
      break;
 800476a:	e010      	b.n	800478e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68b9      	ldr	r1, [r7, #8]
 8004772:	4618      	mov	r0, r3
 8004774:	f000 fc1e 	bl	8004fb4 <TIM_OC3_SetConfig>
      break;
 8004778:	e009      	b.n	800478e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68b9      	ldr	r1, [r7, #8]
 8004780:	4618      	mov	r0, r3
 8004782:	f000 fc8b 	bl	800509c <TIM_OC4_SetConfig>
      break;
 8004786:	e002      	b.n	800478e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	75fb      	strb	r3, [r7, #23]
      break;
 800478c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004796:	7dfb      	ldrb	r3, [r7, #23]
}
 8004798:	4618      	mov	r0, r3
 800479a:	3718      	adds	r7, #24
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b086      	sub	sp, #24
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047ac:	2300      	movs	r3, #0
 80047ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d101      	bne.n	80047be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80047ba:	2302      	movs	r3, #2
 80047bc:	e0ae      	b.n	800491c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2b0c      	cmp	r3, #12
 80047ca:	f200 809f 	bhi.w	800490c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80047ce:	a201      	add	r2, pc, #4	@ (adr r2, 80047d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80047d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d4:	08004809 	.word	0x08004809
 80047d8:	0800490d 	.word	0x0800490d
 80047dc:	0800490d 	.word	0x0800490d
 80047e0:	0800490d 	.word	0x0800490d
 80047e4:	08004849 	.word	0x08004849
 80047e8:	0800490d 	.word	0x0800490d
 80047ec:	0800490d 	.word	0x0800490d
 80047f0:	0800490d 	.word	0x0800490d
 80047f4:	0800488b 	.word	0x0800488b
 80047f8:	0800490d 	.word	0x0800490d
 80047fc:	0800490d 	.word	0x0800490d
 8004800:	0800490d 	.word	0x0800490d
 8004804:	080048cb 	.word	0x080048cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68b9      	ldr	r1, [r7, #8]
 800480e:	4618      	mov	r0, r3
 8004810:	f000 faea 	bl	8004de8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	699a      	ldr	r2, [r3, #24]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f042 0208 	orr.w	r2, r2, #8
 8004822:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	699a      	ldr	r2, [r3, #24]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f022 0204 	bic.w	r2, r2, #4
 8004832:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	6999      	ldr	r1, [r3, #24]
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	691a      	ldr	r2, [r3, #16]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	430a      	orrs	r2, r1
 8004844:	619a      	str	r2, [r3, #24]
      break;
 8004846:	e064      	b.n	8004912 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68b9      	ldr	r1, [r7, #8]
 800484e:	4618      	mov	r0, r3
 8004850:	f000 fb3a 	bl	8004ec8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	699a      	ldr	r2, [r3, #24]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004862:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	699a      	ldr	r2, [r3, #24]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004872:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	6999      	ldr	r1, [r3, #24]
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	021a      	lsls	r2, r3, #8
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	430a      	orrs	r2, r1
 8004886:	619a      	str	r2, [r3, #24]
      break;
 8004888:	e043      	b.n	8004912 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68b9      	ldr	r1, [r7, #8]
 8004890:	4618      	mov	r0, r3
 8004892:	f000 fb8f 	bl	8004fb4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	69da      	ldr	r2, [r3, #28]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f042 0208 	orr.w	r2, r2, #8
 80048a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	69da      	ldr	r2, [r3, #28]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f022 0204 	bic.w	r2, r2, #4
 80048b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	69d9      	ldr	r1, [r3, #28]
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	691a      	ldr	r2, [r3, #16]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	430a      	orrs	r2, r1
 80048c6:	61da      	str	r2, [r3, #28]
      break;
 80048c8:	e023      	b.n	8004912 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68b9      	ldr	r1, [r7, #8]
 80048d0:	4618      	mov	r0, r3
 80048d2:	f000 fbe3 	bl	800509c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	69da      	ldr	r2, [r3, #28]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	69da      	ldr	r2, [r3, #28]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	69d9      	ldr	r1, [r3, #28]
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	021a      	lsls	r2, r3, #8
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	430a      	orrs	r2, r1
 8004908:	61da      	str	r2, [r3, #28]
      break;
 800490a:	e002      	b.n	8004912 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	75fb      	strb	r3, [r7, #23]
      break;
 8004910:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800491a:	7dfb      	ldrb	r3, [r7, #23]
}
 800491c:	4618      	mov	r0, r3
 800491e:	3718      	adds	r7, #24
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800492e:	2300      	movs	r3, #0
 8004930:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004938:	2b01      	cmp	r3, #1
 800493a:	d101      	bne.n	8004940 <HAL_TIM_ConfigClockSource+0x1c>
 800493c:	2302      	movs	r3, #2
 800493e:	e0b4      	b.n	8004aaa <HAL_TIM_ConfigClockSource+0x186>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2202      	movs	r2, #2
 800494c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800495e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004966:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68ba      	ldr	r2, [r7, #8]
 800496e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004978:	d03e      	beq.n	80049f8 <HAL_TIM_ConfigClockSource+0xd4>
 800497a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800497e:	f200 8087 	bhi.w	8004a90 <HAL_TIM_ConfigClockSource+0x16c>
 8004982:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004986:	f000 8086 	beq.w	8004a96 <HAL_TIM_ConfigClockSource+0x172>
 800498a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800498e:	d87f      	bhi.n	8004a90 <HAL_TIM_ConfigClockSource+0x16c>
 8004990:	2b70      	cmp	r3, #112	@ 0x70
 8004992:	d01a      	beq.n	80049ca <HAL_TIM_ConfigClockSource+0xa6>
 8004994:	2b70      	cmp	r3, #112	@ 0x70
 8004996:	d87b      	bhi.n	8004a90 <HAL_TIM_ConfigClockSource+0x16c>
 8004998:	2b60      	cmp	r3, #96	@ 0x60
 800499a:	d050      	beq.n	8004a3e <HAL_TIM_ConfigClockSource+0x11a>
 800499c:	2b60      	cmp	r3, #96	@ 0x60
 800499e:	d877      	bhi.n	8004a90 <HAL_TIM_ConfigClockSource+0x16c>
 80049a0:	2b50      	cmp	r3, #80	@ 0x50
 80049a2:	d03c      	beq.n	8004a1e <HAL_TIM_ConfigClockSource+0xfa>
 80049a4:	2b50      	cmp	r3, #80	@ 0x50
 80049a6:	d873      	bhi.n	8004a90 <HAL_TIM_ConfigClockSource+0x16c>
 80049a8:	2b40      	cmp	r3, #64	@ 0x40
 80049aa:	d058      	beq.n	8004a5e <HAL_TIM_ConfigClockSource+0x13a>
 80049ac:	2b40      	cmp	r3, #64	@ 0x40
 80049ae:	d86f      	bhi.n	8004a90 <HAL_TIM_ConfigClockSource+0x16c>
 80049b0:	2b30      	cmp	r3, #48	@ 0x30
 80049b2:	d064      	beq.n	8004a7e <HAL_TIM_ConfigClockSource+0x15a>
 80049b4:	2b30      	cmp	r3, #48	@ 0x30
 80049b6:	d86b      	bhi.n	8004a90 <HAL_TIM_ConfigClockSource+0x16c>
 80049b8:	2b20      	cmp	r3, #32
 80049ba:	d060      	beq.n	8004a7e <HAL_TIM_ConfigClockSource+0x15a>
 80049bc:	2b20      	cmp	r3, #32
 80049be:	d867      	bhi.n	8004a90 <HAL_TIM_ConfigClockSource+0x16c>
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d05c      	beq.n	8004a7e <HAL_TIM_ConfigClockSource+0x15a>
 80049c4:	2b10      	cmp	r3, #16
 80049c6:	d05a      	beq.n	8004a7e <HAL_TIM_ConfigClockSource+0x15a>
 80049c8:	e062      	b.n	8004a90 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80049da:	f000 fc2f 	bl	800523c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80049ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68ba      	ldr	r2, [r7, #8]
 80049f4:	609a      	str	r2, [r3, #8]
      break;
 80049f6:	e04f      	b.n	8004a98 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a08:	f000 fc18 	bl	800523c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	689a      	ldr	r2, [r3, #8]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a1a:	609a      	str	r2, [r3, #8]
      break;
 8004a1c:	e03c      	b.n	8004a98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	f000 fb8c 	bl	8005148 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2150      	movs	r1, #80	@ 0x50
 8004a36:	4618      	mov	r0, r3
 8004a38:	f000 fbe5 	bl	8005206 <TIM_ITRx_SetConfig>
      break;
 8004a3c:	e02c      	b.n	8004a98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	f000 fbab 	bl	80051a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2160      	movs	r1, #96	@ 0x60
 8004a56:	4618      	mov	r0, r3
 8004a58:	f000 fbd5 	bl	8005206 <TIM_ITRx_SetConfig>
      break;
 8004a5c:	e01c      	b.n	8004a98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	f000 fb6c 	bl	8005148 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2140      	movs	r1, #64	@ 0x40
 8004a76:	4618      	mov	r0, r3
 8004a78:	f000 fbc5 	bl	8005206 <TIM_ITRx_SetConfig>
      break;
 8004a7c:	e00c      	b.n	8004a98 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4619      	mov	r1, r3
 8004a88:	4610      	mov	r0, r2
 8004a8a:	f000 fbbc 	bl	8005206 <TIM_ITRx_SetConfig>
      break;
 8004a8e:	e003      	b.n	8004a98 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	73fb      	strb	r3, [r7, #15]
      break;
 8004a94:	e000      	b.n	8004a98 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004a96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3710      	adds	r7, #16
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}

08004ab2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b083      	sub	sp, #12
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004aba:	bf00      	nop
 8004abc:	370c      	adds	r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr

08004ac6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004ac6:	b480      	push	{r7}
 8004ac8:	b083      	sub	sp, #12
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004ace:	bf00      	nop
 8004ad0:	370c      	adds	r7, #12
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr

08004ada <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004ada:	b480      	push	{r7}
 8004adc:	b083      	sub	sp, #12
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004ae2:	bf00      	nop
 8004ae4:	370c      	adds	r7, #12
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr

08004aee <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b084      	sub	sp, #16
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004afa:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d107      	bne.n	8004b16 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b14:	e02a      	b.n	8004b6c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d107      	bne.n	8004b30 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2202      	movs	r2, #2
 8004b24:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b2e:	e01d      	b.n	8004b6c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d107      	bne.n	8004b4a <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2204      	movs	r2, #4
 8004b3e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b48:	e010      	b.n	8004b6c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d107      	bne.n	8004b64 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2208      	movs	r2, #8
 8004b58:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004b62:	e003      	b.n	8004b6c <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004b6c:	68f8      	ldr	r0, [r7, #12]
 8004b6e:	f7ff ffb4 	bl	8004ada <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	771a      	strb	r2, [r3, #28]
}
 8004b78:	bf00      	nop
 8004b7a:	3710      	adds	r7, #16
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b8c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d10b      	bne.n	8004bb0 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	69db      	ldr	r3, [r3, #28]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d136      	bne.n	8004c14 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004bae:	e031      	b.n	8004c14 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d10b      	bne.n	8004bd2 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2202      	movs	r2, #2
 8004bbe:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	69db      	ldr	r3, [r3, #28]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d125      	bne.n	8004c14 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004bd0:	e020      	b.n	8004c14 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d10b      	bne.n	8004bf4 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2204      	movs	r2, #4
 8004be0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	69db      	ldr	r3, [r3, #28]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d114      	bne.n	8004c14 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004bf2:	e00f      	b.n	8004c14 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d10a      	bne.n	8004c14 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2208      	movs	r2, #8
 8004c02:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	69db      	ldr	r3, [r3, #28]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d103      	bne.n	8004c14 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c14:	68f8      	ldr	r0, [r7, #12]
 8004c16:	f7ff ff4c 	bl	8004ab2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	771a      	strb	r2, [r3, #28]
}
 8004c20:	bf00      	nop
 8004c22:	3710      	adds	r7, #16
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c34:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d103      	bne.n	8004c48 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2201      	movs	r2, #1
 8004c44:	771a      	strb	r2, [r3, #28]
 8004c46:	e019      	b.n	8004c7c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d103      	bne.n	8004c5a <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2202      	movs	r2, #2
 8004c56:	771a      	strb	r2, [r3, #28]
 8004c58:	e010      	b.n	8004c7c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d103      	bne.n	8004c6c <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2204      	movs	r2, #4
 8004c68:	771a      	strb	r2, [r3, #28]
 8004c6a:	e007      	b.n	8004c7c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d102      	bne.n	8004c7c <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2208      	movs	r2, #8
 8004c7a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	f7ff ff22 	bl	8004ac6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2200      	movs	r2, #0
 8004c86:	771a      	strb	r2, [r3, #28]
}
 8004c88:	bf00      	nop
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b085      	sub	sp, #20
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a46      	ldr	r2, [pc, #280]	@ (8004dbc <TIM_Base_SetConfig+0x12c>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d013      	beq.n	8004cd0 <TIM_Base_SetConfig+0x40>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cae:	d00f      	beq.n	8004cd0 <TIM_Base_SetConfig+0x40>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4a43      	ldr	r2, [pc, #268]	@ (8004dc0 <TIM_Base_SetConfig+0x130>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d00b      	beq.n	8004cd0 <TIM_Base_SetConfig+0x40>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4a42      	ldr	r2, [pc, #264]	@ (8004dc4 <TIM_Base_SetConfig+0x134>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d007      	beq.n	8004cd0 <TIM_Base_SetConfig+0x40>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4a41      	ldr	r2, [pc, #260]	@ (8004dc8 <TIM_Base_SetConfig+0x138>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d003      	beq.n	8004cd0 <TIM_Base_SetConfig+0x40>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a40      	ldr	r2, [pc, #256]	@ (8004dcc <TIM_Base_SetConfig+0x13c>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d108      	bne.n	8004ce2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a35      	ldr	r2, [pc, #212]	@ (8004dbc <TIM_Base_SetConfig+0x12c>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d02b      	beq.n	8004d42 <TIM_Base_SetConfig+0xb2>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cf0:	d027      	beq.n	8004d42 <TIM_Base_SetConfig+0xb2>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a32      	ldr	r2, [pc, #200]	@ (8004dc0 <TIM_Base_SetConfig+0x130>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d023      	beq.n	8004d42 <TIM_Base_SetConfig+0xb2>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a31      	ldr	r2, [pc, #196]	@ (8004dc4 <TIM_Base_SetConfig+0x134>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d01f      	beq.n	8004d42 <TIM_Base_SetConfig+0xb2>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a30      	ldr	r2, [pc, #192]	@ (8004dc8 <TIM_Base_SetConfig+0x138>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d01b      	beq.n	8004d42 <TIM_Base_SetConfig+0xb2>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a2f      	ldr	r2, [pc, #188]	@ (8004dcc <TIM_Base_SetConfig+0x13c>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d017      	beq.n	8004d42 <TIM_Base_SetConfig+0xb2>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a2e      	ldr	r2, [pc, #184]	@ (8004dd0 <TIM_Base_SetConfig+0x140>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d013      	beq.n	8004d42 <TIM_Base_SetConfig+0xb2>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a2d      	ldr	r2, [pc, #180]	@ (8004dd4 <TIM_Base_SetConfig+0x144>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d00f      	beq.n	8004d42 <TIM_Base_SetConfig+0xb2>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a2c      	ldr	r2, [pc, #176]	@ (8004dd8 <TIM_Base_SetConfig+0x148>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d00b      	beq.n	8004d42 <TIM_Base_SetConfig+0xb2>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a2b      	ldr	r2, [pc, #172]	@ (8004ddc <TIM_Base_SetConfig+0x14c>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d007      	beq.n	8004d42 <TIM_Base_SetConfig+0xb2>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a2a      	ldr	r2, [pc, #168]	@ (8004de0 <TIM_Base_SetConfig+0x150>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d003      	beq.n	8004d42 <TIM_Base_SetConfig+0xb2>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a29      	ldr	r2, [pc, #164]	@ (8004de4 <TIM_Base_SetConfig+0x154>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d108      	bne.n	8004d54 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	695b      	ldr	r3, [r3, #20]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	689a      	ldr	r2, [r3, #8]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a10      	ldr	r2, [pc, #64]	@ (8004dbc <TIM_Base_SetConfig+0x12c>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d003      	beq.n	8004d88 <TIM_Base_SetConfig+0xf8>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a12      	ldr	r2, [pc, #72]	@ (8004dcc <TIM_Base_SetConfig+0x13c>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d103      	bne.n	8004d90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	691a      	ldr	r2, [r3, #16]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	f003 0301 	and.w	r3, r3, #1
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d105      	bne.n	8004dae <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	f023 0201 	bic.w	r2, r3, #1
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	611a      	str	r2, [r3, #16]
  }
}
 8004dae:	bf00      	nop
 8004db0:	3714      	adds	r7, #20
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	40010000 	.word	0x40010000
 8004dc0:	40000400 	.word	0x40000400
 8004dc4:	40000800 	.word	0x40000800
 8004dc8:	40000c00 	.word	0x40000c00
 8004dcc:	40010400 	.word	0x40010400
 8004dd0:	40014000 	.word	0x40014000
 8004dd4:	40014400 	.word	0x40014400
 8004dd8:	40014800 	.word	0x40014800
 8004ddc:	40001800 	.word	0x40001800
 8004de0:	40001c00 	.word	0x40001c00
 8004de4:	40002000 	.word	0x40002000

08004de8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b087      	sub	sp, #28
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a1b      	ldr	r3, [r3, #32]
 8004df6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a1b      	ldr	r3, [r3, #32]
 8004dfc:	f023 0201 	bic.w	r2, r3, #1
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	699b      	ldr	r3, [r3, #24]
 8004e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f023 0303 	bic.w	r3, r3, #3
 8004e1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68fa      	ldr	r2, [r7, #12]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	f023 0302 	bic.w	r3, r3, #2
 8004e30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a20      	ldr	r2, [pc, #128]	@ (8004ec0 <TIM_OC1_SetConfig+0xd8>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d003      	beq.n	8004e4c <TIM_OC1_SetConfig+0x64>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a1f      	ldr	r2, [pc, #124]	@ (8004ec4 <TIM_OC1_SetConfig+0xdc>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d10c      	bne.n	8004e66 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	f023 0308 	bic.w	r3, r3, #8
 8004e52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	697a      	ldr	r2, [r7, #20]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	f023 0304 	bic.w	r3, r3, #4
 8004e64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a15      	ldr	r2, [pc, #84]	@ (8004ec0 <TIM_OC1_SetConfig+0xd8>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d003      	beq.n	8004e76 <TIM_OC1_SetConfig+0x8e>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a14      	ldr	r2, [pc, #80]	@ (8004ec4 <TIM_OC1_SetConfig+0xdc>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d111      	bne.n	8004e9a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004e84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	693a      	ldr	r2, [r7, #16]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	693a      	ldr	r2, [r7, #16]
 8004e9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	685a      	ldr	r2, [r3, #4]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	697a      	ldr	r2, [r7, #20]
 8004eb2:	621a      	str	r2, [r3, #32]
}
 8004eb4:	bf00      	nop
 8004eb6:	371c      	adds	r7, #28
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr
 8004ec0:	40010000 	.word	0x40010000
 8004ec4:	40010400 	.word	0x40010400

08004ec8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b087      	sub	sp, #28
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a1b      	ldr	r3, [r3, #32]
 8004ed6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a1b      	ldr	r3, [r3, #32]
 8004edc:	f023 0210 	bic.w	r2, r3, #16
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	699b      	ldr	r3, [r3, #24]
 8004eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ef6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004efe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	021b      	lsls	r3, r3, #8
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	f023 0320 	bic.w	r3, r3, #32
 8004f12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	011b      	lsls	r3, r3, #4
 8004f1a:	697a      	ldr	r2, [r7, #20]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a22      	ldr	r2, [pc, #136]	@ (8004fac <TIM_OC2_SetConfig+0xe4>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d003      	beq.n	8004f30 <TIM_OC2_SetConfig+0x68>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a21      	ldr	r2, [pc, #132]	@ (8004fb0 <TIM_OC2_SetConfig+0xe8>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d10d      	bne.n	8004f4c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	011b      	lsls	r3, r3, #4
 8004f3e:	697a      	ldr	r2, [r7, #20]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f4a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a17      	ldr	r2, [pc, #92]	@ (8004fac <TIM_OC2_SetConfig+0xe4>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d003      	beq.n	8004f5c <TIM_OC2_SetConfig+0x94>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a16      	ldr	r2, [pc, #88]	@ (8004fb0 <TIM_OC2_SetConfig+0xe8>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d113      	bne.n	8004f84 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	695b      	ldr	r3, [r3, #20]
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	693a      	ldr	r2, [r7, #16]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	699b      	ldr	r3, [r3, #24]
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	693a      	ldr	r2, [r7, #16]
 8004f88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	685a      	ldr	r2, [r3, #4]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	697a      	ldr	r2, [r7, #20]
 8004f9c:	621a      	str	r2, [r3, #32]
}
 8004f9e:	bf00      	nop
 8004fa0:	371c      	adds	r7, #28
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	40010000 	.word	0x40010000
 8004fb0:	40010400 	.word	0x40010400

08004fb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b087      	sub	sp, #28
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a1b      	ldr	r3, [r3, #32]
 8004fc8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	69db      	ldr	r3, [r3, #28]
 8004fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f023 0303 	bic.w	r3, r3, #3
 8004fea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004ffc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	021b      	lsls	r3, r3, #8
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	4313      	orrs	r3, r2
 8005008:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a21      	ldr	r2, [pc, #132]	@ (8005094 <TIM_OC3_SetConfig+0xe0>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d003      	beq.n	800501a <TIM_OC3_SetConfig+0x66>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a20      	ldr	r2, [pc, #128]	@ (8005098 <TIM_OC3_SetConfig+0xe4>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d10d      	bne.n	8005036 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005020:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	021b      	lsls	r3, r3, #8
 8005028:	697a      	ldr	r2, [r7, #20]
 800502a:	4313      	orrs	r3, r2
 800502c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005034:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a16      	ldr	r2, [pc, #88]	@ (8005094 <TIM_OC3_SetConfig+0xe0>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d003      	beq.n	8005046 <TIM_OC3_SetConfig+0x92>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a15      	ldr	r2, [pc, #84]	@ (8005098 <TIM_OC3_SetConfig+0xe4>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d113      	bne.n	800506e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800504c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005054:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	011b      	lsls	r3, r3, #4
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	4313      	orrs	r3, r2
 8005060:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	699b      	ldr	r3, [r3, #24]
 8005066:	011b      	lsls	r3, r3, #4
 8005068:	693a      	ldr	r2, [r7, #16]
 800506a:	4313      	orrs	r3, r2
 800506c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	693a      	ldr	r2, [r7, #16]
 8005072:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	685a      	ldr	r2, [r3, #4]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	697a      	ldr	r2, [r7, #20]
 8005086:	621a      	str	r2, [r3, #32]
}
 8005088:	bf00      	nop
 800508a:	371c      	adds	r7, #28
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr
 8005094:	40010000 	.word	0x40010000
 8005098:	40010400 	.word	0x40010400

0800509c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800509c:	b480      	push	{r7}
 800509e:	b087      	sub	sp, #28
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a1b      	ldr	r3, [r3, #32]
 80050aa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6a1b      	ldr	r3, [r3, #32]
 80050b0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	69db      	ldr	r3, [r3, #28]
 80050c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	021b      	lsls	r3, r3, #8
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	4313      	orrs	r3, r2
 80050de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80050e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	031b      	lsls	r3, r3, #12
 80050ee:	693a      	ldr	r2, [r7, #16]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a12      	ldr	r2, [pc, #72]	@ (8005140 <TIM_OC4_SetConfig+0xa4>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d003      	beq.n	8005104 <TIM_OC4_SetConfig+0x68>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a11      	ldr	r2, [pc, #68]	@ (8005144 <TIM_OC4_SetConfig+0xa8>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d109      	bne.n	8005118 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800510a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	695b      	ldr	r3, [r3, #20]
 8005110:	019b      	lsls	r3, r3, #6
 8005112:	697a      	ldr	r2, [r7, #20]
 8005114:	4313      	orrs	r3, r2
 8005116:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	697a      	ldr	r2, [r7, #20]
 800511c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	685a      	ldr	r2, [r3, #4]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	693a      	ldr	r2, [r7, #16]
 8005130:	621a      	str	r2, [r3, #32]
}
 8005132:	bf00      	nop
 8005134:	371c      	adds	r7, #28
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop
 8005140:	40010000 	.word	0x40010000
 8005144:	40010400 	.word	0x40010400

08005148 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005148:	b480      	push	{r7}
 800514a:	b087      	sub	sp, #28
 800514c:	af00      	add	r7, sp, #0
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	60b9      	str	r1, [r7, #8]
 8005152:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6a1b      	ldr	r3, [r3, #32]
 8005158:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6a1b      	ldr	r3, [r3, #32]
 800515e:	f023 0201 	bic.w	r2, r3, #1
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005172:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	011b      	lsls	r3, r3, #4
 8005178:	693a      	ldr	r2, [r7, #16]
 800517a:	4313      	orrs	r3, r2
 800517c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	f023 030a 	bic.w	r3, r3, #10
 8005184:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	4313      	orrs	r3, r2
 800518c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	693a      	ldr	r2, [r7, #16]
 8005192:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	697a      	ldr	r2, [r7, #20]
 8005198:	621a      	str	r2, [r3, #32]
}
 800519a:	bf00      	nop
 800519c:	371c      	adds	r7, #28
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr

080051a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051a6:	b480      	push	{r7}
 80051a8:	b087      	sub	sp, #28
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	60f8      	str	r0, [r7, #12]
 80051ae:	60b9      	str	r1, [r7, #8]
 80051b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6a1b      	ldr	r3, [r3, #32]
 80051b6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6a1b      	ldr	r3, [r3, #32]
 80051bc:	f023 0210 	bic.w	r2, r3, #16
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80051d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	031b      	lsls	r3, r3, #12
 80051d6:	693a      	ldr	r2, [r7, #16]
 80051d8:	4313      	orrs	r3, r2
 80051da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80051e2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	011b      	lsls	r3, r3, #4
 80051e8:	697a      	ldr	r2, [r7, #20]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	693a      	ldr	r2, [r7, #16]
 80051f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	697a      	ldr	r2, [r7, #20]
 80051f8:	621a      	str	r2, [r3, #32]
}
 80051fa:	bf00      	nop
 80051fc:	371c      	adds	r7, #28
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr

08005206 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005206:	b480      	push	{r7}
 8005208:	b085      	sub	sp, #20
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
 800520e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800521c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800521e:	683a      	ldr	r2, [r7, #0]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	4313      	orrs	r3, r2
 8005224:	f043 0307 	orr.w	r3, r3, #7
 8005228:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	609a      	str	r2, [r3, #8]
}
 8005230:	bf00      	nop
 8005232:	3714      	adds	r7, #20
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800523c:	b480      	push	{r7}
 800523e:	b087      	sub	sp, #28
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
 8005248:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005256:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	021a      	lsls	r2, r3, #8
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	431a      	orrs	r2, r3
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	4313      	orrs	r3, r2
 8005264:	697a      	ldr	r2, [r7, #20]
 8005266:	4313      	orrs	r3, r2
 8005268:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	697a      	ldr	r2, [r7, #20]
 800526e:	609a      	str	r2, [r3, #8]
}
 8005270:	bf00      	nop
 8005272:	371c      	adds	r7, #28
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800527c:	b480      	push	{r7}
 800527e:	b087      	sub	sp, #28
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	f003 031f 	and.w	r3, r3, #31
 800528e:	2201      	movs	r2, #1
 8005290:	fa02 f303 	lsl.w	r3, r2, r3
 8005294:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6a1a      	ldr	r2, [r3, #32]
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	43db      	mvns	r3, r3
 800529e:	401a      	ands	r2, r3
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6a1a      	ldr	r2, [r3, #32]
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	f003 031f 	and.w	r3, r3, #31
 80052ae:	6879      	ldr	r1, [r7, #4]
 80052b0:	fa01 f303 	lsl.w	r3, r1, r3
 80052b4:	431a      	orrs	r2, r3
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	621a      	str	r2, [r3, #32]
}
 80052ba:	bf00      	nop
 80052bc:	371c      	adds	r7, #28
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
	...

080052c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b085      	sub	sp, #20
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d101      	bne.n	80052e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052dc:	2302      	movs	r3, #2
 80052de:	e05a      	b.n	8005396 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2202      	movs	r2, #2
 80052ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005306:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	4313      	orrs	r3, r2
 8005310:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a21      	ldr	r2, [pc, #132]	@ (80053a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d022      	beq.n	800536a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800532c:	d01d      	beq.n	800536a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a1d      	ldr	r2, [pc, #116]	@ (80053a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d018      	beq.n	800536a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a1b      	ldr	r2, [pc, #108]	@ (80053ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d013      	beq.n	800536a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a1a      	ldr	r2, [pc, #104]	@ (80053b0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d00e      	beq.n	800536a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a18      	ldr	r2, [pc, #96]	@ (80053b4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d009      	beq.n	800536a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a17      	ldr	r2, [pc, #92]	@ (80053b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d004      	beq.n	800536a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a15      	ldr	r2, [pc, #84]	@ (80053bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d10c      	bne.n	8005384 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005370:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	68ba      	ldr	r2, [r7, #8]
 8005378:	4313      	orrs	r3, r2
 800537a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68ba      	ldr	r2, [r7, #8]
 8005382:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3714      	adds	r7, #20
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop
 80053a4:	40010000 	.word	0x40010000
 80053a8:	40000400 	.word	0x40000400
 80053ac:	40000800 	.word	0x40000800
 80053b0:	40000c00 	.word	0x40000c00
 80053b4:	40010400 	.word	0x40010400
 80053b8:	40014000 	.word	0x40014000
 80053bc:	40001800 	.word	0x40001800

080053c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d101      	bne.n	80053d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e042      	b.n	8005458 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d106      	bne.n	80053ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f7fc fb02 	bl	80019f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2224      	movs	r2, #36	@ 0x24
 80053f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68da      	ldr	r2, [r3, #12]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005402:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 fdbd 	bl	8005f84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	691a      	ldr	r2, [r3, #16]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005418:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	695a      	ldr	r2, [r3, #20]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005428:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	68da      	ldr	r2, [r3, #12]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005438:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2220      	movs	r2, #32
 8005444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2220      	movs	r2, #32
 800544c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005456:	2300      	movs	r3, #0
}
 8005458:	4618      	mov	r0, r3
 800545a:	3708      	adds	r7, #8
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b08a      	sub	sp, #40	@ 0x28
 8005464:	af02      	add	r7, sp, #8
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	603b      	str	r3, [r7, #0]
 800546c:	4613      	mov	r3, r2
 800546e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005470:	2300      	movs	r3, #0
 8005472:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800547a:	b2db      	uxtb	r3, r3
 800547c:	2b20      	cmp	r3, #32
 800547e:	d175      	bne.n	800556c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d002      	beq.n	800548c <HAL_UART_Transmit+0x2c>
 8005486:	88fb      	ldrh	r3, [r7, #6]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d101      	bne.n	8005490 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e06e      	b.n	800556e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2200      	movs	r2, #0
 8005494:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2221      	movs	r2, #33	@ 0x21
 800549a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800549e:	f7fc fbf1 	bl	8001c84 <HAL_GetTick>
 80054a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	88fa      	ldrh	r2, [r7, #6]
 80054a8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	88fa      	ldrh	r2, [r7, #6]
 80054ae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054b8:	d108      	bne.n	80054cc <HAL_UART_Transmit+0x6c>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d104      	bne.n	80054cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80054c2:	2300      	movs	r3, #0
 80054c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	61bb      	str	r3, [r7, #24]
 80054ca:	e003      	b.n	80054d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054d0:	2300      	movs	r3, #0
 80054d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80054d4:	e02e      	b.n	8005534 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	9300      	str	r3, [sp, #0]
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	2200      	movs	r2, #0
 80054de:	2180      	movs	r1, #128	@ 0x80
 80054e0:	68f8      	ldr	r0, [r7, #12]
 80054e2:	f000 fb1f 	bl	8005b24 <UART_WaitOnFlagUntilTimeout>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d005      	beq.n	80054f8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2220      	movs	r2, #32
 80054f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e03a      	b.n	800556e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d10b      	bne.n	8005516 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	881b      	ldrh	r3, [r3, #0]
 8005502:	461a      	mov	r2, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800550c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	3302      	adds	r3, #2
 8005512:	61bb      	str	r3, [r7, #24]
 8005514:	e007      	b.n	8005526 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	781a      	ldrb	r2, [r3, #0]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	3301      	adds	r3, #1
 8005524:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800552a:	b29b      	uxth	r3, r3
 800552c:	3b01      	subs	r3, #1
 800552e:	b29a      	uxth	r2, r3
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005538:	b29b      	uxth	r3, r3
 800553a:	2b00      	cmp	r3, #0
 800553c:	d1cb      	bne.n	80054d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	9300      	str	r3, [sp, #0]
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	2200      	movs	r2, #0
 8005546:	2140      	movs	r1, #64	@ 0x40
 8005548:	68f8      	ldr	r0, [r7, #12]
 800554a:	f000 faeb 	bl	8005b24 <UART_WaitOnFlagUntilTimeout>
 800554e:	4603      	mov	r3, r0
 8005550:	2b00      	cmp	r3, #0
 8005552:	d005      	beq.n	8005560 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2220      	movs	r2, #32
 8005558:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e006      	b.n	800556e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2220      	movs	r2, #32
 8005564:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005568:	2300      	movs	r3, #0
 800556a:	e000      	b.n	800556e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800556c:	2302      	movs	r3, #2
  }
}
 800556e:	4618      	mov	r0, r3
 8005570:	3720      	adds	r7, #32
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}

08005576 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005576:	b580      	push	{r7, lr}
 8005578:	b084      	sub	sp, #16
 800557a:	af00      	add	r7, sp, #0
 800557c:	60f8      	str	r0, [r7, #12]
 800557e:	60b9      	str	r1, [r7, #8]
 8005580:	4613      	mov	r3, r2
 8005582:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800558a:	b2db      	uxtb	r3, r3
 800558c:	2b20      	cmp	r3, #32
 800558e:	d112      	bne.n	80055b6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d002      	beq.n	800559c <HAL_UART_Receive_IT+0x26>
 8005596:	88fb      	ldrh	r3, [r7, #6]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d101      	bne.n	80055a0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e00b      	b.n	80055b8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2200      	movs	r2, #0
 80055a4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80055a6:	88fb      	ldrh	r3, [r7, #6]
 80055a8:	461a      	mov	r2, r3
 80055aa:	68b9      	ldr	r1, [r7, #8]
 80055ac:	68f8      	ldr	r0, [r7, #12]
 80055ae:	f000 fb12 	bl	8005bd6 <UART_Start_Receive_IT>
 80055b2:	4603      	mov	r3, r0
 80055b4:	e000      	b.n	80055b8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80055b6:	2302      	movs	r3, #2
  }
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3710      	adds	r7, #16
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}

080055c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b0ba      	sub	sp, #232	@ 0xe8
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80055e6:	2300      	movs	r3, #0
 80055e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80055ec:	2300      	movs	r3, #0
 80055ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80055f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055f6:	f003 030f 	and.w	r3, r3, #15
 80055fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80055fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005602:	2b00      	cmp	r3, #0
 8005604:	d10f      	bne.n	8005626 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800560a:	f003 0320 	and.w	r3, r3, #32
 800560e:	2b00      	cmp	r3, #0
 8005610:	d009      	beq.n	8005626 <HAL_UART_IRQHandler+0x66>
 8005612:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005616:	f003 0320 	and.w	r3, r3, #32
 800561a:	2b00      	cmp	r3, #0
 800561c:	d003      	beq.n	8005626 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 fbf2 	bl	8005e08 <UART_Receive_IT>
      return;
 8005624:	e25b      	b.n	8005ade <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005626:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800562a:	2b00      	cmp	r3, #0
 800562c:	f000 80de 	beq.w	80057ec <HAL_UART_IRQHandler+0x22c>
 8005630:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005634:	f003 0301 	and.w	r3, r3, #1
 8005638:	2b00      	cmp	r3, #0
 800563a:	d106      	bne.n	800564a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800563c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005640:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005644:	2b00      	cmp	r3, #0
 8005646:	f000 80d1 	beq.w	80057ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800564a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800564e:	f003 0301 	and.w	r3, r3, #1
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00b      	beq.n	800566e <HAL_UART_IRQHandler+0xae>
 8005656:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800565a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800565e:	2b00      	cmp	r3, #0
 8005660:	d005      	beq.n	800566e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005666:	f043 0201 	orr.w	r2, r3, #1
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800566e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005672:	f003 0304 	and.w	r3, r3, #4
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00b      	beq.n	8005692 <HAL_UART_IRQHandler+0xd2>
 800567a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800567e:	f003 0301 	and.w	r3, r3, #1
 8005682:	2b00      	cmp	r3, #0
 8005684:	d005      	beq.n	8005692 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800568a:	f043 0202 	orr.w	r2, r3, #2
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005696:	f003 0302 	and.w	r3, r3, #2
 800569a:	2b00      	cmp	r3, #0
 800569c:	d00b      	beq.n	80056b6 <HAL_UART_IRQHandler+0xf6>
 800569e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056a2:	f003 0301 	and.w	r3, r3, #1
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d005      	beq.n	80056b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ae:	f043 0204 	orr.w	r2, r3, #4
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80056b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056ba:	f003 0308 	and.w	r3, r3, #8
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d011      	beq.n	80056e6 <HAL_UART_IRQHandler+0x126>
 80056c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056c6:	f003 0320 	and.w	r3, r3, #32
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d105      	bne.n	80056da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80056ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056d2:	f003 0301 	and.w	r3, r3, #1
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d005      	beq.n	80056e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056de:	f043 0208 	orr.w	r2, r3, #8
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	f000 81f2 	beq.w	8005ad4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80056f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056f4:	f003 0320 	and.w	r3, r3, #32
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d008      	beq.n	800570e <HAL_UART_IRQHandler+0x14e>
 80056fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005700:	f003 0320 	and.w	r3, r3, #32
 8005704:	2b00      	cmp	r3, #0
 8005706:	d002      	beq.n	800570e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f000 fb7d 	bl	8005e08 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	695b      	ldr	r3, [r3, #20]
 8005714:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005718:	2b40      	cmp	r3, #64	@ 0x40
 800571a:	bf0c      	ite	eq
 800571c:	2301      	moveq	r3, #1
 800571e:	2300      	movne	r3, #0
 8005720:	b2db      	uxtb	r3, r3
 8005722:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800572a:	f003 0308 	and.w	r3, r3, #8
 800572e:	2b00      	cmp	r3, #0
 8005730:	d103      	bne.n	800573a <HAL_UART_IRQHandler+0x17a>
 8005732:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005736:	2b00      	cmp	r3, #0
 8005738:	d04f      	beq.n	80057da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 fa85 	bl	8005c4a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	695b      	ldr	r3, [r3, #20]
 8005746:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800574a:	2b40      	cmp	r3, #64	@ 0x40
 800574c:	d141      	bne.n	80057d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	3314      	adds	r3, #20
 8005754:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005758:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800575c:	e853 3f00 	ldrex	r3, [r3]
 8005760:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005764:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005768:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800576c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	3314      	adds	r3, #20
 8005776:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800577a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800577e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005782:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005786:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800578a:	e841 2300 	strex	r3, r2, [r1]
 800578e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005792:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1d9      	bne.n	800574e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d013      	beq.n	80057ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057a6:	4a7e      	ldr	r2, [pc, #504]	@ (80059a0 <HAL_UART_IRQHandler+0x3e0>)
 80057a8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057ae:	4618      	mov	r0, r3
 80057b0:	f7fd f914 	bl	80029dc <HAL_DMA_Abort_IT>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d016      	beq.n	80057e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80057c4:	4610      	mov	r0, r2
 80057c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057c8:	e00e      	b.n	80057e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 f994 	bl	8005af8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057d0:	e00a      	b.n	80057e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 f990 	bl	8005af8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057d8:	e006      	b.n	80057e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 f98c 	bl	8005af8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80057e6:	e175      	b.n	8005ad4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057e8:	bf00      	nop
    return;
 80057ea:	e173      	b.n	8005ad4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	f040 814f 	bne.w	8005a94 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80057f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057fa:	f003 0310 	and.w	r3, r3, #16
 80057fe:	2b00      	cmp	r3, #0
 8005800:	f000 8148 	beq.w	8005a94 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005808:	f003 0310 	and.w	r3, r3, #16
 800580c:	2b00      	cmp	r3, #0
 800580e:	f000 8141 	beq.w	8005a94 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005812:	2300      	movs	r3, #0
 8005814:	60bb      	str	r3, [r7, #8]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	60bb      	str	r3, [r7, #8]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	60bb      	str	r3, [r7, #8]
 8005826:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	695b      	ldr	r3, [r3, #20]
 800582e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005832:	2b40      	cmp	r3, #64	@ 0x40
 8005834:	f040 80b6 	bne.w	80059a4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005844:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005848:	2b00      	cmp	r3, #0
 800584a:	f000 8145 	beq.w	8005ad8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005852:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005856:	429a      	cmp	r2, r3
 8005858:	f080 813e 	bcs.w	8005ad8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005862:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005868:	69db      	ldr	r3, [r3, #28]
 800586a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800586e:	f000 8088 	beq.w	8005982 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	330c      	adds	r3, #12
 8005878:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800587c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005880:	e853 3f00 	ldrex	r3, [r3]
 8005884:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005888:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800588c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005890:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	330c      	adds	r3, #12
 800589a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800589e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80058a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80058aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80058ae:	e841 2300 	strex	r3, r2, [r1]
 80058b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80058b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1d9      	bne.n	8005872 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	3314      	adds	r3, #20
 80058c4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80058c8:	e853 3f00 	ldrex	r3, [r3]
 80058cc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80058ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80058d0:	f023 0301 	bic.w	r3, r3, #1
 80058d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	3314      	adds	r3, #20
 80058de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80058e2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80058e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80058ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80058ee:	e841 2300 	strex	r3, r2, [r1]
 80058f2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80058f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d1e1      	bne.n	80058be <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	3314      	adds	r3, #20
 8005900:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005902:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005904:	e853 3f00 	ldrex	r3, [r3]
 8005908:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800590a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800590c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005910:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	3314      	adds	r3, #20
 800591a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800591e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005920:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005922:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005924:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005926:	e841 2300 	strex	r3, r2, [r1]
 800592a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800592c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800592e:	2b00      	cmp	r3, #0
 8005930:	d1e3      	bne.n	80058fa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2220      	movs	r2, #32
 8005936:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	330c      	adds	r3, #12
 8005946:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005948:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800594a:	e853 3f00 	ldrex	r3, [r3]
 800594e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005950:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005952:	f023 0310 	bic.w	r3, r3, #16
 8005956:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	330c      	adds	r3, #12
 8005960:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005964:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005966:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005968:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800596a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800596c:	e841 2300 	strex	r3, r2, [r1]
 8005970:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005972:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005974:	2b00      	cmp	r3, #0
 8005976:	d1e3      	bne.n	8005940 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800597c:	4618      	mov	r0, r3
 800597e:	f7fc ffbd 	bl	80028fc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2202      	movs	r2, #2
 8005986:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005990:	b29b      	uxth	r3, r3
 8005992:	1ad3      	subs	r3, r2, r3
 8005994:	b29b      	uxth	r3, r3
 8005996:	4619      	mov	r1, r3
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 f8b7 	bl	8005b0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800599e:	e09b      	b.n	8005ad8 <HAL_UART_IRQHandler+0x518>
 80059a0:	08005d11 	.word	0x08005d11
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	1ad3      	subs	r3, r2, r3
 80059b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	f000 808e 	beq.w	8005adc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80059c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f000 8089 	beq.w	8005adc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	330c      	adds	r3, #12
 80059d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059d4:	e853 3f00 	ldrex	r3, [r3]
 80059d8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80059da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80059e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	330c      	adds	r3, #12
 80059ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80059ee:	647a      	str	r2, [r7, #68]	@ 0x44
 80059f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80059f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80059f6:	e841 2300 	strex	r3, r2, [r1]
 80059fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80059fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d1e3      	bne.n	80059ca <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	3314      	adds	r3, #20
 8005a08:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a0c:	e853 3f00 	ldrex	r3, [r3]
 8005a10:	623b      	str	r3, [r7, #32]
   return(result);
 8005a12:	6a3b      	ldr	r3, [r7, #32]
 8005a14:	f023 0301 	bic.w	r3, r3, #1
 8005a18:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	3314      	adds	r3, #20
 8005a22:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005a26:	633a      	str	r2, [r7, #48]	@ 0x30
 8005a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a2e:	e841 2300 	strex	r3, r2, [r1]
 8005a32:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d1e3      	bne.n	8005a02 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2220      	movs	r2, #32
 8005a3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	330c      	adds	r3, #12
 8005a4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	e853 3f00 	ldrex	r3, [r3]
 8005a56:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f023 0310 	bic.w	r3, r3, #16
 8005a5e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	330c      	adds	r3, #12
 8005a68:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005a6c:	61fa      	str	r2, [r7, #28]
 8005a6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a70:	69b9      	ldr	r1, [r7, #24]
 8005a72:	69fa      	ldr	r2, [r7, #28]
 8005a74:	e841 2300 	strex	r3, r2, [r1]
 8005a78:	617b      	str	r3, [r7, #20]
   return(result);
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d1e3      	bne.n	8005a48 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2202      	movs	r2, #2
 8005a84:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a86:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 f83d 	bl	8005b0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a92:	e023      	b.n	8005adc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005a94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d009      	beq.n	8005ab4 <HAL_UART_IRQHandler+0x4f4>
 8005aa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005aa4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d003      	beq.n	8005ab4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f000 f943 	bl	8005d38 <UART_Transmit_IT>
    return;
 8005ab2:	e014      	b.n	8005ade <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005ab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ab8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00e      	beq.n	8005ade <HAL_UART_IRQHandler+0x51e>
 8005ac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ac4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d008      	beq.n	8005ade <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f000 f983 	bl	8005dd8 <UART_EndTransmit_IT>
    return;
 8005ad2:	e004      	b.n	8005ade <HAL_UART_IRQHandler+0x51e>
    return;
 8005ad4:	bf00      	nop
 8005ad6:	e002      	b.n	8005ade <HAL_UART_IRQHandler+0x51e>
      return;
 8005ad8:	bf00      	nop
 8005ada:	e000      	b.n	8005ade <HAL_UART_IRQHandler+0x51e>
      return;
 8005adc:	bf00      	nop
  }
}
 8005ade:	37e8      	adds	r7, #232	@ 0xe8
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005aec:	bf00      	nop
 8005aee:	370c      	adds	r7, #12
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	460b      	mov	r3, r1
 8005b16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b18:	bf00      	nop
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b086      	sub	sp, #24
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	60b9      	str	r1, [r7, #8]
 8005b2e:	603b      	str	r3, [r7, #0]
 8005b30:	4613      	mov	r3, r2
 8005b32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b34:	e03b      	b.n	8005bae <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b36:	6a3b      	ldr	r3, [r7, #32]
 8005b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b3c:	d037      	beq.n	8005bae <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b3e:	f7fc f8a1 	bl	8001c84 <HAL_GetTick>
 8005b42:	4602      	mov	r2, r0
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	1ad3      	subs	r3, r2, r3
 8005b48:	6a3a      	ldr	r2, [r7, #32]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d302      	bcc.n	8005b54 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b4e:	6a3b      	ldr	r3, [r7, #32]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d101      	bne.n	8005b58 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005b54:	2303      	movs	r3, #3
 8005b56:	e03a      	b.n	8005bce <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	f003 0304 	and.w	r3, r3, #4
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d023      	beq.n	8005bae <UART_WaitOnFlagUntilTimeout+0x8a>
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	2b80      	cmp	r3, #128	@ 0x80
 8005b6a:	d020      	beq.n	8005bae <UART_WaitOnFlagUntilTimeout+0x8a>
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	2b40      	cmp	r3, #64	@ 0x40
 8005b70:	d01d      	beq.n	8005bae <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 0308 	and.w	r3, r3, #8
 8005b7c:	2b08      	cmp	r3, #8
 8005b7e:	d116      	bne.n	8005bae <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005b80:	2300      	movs	r3, #0
 8005b82:	617b      	str	r3, [r7, #20]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	617b      	str	r3, [r7, #20]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	617b      	str	r3, [r7, #20]
 8005b94:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b96:	68f8      	ldr	r0, [r7, #12]
 8005b98:	f000 f857 	bl	8005c4a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2208      	movs	r2, #8
 8005ba0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e00f      	b.n	8005bce <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	68ba      	ldr	r2, [r7, #8]
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	bf0c      	ite	eq
 8005bbe:	2301      	moveq	r3, #1
 8005bc0:	2300      	movne	r3, #0
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	79fb      	ldrb	r3, [r7, #7]
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d0b4      	beq.n	8005b36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3718      	adds	r7, #24
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	b085      	sub	sp, #20
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	60f8      	str	r0, [r7, #12]
 8005bde:	60b9      	str	r1, [r7, #8]
 8005be0:	4613      	mov	r3, r2
 8005be2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	68ba      	ldr	r2, [r7, #8]
 8005be8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	88fa      	ldrh	r2, [r7, #6]
 8005bee:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	88fa      	ldrh	r2, [r7, #6]
 8005bf4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2222      	movs	r2, #34	@ 0x22
 8005c00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d007      	beq.n	8005c1c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68da      	ldr	r2, [r3, #12]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c1a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	695a      	ldr	r2, [r3, #20]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f042 0201 	orr.w	r2, r2, #1
 8005c2a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68da      	ldr	r2, [r3, #12]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f042 0220 	orr.w	r2, r2, #32
 8005c3a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3714      	adds	r7, #20
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr

08005c4a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c4a:	b480      	push	{r7}
 8005c4c:	b095      	sub	sp, #84	@ 0x54
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	330c      	adds	r3, #12
 8005c58:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c5c:	e853 3f00 	ldrex	r3, [r3]
 8005c60:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	330c      	adds	r3, #12
 8005c70:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005c72:	643a      	str	r2, [r7, #64]	@ 0x40
 8005c74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c76:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005c78:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005c7a:	e841 2300 	strex	r3, r2, [r1]
 8005c7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d1e5      	bne.n	8005c52 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	3314      	adds	r3, #20
 8005c8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8e:	6a3b      	ldr	r3, [r7, #32]
 8005c90:	e853 3f00 	ldrex	r3, [r3]
 8005c94:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	f023 0301 	bic.w	r3, r3, #1
 8005c9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	3314      	adds	r3, #20
 8005ca4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ca6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005caa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005cac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005cae:	e841 2300 	strex	r3, r2, [r1]
 8005cb2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d1e5      	bne.n	8005c86 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d119      	bne.n	8005cf6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	330c      	adds	r3, #12
 8005cc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	e853 3f00 	ldrex	r3, [r3]
 8005cd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	f023 0310 	bic.w	r3, r3, #16
 8005cd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	330c      	adds	r3, #12
 8005ce0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ce2:	61ba      	str	r2, [r7, #24]
 8005ce4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce6:	6979      	ldr	r1, [r7, #20]
 8005ce8:	69ba      	ldr	r2, [r7, #24]
 8005cea:	e841 2300 	strex	r3, r2, [r1]
 8005cee:	613b      	str	r3, [r7, #16]
   return(result);
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d1e5      	bne.n	8005cc2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2220      	movs	r2, #32
 8005cfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005d04:	bf00      	nop
 8005d06:	3754      	adds	r7, #84	@ 0x54
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2200      	movs	r2, #0
 8005d22:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2200      	movs	r2, #0
 8005d28:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	f7ff fee4 	bl	8005af8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d30:	bf00      	nop
 8005d32:	3710      	adds	r7, #16
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b085      	sub	sp, #20
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	2b21      	cmp	r3, #33	@ 0x21
 8005d4a:	d13e      	bne.n	8005dca <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d54:	d114      	bne.n	8005d80 <UART_Transmit_IT+0x48>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d110      	bne.n	8005d80 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	881b      	ldrh	r3, [r3, #0]
 8005d68:	461a      	mov	r2, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d72:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6a1b      	ldr	r3, [r3, #32]
 8005d78:	1c9a      	adds	r2, r3, #2
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	621a      	str	r2, [r3, #32]
 8005d7e:	e008      	b.n	8005d92 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6a1b      	ldr	r3, [r3, #32]
 8005d84:	1c59      	adds	r1, r3, #1
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	6211      	str	r1, [r2, #32]
 8005d8a:	781a      	ldrb	r2, [r3, #0]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	3b01      	subs	r3, #1
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	4619      	mov	r1, r3
 8005da0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d10f      	bne.n	8005dc6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68da      	ldr	r2, [r3, #12]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005db4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68da      	ldr	r2, [r3, #12]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005dc4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	e000      	b.n	8005dcc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005dca:	2302      	movs	r3, #2
  }
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3714      	adds	r7, #20
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68da      	ldr	r2, [r3, #12]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005dee:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2220      	movs	r2, #32
 8005df4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f7ff fe73 	bl	8005ae4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3708      	adds	r7, #8
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b08c      	sub	sp, #48	@ 0x30
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	2b22      	cmp	r3, #34	@ 0x22
 8005e1a:	f040 80ae 	bne.w	8005f7a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e26:	d117      	bne.n	8005e58 <UART_Receive_IT+0x50>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d113      	bne.n	8005e58 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005e30:	2300      	movs	r3, #0
 8005e32:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e38:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e46:	b29a      	uxth	r2, r3
 8005e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e4a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e50:	1c9a      	adds	r2, r3, #2
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	629a      	str	r2, [r3, #40]	@ 0x28
 8005e56:	e026      	b.n	8005ea6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e6a:	d007      	beq.n	8005e7c <UART_Receive_IT+0x74>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d10a      	bne.n	8005e8a <UART_Receive_IT+0x82>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	691b      	ldr	r3, [r3, #16]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d106      	bne.n	8005e8a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	b2da      	uxtb	r2, r3
 8005e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e86:	701a      	strb	r2, [r3, #0]
 8005e88:	e008      	b.n	8005e9c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e96:	b2da      	uxtb	r2, r3
 8005e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e9a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ea0:	1c5a      	adds	r2, r3, #1
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	3b01      	subs	r3, #1
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	4619      	mov	r1, r3
 8005eb4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d15d      	bne.n	8005f76 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68da      	ldr	r2, [r3, #12]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f022 0220 	bic.w	r2, r2, #32
 8005ec8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68da      	ldr	r2, [r3, #12]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005ed8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	695a      	ldr	r2, [r3, #20]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f022 0201 	bic.w	r2, r2, #1
 8005ee8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2220      	movs	r2, #32
 8005eee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d135      	bne.n	8005f6c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	330c      	adds	r3, #12
 8005f0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	e853 3f00 	ldrex	r3, [r3]
 8005f14:	613b      	str	r3, [r7, #16]
   return(result);
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	f023 0310 	bic.w	r3, r3, #16
 8005f1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	330c      	adds	r3, #12
 8005f24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f26:	623a      	str	r2, [r7, #32]
 8005f28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f2a:	69f9      	ldr	r1, [r7, #28]
 8005f2c:	6a3a      	ldr	r2, [r7, #32]
 8005f2e:	e841 2300 	strex	r3, r2, [r1]
 8005f32:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1e5      	bne.n	8005f06 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 0310 	and.w	r3, r3, #16
 8005f44:	2b10      	cmp	r3, #16
 8005f46:	d10a      	bne.n	8005f5e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f48:	2300      	movs	r3, #0
 8005f4a:	60fb      	str	r3, [r7, #12]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	60fb      	str	r3, [r7, #12]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	60fb      	str	r3, [r7, #12]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005f62:	4619      	mov	r1, r3
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f7ff fdd1 	bl	8005b0c <HAL_UARTEx_RxEventCallback>
 8005f6a:	e002      	b.n	8005f72 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f7fb fb3d 	bl	80015ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005f72:	2300      	movs	r3, #0
 8005f74:	e002      	b.n	8005f7c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005f76:	2300      	movs	r3, #0
 8005f78:	e000      	b.n	8005f7c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005f7a:	2302      	movs	r3, #2
  }
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3730      	adds	r7, #48	@ 0x30
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f88:	b0c0      	sub	sp, #256	@ 0x100
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	691b      	ldr	r3, [r3, #16]
 8005f98:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fa0:	68d9      	ldr	r1, [r3, #12]
 8005fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	ea40 0301 	orr.w	r3, r0, r1
 8005fac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fb2:	689a      	ldr	r2, [r3, #8]
 8005fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	431a      	orrs	r2, r3
 8005fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fc0:	695b      	ldr	r3, [r3, #20]
 8005fc2:	431a      	orrs	r2, r3
 8005fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fc8:	69db      	ldr	r3, [r3, #28]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005fdc:	f021 010c 	bic.w	r1, r1, #12
 8005fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005fea:	430b      	orrs	r3, r1
 8005fec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	695b      	ldr	r3, [r3, #20]
 8005ff6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ffe:	6999      	ldr	r1, [r3, #24]
 8006000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	ea40 0301 	orr.w	r3, r0, r1
 800600a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800600c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	4b8f      	ldr	r3, [pc, #572]	@ (8006250 <UART_SetConfig+0x2cc>)
 8006014:	429a      	cmp	r2, r3
 8006016:	d005      	beq.n	8006024 <UART_SetConfig+0xa0>
 8006018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	4b8d      	ldr	r3, [pc, #564]	@ (8006254 <UART_SetConfig+0x2d0>)
 8006020:	429a      	cmp	r2, r3
 8006022:	d104      	bne.n	800602e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006024:	f7fd fa1a 	bl	800345c <HAL_RCC_GetPCLK2Freq>
 8006028:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800602c:	e003      	b.n	8006036 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800602e:	f7fd fa01 	bl	8003434 <HAL_RCC_GetPCLK1Freq>
 8006032:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800603a:	69db      	ldr	r3, [r3, #28]
 800603c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006040:	f040 810c 	bne.w	800625c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006044:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006048:	2200      	movs	r2, #0
 800604a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800604e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006052:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006056:	4622      	mov	r2, r4
 8006058:	462b      	mov	r3, r5
 800605a:	1891      	adds	r1, r2, r2
 800605c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800605e:	415b      	adcs	r3, r3
 8006060:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006062:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006066:	4621      	mov	r1, r4
 8006068:	eb12 0801 	adds.w	r8, r2, r1
 800606c:	4629      	mov	r1, r5
 800606e:	eb43 0901 	adc.w	r9, r3, r1
 8006072:	f04f 0200 	mov.w	r2, #0
 8006076:	f04f 0300 	mov.w	r3, #0
 800607a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800607e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006082:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006086:	4690      	mov	r8, r2
 8006088:	4699      	mov	r9, r3
 800608a:	4623      	mov	r3, r4
 800608c:	eb18 0303 	adds.w	r3, r8, r3
 8006090:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006094:	462b      	mov	r3, r5
 8006096:	eb49 0303 	adc.w	r3, r9, r3
 800609a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800609e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80060aa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80060ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80060b2:	460b      	mov	r3, r1
 80060b4:	18db      	adds	r3, r3, r3
 80060b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80060b8:	4613      	mov	r3, r2
 80060ba:	eb42 0303 	adc.w	r3, r2, r3
 80060be:	657b      	str	r3, [r7, #84]	@ 0x54
 80060c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80060c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80060c8:	f7fa fd44 	bl	8000b54 <__aeabi_uldivmod>
 80060cc:	4602      	mov	r2, r0
 80060ce:	460b      	mov	r3, r1
 80060d0:	4b61      	ldr	r3, [pc, #388]	@ (8006258 <UART_SetConfig+0x2d4>)
 80060d2:	fba3 2302 	umull	r2, r3, r3, r2
 80060d6:	095b      	lsrs	r3, r3, #5
 80060d8:	011c      	lsls	r4, r3, #4
 80060da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060de:	2200      	movs	r2, #0
 80060e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80060e4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80060e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80060ec:	4642      	mov	r2, r8
 80060ee:	464b      	mov	r3, r9
 80060f0:	1891      	adds	r1, r2, r2
 80060f2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80060f4:	415b      	adcs	r3, r3
 80060f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80060fc:	4641      	mov	r1, r8
 80060fe:	eb12 0a01 	adds.w	sl, r2, r1
 8006102:	4649      	mov	r1, r9
 8006104:	eb43 0b01 	adc.w	fp, r3, r1
 8006108:	f04f 0200 	mov.w	r2, #0
 800610c:	f04f 0300 	mov.w	r3, #0
 8006110:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006114:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006118:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800611c:	4692      	mov	sl, r2
 800611e:	469b      	mov	fp, r3
 8006120:	4643      	mov	r3, r8
 8006122:	eb1a 0303 	adds.w	r3, sl, r3
 8006126:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800612a:	464b      	mov	r3, r9
 800612c:	eb4b 0303 	adc.w	r3, fp, r3
 8006130:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006140:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006144:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006148:	460b      	mov	r3, r1
 800614a:	18db      	adds	r3, r3, r3
 800614c:	643b      	str	r3, [r7, #64]	@ 0x40
 800614e:	4613      	mov	r3, r2
 8006150:	eb42 0303 	adc.w	r3, r2, r3
 8006154:	647b      	str	r3, [r7, #68]	@ 0x44
 8006156:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800615a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800615e:	f7fa fcf9 	bl	8000b54 <__aeabi_uldivmod>
 8006162:	4602      	mov	r2, r0
 8006164:	460b      	mov	r3, r1
 8006166:	4611      	mov	r1, r2
 8006168:	4b3b      	ldr	r3, [pc, #236]	@ (8006258 <UART_SetConfig+0x2d4>)
 800616a:	fba3 2301 	umull	r2, r3, r3, r1
 800616e:	095b      	lsrs	r3, r3, #5
 8006170:	2264      	movs	r2, #100	@ 0x64
 8006172:	fb02 f303 	mul.w	r3, r2, r3
 8006176:	1acb      	subs	r3, r1, r3
 8006178:	00db      	lsls	r3, r3, #3
 800617a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800617e:	4b36      	ldr	r3, [pc, #216]	@ (8006258 <UART_SetConfig+0x2d4>)
 8006180:	fba3 2302 	umull	r2, r3, r3, r2
 8006184:	095b      	lsrs	r3, r3, #5
 8006186:	005b      	lsls	r3, r3, #1
 8006188:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800618c:	441c      	add	r4, r3
 800618e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006192:	2200      	movs	r2, #0
 8006194:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006198:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800619c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80061a0:	4642      	mov	r2, r8
 80061a2:	464b      	mov	r3, r9
 80061a4:	1891      	adds	r1, r2, r2
 80061a6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80061a8:	415b      	adcs	r3, r3
 80061aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80061ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80061b0:	4641      	mov	r1, r8
 80061b2:	1851      	adds	r1, r2, r1
 80061b4:	6339      	str	r1, [r7, #48]	@ 0x30
 80061b6:	4649      	mov	r1, r9
 80061b8:	414b      	adcs	r3, r1
 80061ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80061bc:	f04f 0200 	mov.w	r2, #0
 80061c0:	f04f 0300 	mov.w	r3, #0
 80061c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80061c8:	4659      	mov	r1, fp
 80061ca:	00cb      	lsls	r3, r1, #3
 80061cc:	4651      	mov	r1, sl
 80061ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061d2:	4651      	mov	r1, sl
 80061d4:	00ca      	lsls	r2, r1, #3
 80061d6:	4610      	mov	r0, r2
 80061d8:	4619      	mov	r1, r3
 80061da:	4603      	mov	r3, r0
 80061dc:	4642      	mov	r2, r8
 80061de:	189b      	adds	r3, r3, r2
 80061e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80061e4:	464b      	mov	r3, r9
 80061e6:	460a      	mov	r2, r1
 80061e8:	eb42 0303 	adc.w	r3, r2, r3
 80061ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80061f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	2200      	movs	r2, #0
 80061f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80061fc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006200:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006204:	460b      	mov	r3, r1
 8006206:	18db      	adds	r3, r3, r3
 8006208:	62bb      	str	r3, [r7, #40]	@ 0x28
 800620a:	4613      	mov	r3, r2
 800620c:	eb42 0303 	adc.w	r3, r2, r3
 8006210:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006212:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006216:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800621a:	f7fa fc9b 	bl	8000b54 <__aeabi_uldivmod>
 800621e:	4602      	mov	r2, r0
 8006220:	460b      	mov	r3, r1
 8006222:	4b0d      	ldr	r3, [pc, #52]	@ (8006258 <UART_SetConfig+0x2d4>)
 8006224:	fba3 1302 	umull	r1, r3, r3, r2
 8006228:	095b      	lsrs	r3, r3, #5
 800622a:	2164      	movs	r1, #100	@ 0x64
 800622c:	fb01 f303 	mul.w	r3, r1, r3
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	00db      	lsls	r3, r3, #3
 8006234:	3332      	adds	r3, #50	@ 0x32
 8006236:	4a08      	ldr	r2, [pc, #32]	@ (8006258 <UART_SetConfig+0x2d4>)
 8006238:	fba2 2303 	umull	r2, r3, r2, r3
 800623c:	095b      	lsrs	r3, r3, #5
 800623e:	f003 0207 	and.w	r2, r3, #7
 8006242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4422      	add	r2, r4
 800624a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800624c:	e106      	b.n	800645c <UART_SetConfig+0x4d8>
 800624e:	bf00      	nop
 8006250:	40011000 	.word	0x40011000
 8006254:	40011400 	.word	0x40011400
 8006258:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800625c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006260:	2200      	movs	r2, #0
 8006262:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006266:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800626a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800626e:	4642      	mov	r2, r8
 8006270:	464b      	mov	r3, r9
 8006272:	1891      	adds	r1, r2, r2
 8006274:	6239      	str	r1, [r7, #32]
 8006276:	415b      	adcs	r3, r3
 8006278:	627b      	str	r3, [r7, #36]	@ 0x24
 800627a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800627e:	4641      	mov	r1, r8
 8006280:	1854      	adds	r4, r2, r1
 8006282:	4649      	mov	r1, r9
 8006284:	eb43 0501 	adc.w	r5, r3, r1
 8006288:	f04f 0200 	mov.w	r2, #0
 800628c:	f04f 0300 	mov.w	r3, #0
 8006290:	00eb      	lsls	r3, r5, #3
 8006292:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006296:	00e2      	lsls	r2, r4, #3
 8006298:	4614      	mov	r4, r2
 800629a:	461d      	mov	r5, r3
 800629c:	4643      	mov	r3, r8
 800629e:	18e3      	adds	r3, r4, r3
 80062a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80062a4:	464b      	mov	r3, r9
 80062a6:	eb45 0303 	adc.w	r3, r5, r3
 80062aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80062ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80062ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80062be:	f04f 0200 	mov.w	r2, #0
 80062c2:	f04f 0300 	mov.w	r3, #0
 80062c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80062ca:	4629      	mov	r1, r5
 80062cc:	008b      	lsls	r3, r1, #2
 80062ce:	4621      	mov	r1, r4
 80062d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062d4:	4621      	mov	r1, r4
 80062d6:	008a      	lsls	r2, r1, #2
 80062d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80062dc:	f7fa fc3a 	bl	8000b54 <__aeabi_uldivmod>
 80062e0:	4602      	mov	r2, r0
 80062e2:	460b      	mov	r3, r1
 80062e4:	4b60      	ldr	r3, [pc, #384]	@ (8006468 <UART_SetConfig+0x4e4>)
 80062e6:	fba3 2302 	umull	r2, r3, r3, r2
 80062ea:	095b      	lsrs	r3, r3, #5
 80062ec:	011c      	lsls	r4, r3, #4
 80062ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062f2:	2200      	movs	r2, #0
 80062f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80062f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80062fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006300:	4642      	mov	r2, r8
 8006302:	464b      	mov	r3, r9
 8006304:	1891      	adds	r1, r2, r2
 8006306:	61b9      	str	r1, [r7, #24]
 8006308:	415b      	adcs	r3, r3
 800630a:	61fb      	str	r3, [r7, #28]
 800630c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006310:	4641      	mov	r1, r8
 8006312:	1851      	adds	r1, r2, r1
 8006314:	6139      	str	r1, [r7, #16]
 8006316:	4649      	mov	r1, r9
 8006318:	414b      	adcs	r3, r1
 800631a:	617b      	str	r3, [r7, #20]
 800631c:	f04f 0200 	mov.w	r2, #0
 8006320:	f04f 0300 	mov.w	r3, #0
 8006324:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006328:	4659      	mov	r1, fp
 800632a:	00cb      	lsls	r3, r1, #3
 800632c:	4651      	mov	r1, sl
 800632e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006332:	4651      	mov	r1, sl
 8006334:	00ca      	lsls	r2, r1, #3
 8006336:	4610      	mov	r0, r2
 8006338:	4619      	mov	r1, r3
 800633a:	4603      	mov	r3, r0
 800633c:	4642      	mov	r2, r8
 800633e:	189b      	adds	r3, r3, r2
 8006340:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006344:	464b      	mov	r3, r9
 8006346:	460a      	mov	r2, r1
 8006348:	eb42 0303 	adc.w	r3, r2, r3
 800634c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	67bb      	str	r3, [r7, #120]	@ 0x78
 800635a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800635c:	f04f 0200 	mov.w	r2, #0
 8006360:	f04f 0300 	mov.w	r3, #0
 8006364:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006368:	4649      	mov	r1, r9
 800636a:	008b      	lsls	r3, r1, #2
 800636c:	4641      	mov	r1, r8
 800636e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006372:	4641      	mov	r1, r8
 8006374:	008a      	lsls	r2, r1, #2
 8006376:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800637a:	f7fa fbeb 	bl	8000b54 <__aeabi_uldivmod>
 800637e:	4602      	mov	r2, r0
 8006380:	460b      	mov	r3, r1
 8006382:	4611      	mov	r1, r2
 8006384:	4b38      	ldr	r3, [pc, #224]	@ (8006468 <UART_SetConfig+0x4e4>)
 8006386:	fba3 2301 	umull	r2, r3, r3, r1
 800638a:	095b      	lsrs	r3, r3, #5
 800638c:	2264      	movs	r2, #100	@ 0x64
 800638e:	fb02 f303 	mul.w	r3, r2, r3
 8006392:	1acb      	subs	r3, r1, r3
 8006394:	011b      	lsls	r3, r3, #4
 8006396:	3332      	adds	r3, #50	@ 0x32
 8006398:	4a33      	ldr	r2, [pc, #204]	@ (8006468 <UART_SetConfig+0x4e4>)
 800639a:	fba2 2303 	umull	r2, r3, r2, r3
 800639e:	095b      	lsrs	r3, r3, #5
 80063a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80063a4:	441c      	add	r4, r3
 80063a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063aa:	2200      	movs	r2, #0
 80063ac:	673b      	str	r3, [r7, #112]	@ 0x70
 80063ae:	677a      	str	r2, [r7, #116]	@ 0x74
 80063b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80063b4:	4642      	mov	r2, r8
 80063b6:	464b      	mov	r3, r9
 80063b8:	1891      	adds	r1, r2, r2
 80063ba:	60b9      	str	r1, [r7, #8]
 80063bc:	415b      	adcs	r3, r3
 80063be:	60fb      	str	r3, [r7, #12]
 80063c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80063c4:	4641      	mov	r1, r8
 80063c6:	1851      	adds	r1, r2, r1
 80063c8:	6039      	str	r1, [r7, #0]
 80063ca:	4649      	mov	r1, r9
 80063cc:	414b      	adcs	r3, r1
 80063ce:	607b      	str	r3, [r7, #4]
 80063d0:	f04f 0200 	mov.w	r2, #0
 80063d4:	f04f 0300 	mov.w	r3, #0
 80063d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80063dc:	4659      	mov	r1, fp
 80063de:	00cb      	lsls	r3, r1, #3
 80063e0:	4651      	mov	r1, sl
 80063e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063e6:	4651      	mov	r1, sl
 80063e8:	00ca      	lsls	r2, r1, #3
 80063ea:	4610      	mov	r0, r2
 80063ec:	4619      	mov	r1, r3
 80063ee:	4603      	mov	r3, r0
 80063f0:	4642      	mov	r2, r8
 80063f2:	189b      	adds	r3, r3, r2
 80063f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80063f6:	464b      	mov	r3, r9
 80063f8:	460a      	mov	r2, r1
 80063fa:	eb42 0303 	adc.w	r3, r2, r3
 80063fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	663b      	str	r3, [r7, #96]	@ 0x60
 800640a:	667a      	str	r2, [r7, #100]	@ 0x64
 800640c:	f04f 0200 	mov.w	r2, #0
 8006410:	f04f 0300 	mov.w	r3, #0
 8006414:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006418:	4649      	mov	r1, r9
 800641a:	008b      	lsls	r3, r1, #2
 800641c:	4641      	mov	r1, r8
 800641e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006422:	4641      	mov	r1, r8
 8006424:	008a      	lsls	r2, r1, #2
 8006426:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800642a:	f7fa fb93 	bl	8000b54 <__aeabi_uldivmod>
 800642e:	4602      	mov	r2, r0
 8006430:	460b      	mov	r3, r1
 8006432:	4b0d      	ldr	r3, [pc, #52]	@ (8006468 <UART_SetConfig+0x4e4>)
 8006434:	fba3 1302 	umull	r1, r3, r3, r2
 8006438:	095b      	lsrs	r3, r3, #5
 800643a:	2164      	movs	r1, #100	@ 0x64
 800643c:	fb01 f303 	mul.w	r3, r1, r3
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	011b      	lsls	r3, r3, #4
 8006444:	3332      	adds	r3, #50	@ 0x32
 8006446:	4a08      	ldr	r2, [pc, #32]	@ (8006468 <UART_SetConfig+0x4e4>)
 8006448:	fba2 2303 	umull	r2, r3, r2, r3
 800644c:	095b      	lsrs	r3, r3, #5
 800644e:	f003 020f 	and.w	r2, r3, #15
 8006452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4422      	add	r2, r4
 800645a:	609a      	str	r2, [r3, #8]
}
 800645c:	bf00      	nop
 800645e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006462:	46bd      	mov	sp, r7
 8006464:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006468:	51eb851f 	.word	0x51eb851f

0800646c <memset>:
 800646c:	4402      	add	r2, r0
 800646e:	4603      	mov	r3, r0
 8006470:	4293      	cmp	r3, r2
 8006472:	d100      	bne.n	8006476 <memset+0xa>
 8006474:	4770      	bx	lr
 8006476:	f803 1b01 	strb.w	r1, [r3], #1
 800647a:	e7f9      	b.n	8006470 <memset+0x4>

0800647c <strncpy>:
 800647c:	b510      	push	{r4, lr}
 800647e:	3901      	subs	r1, #1
 8006480:	4603      	mov	r3, r0
 8006482:	b132      	cbz	r2, 8006492 <strncpy+0x16>
 8006484:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006488:	f803 4b01 	strb.w	r4, [r3], #1
 800648c:	3a01      	subs	r2, #1
 800648e:	2c00      	cmp	r4, #0
 8006490:	d1f7      	bne.n	8006482 <strncpy+0x6>
 8006492:	441a      	add	r2, r3
 8006494:	2100      	movs	r1, #0
 8006496:	4293      	cmp	r3, r2
 8006498:	d100      	bne.n	800649c <strncpy+0x20>
 800649a:	bd10      	pop	{r4, pc}
 800649c:	f803 1b01 	strb.w	r1, [r3], #1
 80064a0:	e7f9      	b.n	8006496 <strncpy+0x1a>
	...

080064a4 <__libc_init_array>:
 80064a4:	b570      	push	{r4, r5, r6, lr}
 80064a6:	4d0d      	ldr	r5, [pc, #52]	@ (80064dc <__libc_init_array+0x38>)
 80064a8:	4c0d      	ldr	r4, [pc, #52]	@ (80064e0 <__libc_init_array+0x3c>)
 80064aa:	1b64      	subs	r4, r4, r5
 80064ac:	10a4      	asrs	r4, r4, #2
 80064ae:	2600      	movs	r6, #0
 80064b0:	42a6      	cmp	r6, r4
 80064b2:	d109      	bne.n	80064c8 <__libc_init_array+0x24>
 80064b4:	4d0b      	ldr	r5, [pc, #44]	@ (80064e4 <__libc_init_array+0x40>)
 80064b6:	4c0c      	ldr	r4, [pc, #48]	@ (80064e8 <__libc_init_array+0x44>)
 80064b8:	f001 f84a 	bl	8007550 <_init>
 80064bc:	1b64      	subs	r4, r4, r5
 80064be:	10a4      	asrs	r4, r4, #2
 80064c0:	2600      	movs	r6, #0
 80064c2:	42a6      	cmp	r6, r4
 80064c4:	d105      	bne.n	80064d2 <__libc_init_array+0x2e>
 80064c6:	bd70      	pop	{r4, r5, r6, pc}
 80064c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80064cc:	4798      	blx	r3
 80064ce:	3601      	adds	r6, #1
 80064d0:	e7ee      	b.n	80064b0 <__libc_init_array+0xc>
 80064d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80064d6:	4798      	blx	r3
 80064d8:	3601      	adds	r6, #1
 80064da:	e7f2      	b.n	80064c2 <__libc_init_array+0x1e>
 80064dc:	08007778 	.word	0x08007778
 80064e0:	08007778 	.word	0x08007778
 80064e4:	08007778 	.word	0x08007778
 80064e8:	0800777c 	.word	0x0800777c
 80064ec:	00000000 	.word	0x00000000

080064f0 <sin>:
 80064f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80064f2:	ec53 2b10 	vmov	r2, r3, d0
 80064f6:	4826      	ldr	r0, [pc, #152]	@ (8006590 <sin+0xa0>)
 80064f8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80064fc:	4281      	cmp	r1, r0
 80064fe:	d807      	bhi.n	8006510 <sin+0x20>
 8006500:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8006588 <sin+0x98>
 8006504:	2000      	movs	r0, #0
 8006506:	b005      	add	sp, #20
 8006508:	f85d eb04 	ldr.w	lr, [sp], #4
 800650c:	f000 b90c 	b.w	8006728 <__kernel_sin>
 8006510:	4820      	ldr	r0, [pc, #128]	@ (8006594 <sin+0xa4>)
 8006512:	4281      	cmp	r1, r0
 8006514:	d908      	bls.n	8006528 <sin+0x38>
 8006516:	4610      	mov	r0, r2
 8006518:	4619      	mov	r1, r3
 800651a:	f7f9 fe81 	bl	8000220 <__aeabi_dsub>
 800651e:	ec41 0b10 	vmov	d0, r0, r1
 8006522:	b005      	add	sp, #20
 8006524:	f85d fb04 	ldr.w	pc, [sp], #4
 8006528:	4668      	mov	r0, sp
 800652a:	f000 f9b9 	bl	80068a0 <__ieee754_rem_pio2>
 800652e:	f000 0003 	and.w	r0, r0, #3
 8006532:	2801      	cmp	r0, #1
 8006534:	d00c      	beq.n	8006550 <sin+0x60>
 8006536:	2802      	cmp	r0, #2
 8006538:	d011      	beq.n	800655e <sin+0x6e>
 800653a:	b9e8      	cbnz	r0, 8006578 <sin+0x88>
 800653c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006540:	ed9d 0b00 	vldr	d0, [sp]
 8006544:	2001      	movs	r0, #1
 8006546:	f000 f8ef 	bl	8006728 <__kernel_sin>
 800654a:	ec51 0b10 	vmov	r0, r1, d0
 800654e:	e7e6      	b.n	800651e <sin+0x2e>
 8006550:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006554:	ed9d 0b00 	vldr	d0, [sp]
 8006558:	f000 f81e 	bl	8006598 <__kernel_cos>
 800655c:	e7f5      	b.n	800654a <sin+0x5a>
 800655e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006562:	ed9d 0b00 	vldr	d0, [sp]
 8006566:	2001      	movs	r0, #1
 8006568:	f000 f8de 	bl	8006728 <__kernel_sin>
 800656c:	ec53 2b10 	vmov	r2, r3, d0
 8006570:	4610      	mov	r0, r2
 8006572:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8006576:	e7d2      	b.n	800651e <sin+0x2e>
 8006578:	ed9d 1b02 	vldr	d1, [sp, #8]
 800657c:	ed9d 0b00 	vldr	d0, [sp]
 8006580:	f000 f80a 	bl	8006598 <__kernel_cos>
 8006584:	e7f2      	b.n	800656c <sin+0x7c>
 8006586:	bf00      	nop
	...
 8006590:	3fe921fb 	.word	0x3fe921fb
 8006594:	7fefffff 	.word	0x7fefffff

08006598 <__kernel_cos>:
 8006598:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800659c:	ec57 6b10 	vmov	r6, r7, d0
 80065a0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80065a4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80065a8:	ed8d 1b00 	vstr	d1, [sp]
 80065ac:	d206      	bcs.n	80065bc <__kernel_cos+0x24>
 80065ae:	4630      	mov	r0, r6
 80065b0:	4639      	mov	r1, r7
 80065b2:	f7fa fa87 	bl	8000ac4 <__aeabi_d2iz>
 80065b6:	2800      	cmp	r0, #0
 80065b8:	f000 8088 	beq.w	80066cc <__kernel_cos+0x134>
 80065bc:	4632      	mov	r2, r6
 80065be:	463b      	mov	r3, r7
 80065c0:	4630      	mov	r0, r6
 80065c2:	4639      	mov	r1, r7
 80065c4:	f7f9 ffe4 	bl	8000590 <__aeabi_dmul>
 80065c8:	4b51      	ldr	r3, [pc, #324]	@ (8006710 <__kernel_cos+0x178>)
 80065ca:	2200      	movs	r2, #0
 80065cc:	4604      	mov	r4, r0
 80065ce:	460d      	mov	r5, r1
 80065d0:	f7f9 ffde 	bl	8000590 <__aeabi_dmul>
 80065d4:	a340      	add	r3, pc, #256	@ (adr r3, 80066d8 <__kernel_cos+0x140>)
 80065d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065da:	4682      	mov	sl, r0
 80065dc:	468b      	mov	fp, r1
 80065de:	4620      	mov	r0, r4
 80065e0:	4629      	mov	r1, r5
 80065e2:	f7f9 ffd5 	bl	8000590 <__aeabi_dmul>
 80065e6:	a33e      	add	r3, pc, #248	@ (adr r3, 80066e0 <__kernel_cos+0x148>)
 80065e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ec:	f7f9 fe1a 	bl	8000224 <__adddf3>
 80065f0:	4622      	mov	r2, r4
 80065f2:	462b      	mov	r3, r5
 80065f4:	f7f9 ffcc 	bl	8000590 <__aeabi_dmul>
 80065f8:	a33b      	add	r3, pc, #236	@ (adr r3, 80066e8 <__kernel_cos+0x150>)
 80065fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fe:	f7f9 fe0f 	bl	8000220 <__aeabi_dsub>
 8006602:	4622      	mov	r2, r4
 8006604:	462b      	mov	r3, r5
 8006606:	f7f9 ffc3 	bl	8000590 <__aeabi_dmul>
 800660a:	a339      	add	r3, pc, #228	@ (adr r3, 80066f0 <__kernel_cos+0x158>)
 800660c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006610:	f7f9 fe08 	bl	8000224 <__adddf3>
 8006614:	4622      	mov	r2, r4
 8006616:	462b      	mov	r3, r5
 8006618:	f7f9 ffba 	bl	8000590 <__aeabi_dmul>
 800661c:	a336      	add	r3, pc, #216	@ (adr r3, 80066f8 <__kernel_cos+0x160>)
 800661e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006622:	f7f9 fdfd 	bl	8000220 <__aeabi_dsub>
 8006626:	4622      	mov	r2, r4
 8006628:	462b      	mov	r3, r5
 800662a:	f7f9 ffb1 	bl	8000590 <__aeabi_dmul>
 800662e:	a334      	add	r3, pc, #208	@ (adr r3, 8006700 <__kernel_cos+0x168>)
 8006630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006634:	f7f9 fdf6 	bl	8000224 <__adddf3>
 8006638:	4622      	mov	r2, r4
 800663a:	462b      	mov	r3, r5
 800663c:	f7f9 ffa8 	bl	8000590 <__aeabi_dmul>
 8006640:	4622      	mov	r2, r4
 8006642:	462b      	mov	r3, r5
 8006644:	f7f9 ffa4 	bl	8000590 <__aeabi_dmul>
 8006648:	e9dd 2300 	ldrd	r2, r3, [sp]
 800664c:	4604      	mov	r4, r0
 800664e:	460d      	mov	r5, r1
 8006650:	4630      	mov	r0, r6
 8006652:	4639      	mov	r1, r7
 8006654:	f7f9 ff9c 	bl	8000590 <__aeabi_dmul>
 8006658:	460b      	mov	r3, r1
 800665a:	4602      	mov	r2, r0
 800665c:	4629      	mov	r1, r5
 800665e:	4620      	mov	r0, r4
 8006660:	f7f9 fdde 	bl	8000220 <__aeabi_dsub>
 8006664:	4b2b      	ldr	r3, [pc, #172]	@ (8006714 <__kernel_cos+0x17c>)
 8006666:	4598      	cmp	r8, r3
 8006668:	4606      	mov	r6, r0
 800666a:	460f      	mov	r7, r1
 800666c:	d810      	bhi.n	8006690 <__kernel_cos+0xf8>
 800666e:	4602      	mov	r2, r0
 8006670:	460b      	mov	r3, r1
 8006672:	4650      	mov	r0, sl
 8006674:	4659      	mov	r1, fp
 8006676:	f7f9 fdd3 	bl	8000220 <__aeabi_dsub>
 800667a:	460b      	mov	r3, r1
 800667c:	4926      	ldr	r1, [pc, #152]	@ (8006718 <__kernel_cos+0x180>)
 800667e:	4602      	mov	r2, r0
 8006680:	2000      	movs	r0, #0
 8006682:	f7f9 fdcd 	bl	8000220 <__aeabi_dsub>
 8006686:	ec41 0b10 	vmov	d0, r0, r1
 800668a:	b003      	add	sp, #12
 800668c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006690:	4b22      	ldr	r3, [pc, #136]	@ (800671c <__kernel_cos+0x184>)
 8006692:	4921      	ldr	r1, [pc, #132]	@ (8006718 <__kernel_cos+0x180>)
 8006694:	4598      	cmp	r8, r3
 8006696:	bf8c      	ite	hi
 8006698:	4d21      	ldrhi	r5, [pc, #132]	@ (8006720 <__kernel_cos+0x188>)
 800669a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800669e:	2400      	movs	r4, #0
 80066a0:	4622      	mov	r2, r4
 80066a2:	462b      	mov	r3, r5
 80066a4:	2000      	movs	r0, #0
 80066a6:	f7f9 fdbb 	bl	8000220 <__aeabi_dsub>
 80066aa:	4622      	mov	r2, r4
 80066ac:	4680      	mov	r8, r0
 80066ae:	4689      	mov	r9, r1
 80066b0:	462b      	mov	r3, r5
 80066b2:	4650      	mov	r0, sl
 80066b4:	4659      	mov	r1, fp
 80066b6:	f7f9 fdb3 	bl	8000220 <__aeabi_dsub>
 80066ba:	4632      	mov	r2, r6
 80066bc:	463b      	mov	r3, r7
 80066be:	f7f9 fdaf 	bl	8000220 <__aeabi_dsub>
 80066c2:	4602      	mov	r2, r0
 80066c4:	460b      	mov	r3, r1
 80066c6:	4640      	mov	r0, r8
 80066c8:	4649      	mov	r1, r9
 80066ca:	e7da      	b.n	8006682 <__kernel_cos+0xea>
 80066cc:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8006708 <__kernel_cos+0x170>
 80066d0:	e7db      	b.n	800668a <__kernel_cos+0xf2>
 80066d2:	bf00      	nop
 80066d4:	f3af 8000 	nop.w
 80066d8:	be8838d4 	.word	0xbe8838d4
 80066dc:	bda8fae9 	.word	0xbda8fae9
 80066e0:	bdb4b1c4 	.word	0xbdb4b1c4
 80066e4:	3e21ee9e 	.word	0x3e21ee9e
 80066e8:	809c52ad 	.word	0x809c52ad
 80066ec:	3e927e4f 	.word	0x3e927e4f
 80066f0:	19cb1590 	.word	0x19cb1590
 80066f4:	3efa01a0 	.word	0x3efa01a0
 80066f8:	16c15177 	.word	0x16c15177
 80066fc:	3f56c16c 	.word	0x3f56c16c
 8006700:	5555554c 	.word	0x5555554c
 8006704:	3fa55555 	.word	0x3fa55555
 8006708:	00000000 	.word	0x00000000
 800670c:	3ff00000 	.word	0x3ff00000
 8006710:	3fe00000 	.word	0x3fe00000
 8006714:	3fd33332 	.word	0x3fd33332
 8006718:	3ff00000 	.word	0x3ff00000
 800671c:	3fe90000 	.word	0x3fe90000
 8006720:	3fd20000 	.word	0x3fd20000
 8006724:	00000000 	.word	0x00000000

08006728 <__kernel_sin>:
 8006728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800672c:	ec55 4b10 	vmov	r4, r5, d0
 8006730:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8006734:	b085      	sub	sp, #20
 8006736:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800673a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800673e:	4680      	mov	r8, r0
 8006740:	d205      	bcs.n	800674e <__kernel_sin+0x26>
 8006742:	4620      	mov	r0, r4
 8006744:	4629      	mov	r1, r5
 8006746:	f7fa f9bd 	bl	8000ac4 <__aeabi_d2iz>
 800674a:	2800      	cmp	r0, #0
 800674c:	d052      	beq.n	80067f4 <__kernel_sin+0xcc>
 800674e:	4622      	mov	r2, r4
 8006750:	462b      	mov	r3, r5
 8006752:	4620      	mov	r0, r4
 8006754:	4629      	mov	r1, r5
 8006756:	f7f9 ff1b 	bl	8000590 <__aeabi_dmul>
 800675a:	4682      	mov	sl, r0
 800675c:	468b      	mov	fp, r1
 800675e:	4602      	mov	r2, r0
 8006760:	460b      	mov	r3, r1
 8006762:	4620      	mov	r0, r4
 8006764:	4629      	mov	r1, r5
 8006766:	f7f9 ff13 	bl	8000590 <__aeabi_dmul>
 800676a:	a342      	add	r3, pc, #264	@ (adr r3, 8006874 <__kernel_sin+0x14c>)
 800676c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006770:	e9cd 0100 	strd	r0, r1, [sp]
 8006774:	4650      	mov	r0, sl
 8006776:	4659      	mov	r1, fp
 8006778:	f7f9 ff0a 	bl	8000590 <__aeabi_dmul>
 800677c:	a33f      	add	r3, pc, #252	@ (adr r3, 800687c <__kernel_sin+0x154>)
 800677e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006782:	f7f9 fd4d 	bl	8000220 <__aeabi_dsub>
 8006786:	4652      	mov	r2, sl
 8006788:	465b      	mov	r3, fp
 800678a:	f7f9 ff01 	bl	8000590 <__aeabi_dmul>
 800678e:	a33d      	add	r3, pc, #244	@ (adr r3, 8006884 <__kernel_sin+0x15c>)
 8006790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006794:	f7f9 fd46 	bl	8000224 <__adddf3>
 8006798:	4652      	mov	r2, sl
 800679a:	465b      	mov	r3, fp
 800679c:	f7f9 fef8 	bl	8000590 <__aeabi_dmul>
 80067a0:	a33a      	add	r3, pc, #232	@ (adr r3, 800688c <__kernel_sin+0x164>)
 80067a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a6:	f7f9 fd3b 	bl	8000220 <__aeabi_dsub>
 80067aa:	4652      	mov	r2, sl
 80067ac:	465b      	mov	r3, fp
 80067ae:	f7f9 feef 	bl	8000590 <__aeabi_dmul>
 80067b2:	a338      	add	r3, pc, #224	@ (adr r3, 8006894 <__kernel_sin+0x16c>)
 80067b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b8:	f7f9 fd34 	bl	8000224 <__adddf3>
 80067bc:	4606      	mov	r6, r0
 80067be:	460f      	mov	r7, r1
 80067c0:	f1b8 0f00 	cmp.w	r8, #0
 80067c4:	d11b      	bne.n	80067fe <__kernel_sin+0xd6>
 80067c6:	4602      	mov	r2, r0
 80067c8:	460b      	mov	r3, r1
 80067ca:	4650      	mov	r0, sl
 80067cc:	4659      	mov	r1, fp
 80067ce:	f7f9 fedf 	bl	8000590 <__aeabi_dmul>
 80067d2:	a325      	add	r3, pc, #148	@ (adr r3, 8006868 <__kernel_sin+0x140>)
 80067d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d8:	f7f9 fd22 	bl	8000220 <__aeabi_dsub>
 80067dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80067e0:	f7f9 fed6 	bl	8000590 <__aeabi_dmul>
 80067e4:	4602      	mov	r2, r0
 80067e6:	460b      	mov	r3, r1
 80067e8:	4620      	mov	r0, r4
 80067ea:	4629      	mov	r1, r5
 80067ec:	f7f9 fd1a 	bl	8000224 <__adddf3>
 80067f0:	4604      	mov	r4, r0
 80067f2:	460d      	mov	r5, r1
 80067f4:	ec45 4b10 	vmov	d0, r4, r5
 80067f8:	b005      	add	sp, #20
 80067fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006802:	4b1b      	ldr	r3, [pc, #108]	@ (8006870 <__kernel_sin+0x148>)
 8006804:	2200      	movs	r2, #0
 8006806:	f7f9 fec3 	bl	8000590 <__aeabi_dmul>
 800680a:	4632      	mov	r2, r6
 800680c:	4680      	mov	r8, r0
 800680e:	4689      	mov	r9, r1
 8006810:	463b      	mov	r3, r7
 8006812:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006816:	f7f9 febb 	bl	8000590 <__aeabi_dmul>
 800681a:	4602      	mov	r2, r0
 800681c:	460b      	mov	r3, r1
 800681e:	4640      	mov	r0, r8
 8006820:	4649      	mov	r1, r9
 8006822:	f7f9 fcfd 	bl	8000220 <__aeabi_dsub>
 8006826:	4652      	mov	r2, sl
 8006828:	465b      	mov	r3, fp
 800682a:	f7f9 feb1 	bl	8000590 <__aeabi_dmul>
 800682e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006832:	f7f9 fcf5 	bl	8000220 <__aeabi_dsub>
 8006836:	a30c      	add	r3, pc, #48	@ (adr r3, 8006868 <__kernel_sin+0x140>)
 8006838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683c:	4606      	mov	r6, r0
 800683e:	460f      	mov	r7, r1
 8006840:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006844:	f7f9 fea4 	bl	8000590 <__aeabi_dmul>
 8006848:	4602      	mov	r2, r0
 800684a:	460b      	mov	r3, r1
 800684c:	4630      	mov	r0, r6
 800684e:	4639      	mov	r1, r7
 8006850:	f7f9 fce8 	bl	8000224 <__adddf3>
 8006854:	4602      	mov	r2, r0
 8006856:	460b      	mov	r3, r1
 8006858:	4620      	mov	r0, r4
 800685a:	4629      	mov	r1, r5
 800685c:	f7f9 fce0 	bl	8000220 <__aeabi_dsub>
 8006860:	e7c6      	b.n	80067f0 <__kernel_sin+0xc8>
 8006862:	bf00      	nop
 8006864:	f3af 8000 	nop.w
 8006868:	55555549 	.word	0x55555549
 800686c:	3fc55555 	.word	0x3fc55555
 8006870:	3fe00000 	.word	0x3fe00000
 8006874:	5acfd57c 	.word	0x5acfd57c
 8006878:	3de5d93a 	.word	0x3de5d93a
 800687c:	8a2b9ceb 	.word	0x8a2b9ceb
 8006880:	3e5ae5e6 	.word	0x3e5ae5e6
 8006884:	57b1fe7d 	.word	0x57b1fe7d
 8006888:	3ec71de3 	.word	0x3ec71de3
 800688c:	19c161d5 	.word	0x19c161d5
 8006890:	3f2a01a0 	.word	0x3f2a01a0
 8006894:	1110f8a6 	.word	0x1110f8a6
 8006898:	3f811111 	.word	0x3f811111
 800689c:	00000000 	.word	0x00000000

080068a0 <__ieee754_rem_pio2>:
 80068a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068a4:	ec57 6b10 	vmov	r6, r7, d0
 80068a8:	4bc5      	ldr	r3, [pc, #788]	@ (8006bc0 <__ieee754_rem_pio2+0x320>)
 80068aa:	b08d      	sub	sp, #52	@ 0x34
 80068ac:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80068b0:	4598      	cmp	r8, r3
 80068b2:	4604      	mov	r4, r0
 80068b4:	9704      	str	r7, [sp, #16]
 80068b6:	d807      	bhi.n	80068c8 <__ieee754_rem_pio2+0x28>
 80068b8:	2200      	movs	r2, #0
 80068ba:	2300      	movs	r3, #0
 80068bc:	ed80 0b00 	vstr	d0, [r0]
 80068c0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80068c4:	2500      	movs	r5, #0
 80068c6:	e028      	b.n	800691a <__ieee754_rem_pio2+0x7a>
 80068c8:	4bbe      	ldr	r3, [pc, #760]	@ (8006bc4 <__ieee754_rem_pio2+0x324>)
 80068ca:	4598      	cmp	r8, r3
 80068cc:	d878      	bhi.n	80069c0 <__ieee754_rem_pio2+0x120>
 80068ce:	9b04      	ldr	r3, [sp, #16]
 80068d0:	4dbd      	ldr	r5, [pc, #756]	@ (8006bc8 <__ieee754_rem_pio2+0x328>)
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	4630      	mov	r0, r6
 80068d6:	a3ac      	add	r3, pc, #688	@ (adr r3, 8006b88 <__ieee754_rem_pio2+0x2e8>)
 80068d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068dc:	4639      	mov	r1, r7
 80068de:	dd38      	ble.n	8006952 <__ieee754_rem_pio2+0xb2>
 80068e0:	f7f9 fc9e 	bl	8000220 <__aeabi_dsub>
 80068e4:	45a8      	cmp	r8, r5
 80068e6:	4606      	mov	r6, r0
 80068e8:	460f      	mov	r7, r1
 80068ea:	d01a      	beq.n	8006922 <__ieee754_rem_pio2+0x82>
 80068ec:	a3a8      	add	r3, pc, #672	@ (adr r3, 8006b90 <__ieee754_rem_pio2+0x2f0>)
 80068ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f2:	f7f9 fc95 	bl	8000220 <__aeabi_dsub>
 80068f6:	4602      	mov	r2, r0
 80068f8:	460b      	mov	r3, r1
 80068fa:	4680      	mov	r8, r0
 80068fc:	4689      	mov	r9, r1
 80068fe:	4630      	mov	r0, r6
 8006900:	4639      	mov	r1, r7
 8006902:	f7f9 fc8d 	bl	8000220 <__aeabi_dsub>
 8006906:	a3a2      	add	r3, pc, #648	@ (adr r3, 8006b90 <__ieee754_rem_pio2+0x2f0>)
 8006908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800690c:	f7f9 fc88 	bl	8000220 <__aeabi_dsub>
 8006910:	e9c4 8900 	strd	r8, r9, [r4]
 8006914:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006918:	2501      	movs	r5, #1
 800691a:	4628      	mov	r0, r5
 800691c:	b00d      	add	sp, #52	@ 0x34
 800691e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006922:	a39d      	add	r3, pc, #628	@ (adr r3, 8006b98 <__ieee754_rem_pio2+0x2f8>)
 8006924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006928:	f7f9 fc7a 	bl	8000220 <__aeabi_dsub>
 800692c:	a39c      	add	r3, pc, #624	@ (adr r3, 8006ba0 <__ieee754_rem_pio2+0x300>)
 800692e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006932:	4606      	mov	r6, r0
 8006934:	460f      	mov	r7, r1
 8006936:	f7f9 fc73 	bl	8000220 <__aeabi_dsub>
 800693a:	4602      	mov	r2, r0
 800693c:	460b      	mov	r3, r1
 800693e:	4680      	mov	r8, r0
 8006940:	4689      	mov	r9, r1
 8006942:	4630      	mov	r0, r6
 8006944:	4639      	mov	r1, r7
 8006946:	f7f9 fc6b 	bl	8000220 <__aeabi_dsub>
 800694a:	a395      	add	r3, pc, #596	@ (adr r3, 8006ba0 <__ieee754_rem_pio2+0x300>)
 800694c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006950:	e7dc      	b.n	800690c <__ieee754_rem_pio2+0x6c>
 8006952:	f7f9 fc67 	bl	8000224 <__adddf3>
 8006956:	45a8      	cmp	r8, r5
 8006958:	4606      	mov	r6, r0
 800695a:	460f      	mov	r7, r1
 800695c:	d018      	beq.n	8006990 <__ieee754_rem_pio2+0xf0>
 800695e:	a38c      	add	r3, pc, #560	@ (adr r3, 8006b90 <__ieee754_rem_pio2+0x2f0>)
 8006960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006964:	f7f9 fc5e 	bl	8000224 <__adddf3>
 8006968:	4602      	mov	r2, r0
 800696a:	460b      	mov	r3, r1
 800696c:	4680      	mov	r8, r0
 800696e:	4689      	mov	r9, r1
 8006970:	4630      	mov	r0, r6
 8006972:	4639      	mov	r1, r7
 8006974:	f7f9 fc54 	bl	8000220 <__aeabi_dsub>
 8006978:	a385      	add	r3, pc, #532	@ (adr r3, 8006b90 <__ieee754_rem_pio2+0x2f0>)
 800697a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800697e:	f7f9 fc51 	bl	8000224 <__adddf3>
 8006982:	f04f 35ff 	mov.w	r5, #4294967295
 8006986:	e9c4 8900 	strd	r8, r9, [r4]
 800698a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800698e:	e7c4      	b.n	800691a <__ieee754_rem_pio2+0x7a>
 8006990:	a381      	add	r3, pc, #516	@ (adr r3, 8006b98 <__ieee754_rem_pio2+0x2f8>)
 8006992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006996:	f7f9 fc45 	bl	8000224 <__adddf3>
 800699a:	a381      	add	r3, pc, #516	@ (adr r3, 8006ba0 <__ieee754_rem_pio2+0x300>)
 800699c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a0:	4606      	mov	r6, r0
 80069a2:	460f      	mov	r7, r1
 80069a4:	f7f9 fc3e 	bl	8000224 <__adddf3>
 80069a8:	4602      	mov	r2, r0
 80069aa:	460b      	mov	r3, r1
 80069ac:	4680      	mov	r8, r0
 80069ae:	4689      	mov	r9, r1
 80069b0:	4630      	mov	r0, r6
 80069b2:	4639      	mov	r1, r7
 80069b4:	f7f9 fc34 	bl	8000220 <__aeabi_dsub>
 80069b8:	a379      	add	r3, pc, #484	@ (adr r3, 8006ba0 <__ieee754_rem_pio2+0x300>)
 80069ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069be:	e7de      	b.n	800697e <__ieee754_rem_pio2+0xde>
 80069c0:	4b82      	ldr	r3, [pc, #520]	@ (8006bcc <__ieee754_rem_pio2+0x32c>)
 80069c2:	4598      	cmp	r8, r3
 80069c4:	f200 80d1 	bhi.w	8006b6a <__ieee754_rem_pio2+0x2ca>
 80069c8:	f000 f966 	bl	8006c98 <fabs>
 80069cc:	ec57 6b10 	vmov	r6, r7, d0
 80069d0:	a375      	add	r3, pc, #468	@ (adr r3, 8006ba8 <__ieee754_rem_pio2+0x308>)
 80069d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d6:	4630      	mov	r0, r6
 80069d8:	4639      	mov	r1, r7
 80069da:	f7f9 fdd9 	bl	8000590 <__aeabi_dmul>
 80069de:	4b7c      	ldr	r3, [pc, #496]	@ (8006bd0 <__ieee754_rem_pio2+0x330>)
 80069e0:	2200      	movs	r2, #0
 80069e2:	f7f9 fc1f 	bl	8000224 <__adddf3>
 80069e6:	f7fa f86d 	bl	8000ac4 <__aeabi_d2iz>
 80069ea:	4605      	mov	r5, r0
 80069ec:	f7f9 fd66 	bl	80004bc <__aeabi_i2d>
 80069f0:	4602      	mov	r2, r0
 80069f2:	460b      	mov	r3, r1
 80069f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80069f8:	a363      	add	r3, pc, #396	@ (adr r3, 8006b88 <__ieee754_rem_pio2+0x2e8>)
 80069fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069fe:	f7f9 fdc7 	bl	8000590 <__aeabi_dmul>
 8006a02:	4602      	mov	r2, r0
 8006a04:	460b      	mov	r3, r1
 8006a06:	4630      	mov	r0, r6
 8006a08:	4639      	mov	r1, r7
 8006a0a:	f7f9 fc09 	bl	8000220 <__aeabi_dsub>
 8006a0e:	a360      	add	r3, pc, #384	@ (adr r3, 8006b90 <__ieee754_rem_pio2+0x2f0>)
 8006a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a14:	4682      	mov	sl, r0
 8006a16:	468b      	mov	fp, r1
 8006a18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a1c:	f7f9 fdb8 	bl	8000590 <__aeabi_dmul>
 8006a20:	2d1f      	cmp	r5, #31
 8006a22:	4606      	mov	r6, r0
 8006a24:	460f      	mov	r7, r1
 8006a26:	dc0c      	bgt.n	8006a42 <__ieee754_rem_pio2+0x1a2>
 8006a28:	4b6a      	ldr	r3, [pc, #424]	@ (8006bd4 <__ieee754_rem_pio2+0x334>)
 8006a2a:	1e6a      	subs	r2, r5, #1
 8006a2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a30:	4543      	cmp	r3, r8
 8006a32:	d006      	beq.n	8006a42 <__ieee754_rem_pio2+0x1a2>
 8006a34:	4632      	mov	r2, r6
 8006a36:	463b      	mov	r3, r7
 8006a38:	4650      	mov	r0, sl
 8006a3a:	4659      	mov	r1, fp
 8006a3c:	f7f9 fbf0 	bl	8000220 <__aeabi_dsub>
 8006a40:	e00e      	b.n	8006a60 <__ieee754_rem_pio2+0x1c0>
 8006a42:	463b      	mov	r3, r7
 8006a44:	4632      	mov	r2, r6
 8006a46:	4650      	mov	r0, sl
 8006a48:	4659      	mov	r1, fp
 8006a4a:	f7f9 fbe9 	bl	8000220 <__aeabi_dsub>
 8006a4e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006a52:	9305      	str	r3, [sp, #20]
 8006a54:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006a58:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8006a5c:	2b10      	cmp	r3, #16
 8006a5e:	dc02      	bgt.n	8006a66 <__ieee754_rem_pio2+0x1c6>
 8006a60:	e9c4 0100 	strd	r0, r1, [r4]
 8006a64:	e039      	b.n	8006ada <__ieee754_rem_pio2+0x23a>
 8006a66:	a34c      	add	r3, pc, #304	@ (adr r3, 8006b98 <__ieee754_rem_pio2+0x2f8>)
 8006a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a70:	f7f9 fd8e 	bl	8000590 <__aeabi_dmul>
 8006a74:	4606      	mov	r6, r0
 8006a76:	460f      	mov	r7, r1
 8006a78:	4602      	mov	r2, r0
 8006a7a:	460b      	mov	r3, r1
 8006a7c:	4650      	mov	r0, sl
 8006a7e:	4659      	mov	r1, fp
 8006a80:	f7f9 fbce 	bl	8000220 <__aeabi_dsub>
 8006a84:	4602      	mov	r2, r0
 8006a86:	460b      	mov	r3, r1
 8006a88:	4680      	mov	r8, r0
 8006a8a:	4689      	mov	r9, r1
 8006a8c:	4650      	mov	r0, sl
 8006a8e:	4659      	mov	r1, fp
 8006a90:	f7f9 fbc6 	bl	8000220 <__aeabi_dsub>
 8006a94:	4632      	mov	r2, r6
 8006a96:	463b      	mov	r3, r7
 8006a98:	f7f9 fbc2 	bl	8000220 <__aeabi_dsub>
 8006a9c:	a340      	add	r3, pc, #256	@ (adr r3, 8006ba0 <__ieee754_rem_pio2+0x300>)
 8006a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa2:	4606      	mov	r6, r0
 8006aa4:	460f      	mov	r7, r1
 8006aa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006aaa:	f7f9 fd71 	bl	8000590 <__aeabi_dmul>
 8006aae:	4632      	mov	r2, r6
 8006ab0:	463b      	mov	r3, r7
 8006ab2:	f7f9 fbb5 	bl	8000220 <__aeabi_dsub>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	460b      	mov	r3, r1
 8006aba:	4606      	mov	r6, r0
 8006abc:	460f      	mov	r7, r1
 8006abe:	4640      	mov	r0, r8
 8006ac0:	4649      	mov	r1, r9
 8006ac2:	f7f9 fbad 	bl	8000220 <__aeabi_dsub>
 8006ac6:	9a05      	ldr	r2, [sp, #20]
 8006ac8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006acc:	1ad3      	subs	r3, r2, r3
 8006ace:	2b31      	cmp	r3, #49	@ 0x31
 8006ad0:	dc20      	bgt.n	8006b14 <__ieee754_rem_pio2+0x274>
 8006ad2:	e9c4 0100 	strd	r0, r1, [r4]
 8006ad6:	46c2      	mov	sl, r8
 8006ad8:	46cb      	mov	fp, r9
 8006ada:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006ade:	4650      	mov	r0, sl
 8006ae0:	4642      	mov	r2, r8
 8006ae2:	464b      	mov	r3, r9
 8006ae4:	4659      	mov	r1, fp
 8006ae6:	f7f9 fb9b 	bl	8000220 <__aeabi_dsub>
 8006aea:	463b      	mov	r3, r7
 8006aec:	4632      	mov	r2, r6
 8006aee:	f7f9 fb97 	bl	8000220 <__aeabi_dsub>
 8006af2:	9b04      	ldr	r3, [sp, #16]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006afa:	f6bf af0e 	bge.w	800691a <__ieee754_rem_pio2+0x7a>
 8006afe:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8006b02:	6063      	str	r3, [r4, #4]
 8006b04:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006b08:	f8c4 8000 	str.w	r8, [r4]
 8006b0c:	60a0      	str	r0, [r4, #8]
 8006b0e:	60e3      	str	r3, [r4, #12]
 8006b10:	426d      	negs	r5, r5
 8006b12:	e702      	b.n	800691a <__ieee754_rem_pio2+0x7a>
 8006b14:	a326      	add	r3, pc, #152	@ (adr r3, 8006bb0 <__ieee754_rem_pio2+0x310>)
 8006b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b1e:	f7f9 fd37 	bl	8000590 <__aeabi_dmul>
 8006b22:	4606      	mov	r6, r0
 8006b24:	460f      	mov	r7, r1
 8006b26:	4602      	mov	r2, r0
 8006b28:	460b      	mov	r3, r1
 8006b2a:	4640      	mov	r0, r8
 8006b2c:	4649      	mov	r1, r9
 8006b2e:	f7f9 fb77 	bl	8000220 <__aeabi_dsub>
 8006b32:	4602      	mov	r2, r0
 8006b34:	460b      	mov	r3, r1
 8006b36:	4682      	mov	sl, r0
 8006b38:	468b      	mov	fp, r1
 8006b3a:	4640      	mov	r0, r8
 8006b3c:	4649      	mov	r1, r9
 8006b3e:	f7f9 fb6f 	bl	8000220 <__aeabi_dsub>
 8006b42:	4632      	mov	r2, r6
 8006b44:	463b      	mov	r3, r7
 8006b46:	f7f9 fb6b 	bl	8000220 <__aeabi_dsub>
 8006b4a:	a31b      	add	r3, pc, #108	@ (adr r3, 8006bb8 <__ieee754_rem_pio2+0x318>)
 8006b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b50:	4606      	mov	r6, r0
 8006b52:	460f      	mov	r7, r1
 8006b54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b58:	f7f9 fd1a 	bl	8000590 <__aeabi_dmul>
 8006b5c:	4632      	mov	r2, r6
 8006b5e:	463b      	mov	r3, r7
 8006b60:	f7f9 fb5e 	bl	8000220 <__aeabi_dsub>
 8006b64:	4606      	mov	r6, r0
 8006b66:	460f      	mov	r7, r1
 8006b68:	e764      	b.n	8006a34 <__ieee754_rem_pio2+0x194>
 8006b6a:	4b1b      	ldr	r3, [pc, #108]	@ (8006bd8 <__ieee754_rem_pio2+0x338>)
 8006b6c:	4598      	cmp	r8, r3
 8006b6e:	d935      	bls.n	8006bdc <__ieee754_rem_pio2+0x33c>
 8006b70:	4632      	mov	r2, r6
 8006b72:	463b      	mov	r3, r7
 8006b74:	4630      	mov	r0, r6
 8006b76:	4639      	mov	r1, r7
 8006b78:	f7f9 fb52 	bl	8000220 <__aeabi_dsub>
 8006b7c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006b80:	e9c4 0100 	strd	r0, r1, [r4]
 8006b84:	e69e      	b.n	80068c4 <__ieee754_rem_pio2+0x24>
 8006b86:	bf00      	nop
 8006b88:	54400000 	.word	0x54400000
 8006b8c:	3ff921fb 	.word	0x3ff921fb
 8006b90:	1a626331 	.word	0x1a626331
 8006b94:	3dd0b461 	.word	0x3dd0b461
 8006b98:	1a600000 	.word	0x1a600000
 8006b9c:	3dd0b461 	.word	0x3dd0b461
 8006ba0:	2e037073 	.word	0x2e037073
 8006ba4:	3ba3198a 	.word	0x3ba3198a
 8006ba8:	6dc9c883 	.word	0x6dc9c883
 8006bac:	3fe45f30 	.word	0x3fe45f30
 8006bb0:	2e000000 	.word	0x2e000000
 8006bb4:	3ba3198a 	.word	0x3ba3198a
 8006bb8:	252049c1 	.word	0x252049c1
 8006bbc:	397b839a 	.word	0x397b839a
 8006bc0:	3fe921fb 	.word	0x3fe921fb
 8006bc4:	4002d97b 	.word	0x4002d97b
 8006bc8:	3ff921fb 	.word	0x3ff921fb
 8006bcc:	413921fb 	.word	0x413921fb
 8006bd0:	3fe00000 	.word	0x3fe00000
 8006bd4:	08007598 	.word	0x08007598
 8006bd8:	7fefffff 	.word	0x7fefffff
 8006bdc:	ea4f 5528 	mov.w	r5, r8, asr #20
 8006be0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8006be4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8006be8:	4630      	mov	r0, r6
 8006bea:	460f      	mov	r7, r1
 8006bec:	f7f9 ff6a 	bl	8000ac4 <__aeabi_d2iz>
 8006bf0:	f7f9 fc64 	bl	80004bc <__aeabi_i2d>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	460b      	mov	r3, r1
 8006bf8:	4630      	mov	r0, r6
 8006bfa:	4639      	mov	r1, r7
 8006bfc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006c00:	f7f9 fb0e 	bl	8000220 <__aeabi_dsub>
 8006c04:	4b22      	ldr	r3, [pc, #136]	@ (8006c90 <__ieee754_rem_pio2+0x3f0>)
 8006c06:	2200      	movs	r2, #0
 8006c08:	f7f9 fcc2 	bl	8000590 <__aeabi_dmul>
 8006c0c:	460f      	mov	r7, r1
 8006c0e:	4606      	mov	r6, r0
 8006c10:	f7f9 ff58 	bl	8000ac4 <__aeabi_d2iz>
 8006c14:	f7f9 fc52 	bl	80004bc <__aeabi_i2d>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	460b      	mov	r3, r1
 8006c1c:	4630      	mov	r0, r6
 8006c1e:	4639      	mov	r1, r7
 8006c20:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006c24:	f7f9 fafc 	bl	8000220 <__aeabi_dsub>
 8006c28:	4b19      	ldr	r3, [pc, #100]	@ (8006c90 <__ieee754_rem_pio2+0x3f0>)
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f7f9 fcb0 	bl	8000590 <__aeabi_dmul>
 8006c30:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8006c34:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8006c38:	f04f 0803 	mov.w	r8, #3
 8006c3c:	2600      	movs	r6, #0
 8006c3e:	2700      	movs	r7, #0
 8006c40:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8006c44:	4632      	mov	r2, r6
 8006c46:	463b      	mov	r3, r7
 8006c48:	46c2      	mov	sl, r8
 8006c4a:	f108 38ff 	add.w	r8, r8, #4294967295
 8006c4e:	f7f9 ff07 	bl	8000a60 <__aeabi_dcmpeq>
 8006c52:	2800      	cmp	r0, #0
 8006c54:	d1f4      	bne.n	8006c40 <__ieee754_rem_pio2+0x3a0>
 8006c56:	4b0f      	ldr	r3, [pc, #60]	@ (8006c94 <__ieee754_rem_pio2+0x3f4>)
 8006c58:	9301      	str	r3, [sp, #4]
 8006c5a:	2302      	movs	r3, #2
 8006c5c:	9300      	str	r3, [sp, #0]
 8006c5e:	462a      	mov	r2, r5
 8006c60:	4653      	mov	r3, sl
 8006c62:	4621      	mov	r1, r4
 8006c64:	a806      	add	r0, sp, #24
 8006c66:	f000 f81f 	bl	8006ca8 <__kernel_rem_pio2>
 8006c6a:	9b04      	ldr	r3, [sp, #16]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	4605      	mov	r5, r0
 8006c70:	f6bf ae53 	bge.w	800691a <__ieee754_rem_pio2+0x7a>
 8006c74:	e9d4 2100 	ldrd	r2, r1, [r4]
 8006c78:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006c7c:	e9c4 2300 	strd	r2, r3, [r4]
 8006c80:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8006c84:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006c88:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8006c8c:	e740      	b.n	8006b10 <__ieee754_rem_pio2+0x270>
 8006c8e:	bf00      	nop
 8006c90:	41700000 	.word	0x41700000
 8006c94:	08007618 	.word	0x08007618

08006c98 <fabs>:
 8006c98:	ec51 0b10 	vmov	r0, r1, d0
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006ca2:	ec43 2b10 	vmov	d0, r2, r3
 8006ca6:	4770      	bx	lr

08006ca8 <__kernel_rem_pio2>:
 8006ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cac:	ed2d 8b02 	vpush	{d8}
 8006cb0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8006cb4:	f112 0f14 	cmn.w	r2, #20
 8006cb8:	9306      	str	r3, [sp, #24]
 8006cba:	9104      	str	r1, [sp, #16]
 8006cbc:	4bbe      	ldr	r3, [pc, #760]	@ (8006fb8 <__kernel_rem_pio2+0x310>)
 8006cbe:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8006cc0:	9008      	str	r0, [sp, #32]
 8006cc2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006cc6:	9300      	str	r3, [sp, #0]
 8006cc8:	9b06      	ldr	r3, [sp, #24]
 8006cca:	f103 33ff 	add.w	r3, r3, #4294967295
 8006cce:	bfa8      	it	ge
 8006cd0:	1ed4      	subge	r4, r2, #3
 8006cd2:	9305      	str	r3, [sp, #20]
 8006cd4:	bfb2      	itee	lt
 8006cd6:	2400      	movlt	r4, #0
 8006cd8:	2318      	movge	r3, #24
 8006cda:	fb94 f4f3 	sdivge	r4, r4, r3
 8006cde:	f06f 0317 	mvn.w	r3, #23
 8006ce2:	fb04 3303 	mla	r3, r4, r3, r3
 8006ce6:	eb03 0b02 	add.w	fp, r3, r2
 8006cea:	9b00      	ldr	r3, [sp, #0]
 8006cec:	9a05      	ldr	r2, [sp, #20]
 8006cee:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8006fa8 <__kernel_rem_pio2+0x300>
 8006cf2:	eb03 0802 	add.w	r8, r3, r2
 8006cf6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8006cf8:	1aa7      	subs	r7, r4, r2
 8006cfa:	ae20      	add	r6, sp, #128	@ 0x80
 8006cfc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006d00:	2500      	movs	r5, #0
 8006d02:	4545      	cmp	r5, r8
 8006d04:	dd13      	ble.n	8006d2e <__kernel_rem_pio2+0x86>
 8006d06:	9b06      	ldr	r3, [sp, #24]
 8006d08:	aa20      	add	r2, sp, #128	@ 0x80
 8006d0a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8006d0e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8006d12:	f04f 0800 	mov.w	r8, #0
 8006d16:	9b00      	ldr	r3, [sp, #0]
 8006d18:	4598      	cmp	r8, r3
 8006d1a:	dc31      	bgt.n	8006d80 <__kernel_rem_pio2+0xd8>
 8006d1c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8006fa8 <__kernel_rem_pio2+0x300>
 8006d20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006d24:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006d28:	462f      	mov	r7, r5
 8006d2a:	2600      	movs	r6, #0
 8006d2c:	e01b      	b.n	8006d66 <__kernel_rem_pio2+0xbe>
 8006d2e:	42ef      	cmn	r7, r5
 8006d30:	d407      	bmi.n	8006d42 <__kernel_rem_pio2+0x9a>
 8006d32:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006d36:	f7f9 fbc1 	bl	80004bc <__aeabi_i2d>
 8006d3a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006d3e:	3501      	adds	r5, #1
 8006d40:	e7df      	b.n	8006d02 <__kernel_rem_pio2+0x5a>
 8006d42:	ec51 0b18 	vmov	r0, r1, d8
 8006d46:	e7f8      	b.n	8006d3a <__kernel_rem_pio2+0x92>
 8006d48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d4c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006d50:	f7f9 fc1e 	bl	8000590 <__aeabi_dmul>
 8006d54:	4602      	mov	r2, r0
 8006d56:	460b      	mov	r3, r1
 8006d58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d5c:	f7f9 fa62 	bl	8000224 <__adddf3>
 8006d60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d64:	3601      	adds	r6, #1
 8006d66:	9b05      	ldr	r3, [sp, #20]
 8006d68:	429e      	cmp	r6, r3
 8006d6a:	f1a7 0708 	sub.w	r7, r7, #8
 8006d6e:	ddeb      	ble.n	8006d48 <__kernel_rem_pio2+0xa0>
 8006d70:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006d74:	f108 0801 	add.w	r8, r8, #1
 8006d78:	ecaa 7b02 	vstmia	sl!, {d7}
 8006d7c:	3508      	adds	r5, #8
 8006d7e:	e7ca      	b.n	8006d16 <__kernel_rem_pio2+0x6e>
 8006d80:	9b00      	ldr	r3, [sp, #0]
 8006d82:	f8dd 8000 	ldr.w	r8, [sp]
 8006d86:	aa0c      	add	r2, sp, #48	@ 0x30
 8006d88:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006d8c:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d8e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8006d90:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006d94:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d96:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8006d9a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d9c:	ab98      	add	r3, sp, #608	@ 0x260
 8006d9e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006da2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8006da6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006daa:	ac0c      	add	r4, sp, #48	@ 0x30
 8006dac:	ab70      	add	r3, sp, #448	@ 0x1c0
 8006dae:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8006db2:	46a1      	mov	r9, r4
 8006db4:	46c2      	mov	sl, r8
 8006db6:	f1ba 0f00 	cmp.w	sl, #0
 8006dba:	f1a5 0508 	sub.w	r5, r5, #8
 8006dbe:	dc77      	bgt.n	8006eb0 <__kernel_rem_pio2+0x208>
 8006dc0:	4658      	mov	r0, fp
 8006dc2:	ed9d 0b02 	vldr	d0, [sp, #8]
 8006dc6:	f000 fac7 	bl	8007358 <scalbn>
 8006dca:	ec57 6b10 	vmov	r6, r7, d0
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8006dd4:	4630      	mov	r0, r6
 8006dd6:	4639      	mov	r1, r7
 8006dd8:	f7f9 fbda 	bl	8000590 <__aeabi_dmul>
 8006ddc:	ec41 0b10 	vmov	d0, r0, r1
 8006de0:	f000 fb3a 	bl	8007458 <floor>
 8006de4:	4b75      	ldr	r3, [pc, #468]	@ (8006fbc <__kernel_rem_pio2+0x314>)
 8006de6:	ec51 0b10 	vmov	r0, r1, d0
 8006dea:	2200      	movs	r2, #0
 8006dec:	f7f9 fbd0 	bl	8000590 <__aeabi_dmul>
 8006df0:	4602      	mov	r2, r0
 8006df2:	460b      	mov	r3, r1
 8006df4:	4630      	mov	r0, r6
 8006df6:	4639      	mov	r1, r7
 8006df8:	f7f9 fa12 	bl	8000220 <__aeabi_dsub>
 8006dfc:	460f      	mov	r7, r1
 8006dfe:	4606      	mov	r6, r0
 8006e00:	f7f9 fe60 	bl	8000ac4 <__aeabi_d2iz>
 8006e04:	9002      	str	r0, [sp, #8]
 8006e06:	f7f9 fb59 	bl	80004bc <__aeabi_i2d>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	4630      	mov	r0, r6
 8006e10:	4639      	mov	r1, r7
 8006e12:	f7f9 fa05 	bl	8000220 <__aeabi_dsub>
 8006e16:	f1bb 0f00 	cmp.w	fp, #0
 8006e1a:	4606      	mov	r6, r0
 8006e1c:	460f      	mov	r7, r1
 8006e1e:	dd6c      	ble.n	8006efa <__kernel_rem_pio2+0x252>
 8006e20:	f108 31ff 	add.w	r1, r8, #4294967295
 8006e24:	ab0c      	add	r3, sp, #48	@ 0x30
 8006e26:	9d02      	ldr	r5, [sp, #8]
 8006e28:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006e2c:	f1cb 0018 	rsb	r0, fp, #24
 8006e30:	fa43 f200 	asr.w	r2, r3, r0
 8006e34:	4415      	add	r5, r2
 8006e36:	4082      	lsls	r2, r0
 8006e38:	1a9b      	subs	r3, r3, r2
 8006e3a:	aa0c      	add	r2, sp, #48	@ 0x30
 8006e3c:	9502      	str	r5, [sp, #8]
 8006e3e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8006e42:	f1cb 0217 	rsb	r2, fp, #23
 8006e46:	fa43 f902 	asr.w	r9, r3, r2
 8006e4a:	f1b9 0f00 	cmp.w	r9, #0
 8006e4e:	dd64      	ble.n	8006f1a <__kernel_rem_pio2+0x272>
 8006e50:	9b02      	ldr	r3, [sp, #8]
 8006e52:	2200      	movs	r2, #0
 8006e54:	3301      	adds	r3, #1
 8006e56:	9302      	str	r3, [sp, #8]
 8006e58:	4615      	mov	r5, r2
 8006e5a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8006e5e:	4590      	cmp	r8, r2
 8006e60:	f300 80b8 	bgt.w	8006fd4 <__kernel_rem_pio2+0x32c>
 8006e64:	f1bb 0f00 	cmp.w	fp, #0
 8006e68:	dd07      	ble.n	8006e7a <__kernel_rem_pio2+0x1d2>
 8006e6a:	f1bb 0f01 	cmp.w	fp, #1
 8006e6e:	f000 80bf 	beq.w	8006ff0 <__kernel_rem_pio2+0x348>
 8006e72:	f1bb 0f02 	cmp.w	fp, #2
 8006e76:	f000 80c6 	beq.w	8007006 <__kernel_rem_pio2+0x35e>
 8006e7a:	f1b9 0f02 	cmp.w	r9, #2
 8006e7e:	d14c      	bne.n	8006f1a <__kernel_rem_pio2+0x272>
 8006e80:	4632      	mov	r2, r6
 8006e82:	463b      	mov	r3, r7
 8006e84:	494e      	ldr	r1, [pc, #312]	@ (8006fc0 <__kernel_rem_pio2+0x318>)
 8006e86:	2000      	movs	r0, #0
 8006e88:	f7f9 f9ca 	bl	8000220 <__aeabi_dsub>
 8006e8c:	4606      	mov	r6, r0
 8006e8e:	460f      	mov	r7, r1
 8006e90:	2d00      	cmp	r5, #0
 8006e92:	d042      	beq.n	8006f1a <__kernel_rem_pio2+0x272>
 8006e94:	4658      	mov	r0, fp
 8006e96:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8006fb0 <__kernel_rem_pio2+0x308>
 8006e9a:	f000 fa5d 	bl	8007358 <scalbn>
 8006e9e:	4630      	mov	r0, r6
 8006ea0:	4639      	mov	r1, r7
 8006ea2:	ec53 2b10 	vmov	r2, r3, d0
 8006ea6:	f7f9 f9bb 	bl	8000220 <__aeabi_dsub>
 8006eaa:	4606      	mov	r6, r0
 8006eac:	460f      	mov	r7, r1
 8006eae:	e034      	b.n	8006f1a <__kernel_rem_pio2+0x272>
 8006eb0:	4b44      	ldr	r3, [pc, #272]	@ (8006fc4 <__kernel_rem_pio2+0x31c>)
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006eb8:	f7f9 fb6a 	bl	8000590 <__aeabi_dmul>
 8006ebc:	f7f9 fe02 	bl	8000ac4 <__aeabi_d2iz>
 8006ec0:	f7f9 fafc 	bl	80004bc <__aeabi_i2d>
 8006ec4:	4b40      	ldr	r3, [pc, #256]	@ (8006fc8 <__kernel_rem_pio2+0x320>)
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	4606      	mov	r6, r0
 8006eca:	460f      	mov	r7, r1
 8006ecc:	f7f9 fb60 	bl	8000590 <__aeabi_dmul>
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	460b      	mov	r3, r1
 8006ed4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ed8:	f7f9 f9a2 	bl	8000220 <__aeabi_dsub>
 8006edc:	f7f9 fdf2 	bl	8000ac4 <__aeabi_d2iz>
 8006ee0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006ee4:	f849 0b04 	str.w	r0, [r9], #4
 8006ee8:	4639      	mov	r1, r7
 8006eea:	4630      	mov	r0, r6
 8006eec:	f7f9 f99a 	bl	8000224 <__adddf3>
 8006ef0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ef4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ef8:	e75d      	b.n	8006db6 <__kernel_rem_pio2+0x10e>
 8006efa:	d107      	bne.n	8006f0c <__kernel_rem_pio2+0x264>
 8006efc:	f108 33ff 	add.w	r3, r8, #4294967295
 8006f00:	aa0c      	add	r2, sp, #48	@ 0x30
 8006f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f06:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8006f0a:	e79e      	b.n	8006e4a <__kernel_rem_pio2+0x1a2>
 8006f0c:	4b2f      	ldr	r3, [pc, #188]	@ (8006fcc <__kernel_rem_pio2+0x324>)
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f7f9 fdc4 	bl	8000a9c <__aeabi_dcmpge>
 8006f14:	2800      	cmp	r0, #0
 8006f16:	d143      	bne.n	8006fa0 <__kernel_rem_pio2+0x2f8>
 8006f18:	4681      	mov	r9, r0
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	4630      	mov	r0, r6
 8006f20:	4639      	mov	r1, r7
 8006f22:	f7f9 fd9d 	bl	8000a60 <__aeabi_dcmpeq>
 8006f26:	2800      	cmp	r0, #0
 8006f28:	f000 80bf 	beq.w	80070aa <__kernel_rem_pio2+0x402>
 8006f2c:	f108 33ff 	add.w	r3, r8, #4294967295
 8006f30:	2200      	movs	r2, #0
 8006f32:	9900      	ldr	r1, [sp, #0]
 8006f34:	428b      	cmp	r3, r1
 8006f36:	da6e      	bge.n	8007016 <__kernel_rem_pio2+0x36e>
 8006f38:	2a00      	cmp	r2, #0
 8006f3a:	f000 8089 	beq.w	8007050 <__kernel_rem_pio2+0x3a8>
 8006f3e:	f108 38ff 	add.w	r8, r8, #4294967295
 8006f42:	ab0c      	add	r3, sp, #48	@ 0x30
 8006f44:	f1ab 0b18 	sub.w	fp, fp, #24
 8006f48:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d0f6      	beq.n	8006f3e <__kernel_rem_pio2+0x296>
 8006f50:	4658      	mov	r0, fp
 8006f52:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8006fb0 <__kernel_rem_pio2+0x308>
 8006f56:	f000 f9ff 	bl	8007358 <scalbn>
 8006f5a:	f108 0301 	add.w	r3, r8, #1
 8006f5e:	00da      	lsls	r2, r3, #3
 8006f60:	9205      	str	r2, [sp, #20]
 8006f62:	ec55 4b10 	vmov	r4, r5, d0
 8006f66:	aa70      	add	r2, sp, #448	@ 0x1c0
 8006f68:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8006fc4 <__kernel_rem_pio2+0x31c>
 8006f6c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8006f70:	4646      	mov	r6, r8
 8006f72:	f04f 0a00 	mov.w	sl, #0
 8006f76:	2e00      	cmp	r6, #0
 8006f78:	f280 80cf 	bge.w	800711a <__kernel_rem_pio2+0x472>
 8006f7c:	4644      	mov	r4, r8
 8006f7e:	2c00      	cmp	r4, #0
 8006f80:	f2c0 80fd 	blt.w	800717e <__kernel_rem_pio2+0x4d6>
 8006f84:	4b12      	ldr	r3, [pc, #72]	@ (8006fd0 <__kernel_rem_pio2+0x328>)
 8006f86:	461f      	mov	r7, r3
 8006f88:	ab70      	add	r3, sp, #448	@ 0x1c0
 8006f8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006f8e:	9306      	str	r3, [sp, #24]
 8006f90:	f04f 0a00 	mov.w	sl, #0
 8006f94:	f04f 0b00 	mov.w	fp, #0
 8006f98:	2600      	movs	r6, #0
 8006f9a:	eba8 0504 	sub.w	r5, r8, r4
 8006f9e:	e0e2      	b.n	8007166 <__kernel_rem_pio2+0x4be>
 8006fa0:	f04f 0902 	mov.w	r9, #2
 8006fa4:	e754      	b.n	8006e50 <__kernel_rem_pio2+0x1a8>
 8006fa6:	bf00      	nop
	...
 8006fb4:	3ff00000 	.word	0x3ff00000
 8006fb8:	08007760 	.word	0x08007760
 8006fbc:	40200000 	.word	0x40200000
 8006fc0:	3ff00000 	.word	0x3ff00000
 8006fc4:	3e700000 	.word	0x3e700000
 8006fc8:	41700000 	.word	0x41700000
 8006fcc:	3fe00000 	.word	0x3fe00000
 8006fd0:	08007720 	.word	0x08007720
 8006fd4:	f854 3b04 	ldr.w	r3, [r4], #4
 8006fd8:	b945      	cbnz	r5, 8006fec <__kernel_rem_pio2+0x344>
 8006fda:	b123      	cbz	r3, 8006fe6 <__kernel_rem_pio2+0x33e>
 8006fdc:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8006fe0:	f844 3c04 	str.w	r3, [r4, #-4]
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	3201      	adds	r2, #1
 8006fe8:	461d      	mov	r5, r3
 8006fea:	e738      	b.n	8006e5e <__kernel_rem_pio2+0x1b6>
 8006fec:	1acb      	subs	r3, r1, r3
 8006fee:	e7f7      	b.n	8006fe0 <__kernel_rem_pio2+0x338>
 8006ff0:	f108 32ff 	add.w	r2, r8, #4294967295
 8006ff4:	ab0c      	add	r3, sp, #48	@ 0x30
 8006ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ffa:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006ffe:	a90c      	add	r1, sp, #48	@ 0x30
 8007000:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007004:	e739      	b.n	8006e7a <__kernel_rem_pio2+0x1d2>
 8007006:	f108 32ff 	add.w	r2, r8, #4294967295
 800700a:	ab0c      	add	r3, sp, #48	@ 0x30
 800700c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007010:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007014:	e7f3      	b.n	8006ffe <__kernel_rem_pio2+0x356>
 8007016:	a90c      	add	r1, sp, #48	@ 0x30
 8007018:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800701c:	3b01      	subs	r3, #1
 800701e:	430a      	orrs	r2, r1
 8007020:	e787      	b.n	8006f32 <__kernel_rem_pio2+0x28a>
 8007022:	3401      	adds	r4, #1
 8007024:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007028:	2a00      	cmp	r2, #0
 800702a:	d0fa      	beq.n	8007022 <__kernel_rem_pio2+0x37a>
 800702c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800702e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007032:	eb0d 0503 	add.w	r5, sp, r3
 8007036:	9b06      	ldr	r3, [sp, #24]
 8007038:	aa20      	add	r2, sp, #128	@ 0x80
 800703a:	4443      	add	r3, r8
 800703c:	f108 0701 	add.w	r7, r8, #1
 8007040:	3d98      	subs	r5, #152	@ 0x98
 8007042:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8007046:	4444      	add	r4, r8
 8007048:	42bc      	cmp	r4, r7
 800704a:	da04      	bge.n	8007056 <__kernel_rem_pio2+0x3ae>
 800704c:	46a0      	mov	r8, r4
 800704e:	e6a2      	b.n	8006d96 <__kernel_rem_pio2+0xee>
 8007050:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007052:	2401      	movs	r4, #1
 8007054:	e7e6      	b.n	8007024 <__kernel_rem_pio2+0x37c>
 8007056:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007058:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800705c:	f7f9 fa2e 	bl	80004bc <__aeabi_i2d>
 8007060:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8007328 <__kernel_rem_pio2+0x680>
 8007064:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007068:	ed8d 7b02 	vstr	d7, [sp, #8]
 800706c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007070:	46b2      	mov	sl, r6
 8007072:	f04f 0800 	mov.w	r8, #0
 8007076:	9b05      	ldr	r3, [sp, #20]
 8007078:	4598      	cmp	r8, r3
 800707a:	dd05      	ble.n	8007088 <__kernel_rem_pio2+0x3e0>
 800707c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007080:	3701      	adds	r7, #1
 8007082:	eca5 7b02 	vstmia	r5!, {d7}
 8007086:	e7df      	b.n	8007048 <__kernel_rem_pio2+0x3a0>
 8007088:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800708c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007090:	f7f9 fa7e 	bl	8000590 <__aeabi_dmul>
 8007094:	4602      	mov	r2, r0
 8007096:	460b      	mov	r3, r1
 8007098:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800709c:	f7f9 f8c2 	bl	8000224 <__adddf3>
 80070a0:	f108 0801 	add.w	r8, r8, #1
 80070a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070a8:	e7e5      	b.n	8007076 <__kernel_rem_pio2+0x3ce>
 80070aa:	f1cb 0000 	rsb	r0, fp, #0
 80070ae:	ec47 6b10 	vmov	d0, r6, r7
 80070b2:	f000 f951 	bl	8007358 <scalbn>
 80070b6:	ec55 4b10 	vmov	r4, r5, d0
 80070ba:	4b9d      	ldr	r3, [pc, #628]	@ (8007330 <__kernel_rem_pio2+0x688>)
 80070bc:	2200      	movs	r2, #0
 80070be:	4620      	mov	r0, r4
 80070c0:	4629      	mov	r1, r5
 80070c2:	f7f9 fceb 	bl	8000a9c <__aeabi_dcmpge>
 80070c6:	b300      	cbz	r0, 800710a <__kernel_rem_pio2+0x462>
 80070c8:	4b9a      	ldr	r3, [pc, #616]	@ (8007334 <__kernel_rem_pio2+0x68c>)
 80070ca:	2200      	movs	r2, #0
 80070cc:	4620      	mov	r0, r4
 80070ce:	4629      	mov	r1, r5
 80070d0:	f7f9 fa5e 	bl	8000590 <__aeabi_dmul>
 80070d4:	f7f9 fcf6 	bl	8000ac4 <__aeabi_d2iz>
 80070d8:	4606      	mov	r6, r0
 80070da:	f7f9 f9ef 	bl	80004bc <__aeabi_i2d>
 80070de:	4b94      	ldr	r3, [pc, #592]	@ (8007330 <__kernel_rem_pio2+0x688>)
 80070e0:	2200      	movs	r2, #0
 80070e2:	f7f9 fa55 	bl	8000590 <__aeabi_dmul>
 80070e6:	460b      	mov	r3, r1
 80070e8:	4602      	mov	r2, r0
 80070ea:	4629      	mov	r1, r5
 80070ec:	4620      	mov	r0, r4
 80070ee:	f7f9 f897 	bl	8000220 <__aeabi_dsub>
 80070f2:	f7f9 fce7 	bl	8000ac4 <__aeabi_d2iz>
 80070f6:	ab0c      	add	r3, sp, #48	@ 0x30
 80070f8:	f10b 0b18 	add.w	fp, fp, #24
 80070fc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8007100:	f108 0801 	add.w	r8, r8, #1
 8007104:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8007108:	e722      	b.n	8006f50 <__kernel_rem_pio2+0x2a8>
 800710a:	4620      	mov	r0, r4
 800710c:	4629      	mov	r1, r5
 800710e:	f7f9 fcd9 	bl	8000ac4 <__aeabi_d2iz>
 8007112:	ab0c      	add	r3, sp, #48	@ 0x30
 8007114:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8007118:	e71a      	b.n	8006f50 <__kernel_rem_pio2+0x2a8>
 800711a:	ab0c      	add	r3, sp, #48	@ 0x30
 800711c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007120:	f7f9 f9cc 	bl	80004bc <__aeabi_i2d>
 8007124:	4622      	mov	r2, r4
 8007126:	462b      	mov	r3, r5
 8007128:	f7f9 fa32 	bl	8000590 <__aeabi_dmul>
 800712c:	4652      	mov	r2, sl
 800712e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8007132:	465b      	mov	r3, fp
 8007134:	4620      	mov	r0, r4
 8007136:	4629      	mov	r1, r5
 8007138:	f7f9 fa2a 	bl	8000590 <__aeabi_dmul>
 800713c:	3e01      	subs	r6, #1
 800713e:	4604      	mov	r4, r0
 8007140:	460d      	mov	r5, r1
 8007142:	e718      	b.n	8006f76 <__kernel_rem_pio2+0x2ce>
 8007144:	9906      	ldr	r1, [sp, #24]
 8007146:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800714a:	9106      	str	r1, [sp, #24]
 800714c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8007150:	f7f9 fa1e 	bl	8000590 <__aeabi_dmul>
 8007154:	4602      	mov	r2, r0
 8007156:	460b      	mov	r3, r1
 8007158:	4650      	mov	r0, sl
 800715a:	4659      	mov	r1, fp
 800715c:	f7f9 f862 	bl	8000224 <__adddf3>
 8007160:	3601      	adds	r6, #1
 8007162:	4682      	mov	sl, r0
 8007164:	468b      	mov	fp, r1
 8007166:	9b00      	ldr	r3, [sp, #0]
 8007168:	429e      	cmp	r6, r3
 800716a:	dc01      	bgt.n	8007170 <__kernel_rem_pio2+0x4c8>
 800716c:	42b5      	cmp	r5, r6
 800716e:	dae9      	bge.n	8007144 <__kernel_rem_pio2+0x49c>
 8007170:	ab48      	add	r3, sp, #288	@ 0x120
 8007172:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007176:	e9c5 ab00 	strd	sl, fp, [r5]
 800717a:	3c01      	subs	r4, #1
 800717c:	e6ff      	b.n	8006f7e <__kernel_rem_pio2+0x2d6>
 800717e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8007180:	2b02      	cmp	r3, #2
 8007182:	dc0b      	bgt.n	800719c <__kernel_rem_pio2+0x4f4>
 8007184:	2b00      	cmp	r3, #0
 8007186:	dc39      	bgt.n	80071fc <__kernel_rem_pio2+0x554>
 8007188:	d05d      	beq.n	8007246 <__kernel_rem_pio2+0x59e>
 800718a:	9b02      	ldr	r3, [sp, #8]
 800718c:	f003 0007 	and.w	r0, r3, #7
 8007190:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8007194:	ecbd 8b02 	vpop	{d8}
 8007198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800719c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800719e:	2b03      	cmp	r3, #3
 80071a0:	d1f3      	bne.n	800718a <__kernel_rem_pio2+0x4e2>
 80071a2:	9b05      	ldr	r3, [sp, #20]
 80071a4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80071a8:	eb0d 0403 	add.w	r4, sp, r3
 80071ac:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80071b0:	4625      	mov	r5, r4
 80071b2:	46c2      	mov	sl, r8
 80071b4:	f1ba 0f00 	cmp.w	sl, #0
 80071b8:	f1a5 0508 	sub.w	r5, r5, #8
 80071bc:	dc6b      	bgt.n	8007296 <__kernel_rem_pio2+0x5ee>
 80071be:	4645      	mov	r5, r8
 80071c0:	2d01      	cmp	r5, #1
 80071c2:	f1a4 0408 	sub.w	r4, r4, #8
 80071c6:	f300 8087 	bgt.w	80072d8 <__kernel_rem_pio2+0x630>
 80071ca:	9c05      	ldr	r4, [sp, #20]
 80071cc:	ab48      	add	r3, sp, #288	@ 0x120
 80071ce:	441c      	add	r4, r3
 80071d0:	2000      	movs	r0, #0
 80071d2:	2100      	movs	r1, #0
 80071d4:	f1b8 0f01 	cmp.w	r8, #1
 80071d8:	f300 809c 	bgt.w	8007314 <__kernel_rem_pio2+0x66c>
 80071dc:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 80071e0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 80071e4:	f1b9 0f00 	cmp.w	r9, #0
 80071e8:	f040 80a6 	bne.w	8007338 <__kernel_rem_pio2+0x690>
 80071ec:	9b04      	ldr	r3, [sp, #16]
 80071ee:	e9c3 7800 	strd	r7, r8, [r3]
 80071f2:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80071f6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80071fa:	e7c6      	b.n	800718a <__kernel_rem_pio2+0x4e2>
 80071fc:	9d05      	ldr	r5, [sp, #20]
 80071fe:	ab48      	add	r3, sp, #288	@ 0x120
 8007200:	441d      	add	r5, r3
 8007202:	4644      	mov	r4, r8
 8007204:	2000      	movs	r0, #0
 8007206:	2100      	movs	r1, #0
 8007208:	2c00      	cmp	r4, #0
 800720a:	da35      	bge.n	8007278 <__kernel_rem_pio2+0x5d0>
 800720c:	f1b9 0f00 	cmp.w	r9, #0
 8007210:	d038      	beq.n	8007284 <__kernel_rem_pio2+0x5dc>
 8007212:	4602      	mov	r2, r0
 8007214:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007218:	9c04      	ldr	r4, [sp, #16]
 800721a:	e9c4 2300 	strd	r2, r3, [r4]
 800721e:	4602      	mov	r2, r0
 8007220:	460b      	mov	r3, r1
 8007222:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8007226:	f7f8 fffb 	bl	8000220 <__aeabi_dsub>
 800722a:	ad4a      	add	r5, sp, #296	@ 0x128
 800722c:	2401      	movs	r4, #1
 800722e:	45a0      	cmp	r8, r4
 8007230:	da2b      	bge.n	800728a <__kernel_rem_pio2+0x5e2>
 8007232:	f1b9 0f00 	cmp.w	r9, #0
 8007236:	d002      	beq.n	800723e <__kernel_rem_pio2+0x596>
 8007238:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800723c:	4619      	mov	r1, r3
 800723e:	9b04      	ldr	r3, [sp, #16]
 8007240:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007244:	e7a1      	b.n	800718a <__kernel_rem_pio2+0x4e2>
 8007246:	9c05      	ldr	r4, [sp, #20]
 8007248:	ab48      	add	r3, sp, #288	@ 0x120
 800724a:	441c      	add	r4, r3
 800724c:	2000      	movs	r0, #0
 800724e:	2100      	movs	r1, #0
 8007250:	f1b8 0f00 	cmp.w	r8, #0
 8007254:	da09      	bge.n	800726a <__kernel_rem_pio2+0x5c2>
 8007256:	f1b9 0f00 	cmp.w	r9, #0
 800725a:	d002      	beq.n	8007262 <__kernel_rem_pio2+0x5ba>
 800725c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007260:	4619      	mov	r1, r3
 8007262:	9b04      	ldr	r3, [sp, #16]
 8007264:	e9c3 0100 	strd	r0, r1, [r3]
 8007268:	e78f      	b.n	800718a <__kernel_rem_pio2+0x4e2>
 800726a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800726e:	f7f8 ffd9 	bl	8000224 <__adddf3>
 8007272:	f108 38ff 	add.w	r8, r8, #4294967295
 8007276:	e7eb      	b.n	8007250 <__kernel_rem_pio2+0x5a8>
 8007278:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800727c:	f7f8 ffd2 	bl	8000224 <__adddf3>
 8007280:	3c01      	subs	r4, #1
 8007282:	e7c1      	b.n	8007208 <__kernel_rem_pio2+0x560>
 8007284:	4602      	mov	r2, r0
 8007286:	460b      	mov	r3, r1
 8007288:	e7c6      	b.n	8007218 <__kernel_rem_pio2+0x570>
 800728a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800728e:	f7f8 ffc9 	bl	8000224 <__adddf3>
 8007292:	3401      	adds	r4, #1
 8007294:	e7cb      	b.n	800722e <__kernel_rem_pio2+0x586>
 8007296:	ed95 7b00 	vldr	d7, [r5]
 800729a:	ed8d 7b00 	vstr	d7, [sp]
 800729e:	ed95 7b02 	vldr	d7, [r5, #8]
 80072a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80072a6:	ec53 2b17 	vmov	r2, r3, d7
 80072aa:	ed8d 7b06 	vstr	d7, [sp, #24]
 80072ae:	f7f8 ffb9 	bl	8000224 <__adddf3>
 80072b2:	4602      	mov	r2, r0
 80072b4:	460b      	mov	r3, r1
 80072b6:	4606      	mov	r6, r0
 80072b8:	460f      	mov	r7, r1
 80072ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80072be:	f7f8 ffaf 	bl	8000220 <__aeabi_dsub>
 80072c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80072c6:	f7f8 ffad 	bl	8000224 <__adddf3>
 80072ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80072ce:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80072d2:	e9c5 6700 	strd	r6, r7, [r5]
 80072d6:	e76d      	b.n	80071b4 <__kernel_rem_pio2+0x50c>
 80072d8:	ed94 7b00 	vldr	d7, [r4]
 80072dc:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 80072e0:	ec51 0b17 	vmov	r0, r1, d7
 80072e4:	4652      	mov	r2, sl
 80072e6:	465b      	mov	r3, fp
 80072e8:	ed8d 7b00 	vstr	d7, [sp]
 80072ec:	f7f8 ff9a 	bl	8000224 <__adddf3>
 80072f0:	4602      	mov	r2, r0
 80072f2:	460b      	mov	r3, r1
 80072f4:	4606      	mov	r6, r0
 80072f6:	460f      	mov	r7, r1
 80072f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80072fc:	f7f8 ff90 	bl	8000220 <__aeabi_dsub>
 8007300:	4652      	mov	r2, sl
 8007302:	465b      	mov	r3, fp
 8007304:	f7f8 ff8e 	bl	8000224 <__adddf3>
 8007308:	3d01      	subs	r5, #1
 800730a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800730e:	e9c4 6700 	strd	r6, r7, [r4]
 8007312:	e755      	b.n	80071c0 <__kernel_rem_pio2+0x518>
 8007314:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007318:	f7f8 ff84 	bl	8000224 <__adddf3>
 800731c:	f108 38ff 	add.w	r8, r8, #4294967295
 8007320:	e758      	b.n	80071d4 <__kernel_rem_pio2+0x52c>
 8007322:	bf00      	nop
 8007324:	f3af 8000 	nop.w
	...
 8007330:	41700000 	.word	0x41700000
 8007334:	3e700000 	.word	0x3e700000
 8007338:	9b04      	ldr	r3, [sp, #16]
 800733a:	9a04      	ldr	r2, [sp, #16]
 800733c:	601f      	str	r7, [r3, #0]
 800733e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8007342:	605c      	str	r4, [r3, #4]
 8007344:	609d      	str	r5, [r3, #8]
 8007346:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800734a:	60d3      	str	r3, [r2, #12]
 800734c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007350:	6110      	str	r0, [r2, #16]
 8007352:	6153      	str	r3, [r2, #20]
 8007354:	e719      	b.n	800718a <__kernel_rem_pio2+0x4e2>
 8007356:	bf00      	nop

08007358 <scalbn>:
 8007358:	b570      	push	{r4, r5, r6, lr}
 800735a:	ec55 4b10 	vmov	r4, r5, d0
 800735e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8007362:	4606      	mov	r6, r0
 8007364:	462b      	mov	r3, r5
 8007366:	b991      	cbnz	r1, 800738e <scalbn+0x36>
 8007368:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800736c:	4323      	orrs	r3, r4
 800736e:	d03d      	beq.n	80073ec <scalbn+0x94>
 8007370:	4b35      	ldr	r3, [pc, #212]	@ (8007448 <scalbn+0xf0>)
 8007372:	4620      	mov	r0, r4
 8007374:	4629      	mov	r1, r5
 8007376:	2200      	movs	r2, #0
 8007378:	f7f9 f90a 	bl	8000590 <__aeabi_dmul>
 800737c:	4b33      	ldr	r3, [pc, #204]	@ (800744c <scalbn+0xf4>)
 800737e:	429e      	cmp	r6, r3
 8007380:	4604      	mov	r4, r0
 8007382:	460d      	mov	r5, r1
 8007384:	da0f      	bge.n	80073a6 <scalbn+0x4e>
 8007386:	a328      	add	r3, pc, #160	@ (adr r3, 8007428 <scalbn+0xd0>)
 8007388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800738c:	e01e      	b.n	80073cc <scalbn+0x74>
 800738e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8007392:	4291      	cmp	r1, r2
 8007394:	d10b      	bne.n	80073ae <scalbn+0x56>
 8007396:	4622      	mov	r2, r4
 8007398:	4620      	mov	r0, r4
 800739a:	4629      	mov	r1, r5
 800739c:	f7f8 ff42 	bl	8000224 <__adddf3>
 80073a0:	4604      	mov	r4, r0
 80073a2:	460d      	mov	r5, r1
 80073a4:	e022      	b.n	80073ec <scalbn+0x94>
 80073a6:	460b      	mov	r3, r1
 80073a8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80073ac:	3936      	subs	r1, #54	@ 0x36
 80073ae:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80073b2:	4296      	cmp	r6, r2
 80073b4:	dd0d      	ble.n	80073d2 <scalbn+0x7a>
 80073b6:	2d00      	cmp	r5, #0
 80073b8:	a11d      	add	r1, pc, #116	@ (adr r1, 8007430 <scalbn+0xd8>)
 80073ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073be:	da02      	bge.n	80073c6 <scalbn+0x6e>
 80073c0:	a11d      	add	r1, pc, #116	@ (adr r1, 8007438 <scalbn+0xe0>)
 80073c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073c6:	a31a      	add	r3, pc, #104	@ (adr r3, 8007430 <scalbn+0xd8>)
 80073c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073cc:	f7f9 f8e0 	bl	8000590 <__aeabi_dmul>
 80073d0:	e7e6      	b.n	80073a0 <scalbn+0x48>
 80073d2:	1872      	adds	r2, r6, r1
 80073d4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80073d8:	428a      	cmp	r2, r1
 80073da:	dcec      	bgt.n	80073b6 <scalbn+0x5e>
 80073dc:	2a00      	cmp	r2, #0
 80073de:	dd08      	ble.n	80073f2 <scalbn+0x9a>
 80073e0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80073e4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80073e8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80073ec:	ec45 4b10 	vmov	d0, r4, r5
 80073f0:	bd70      	pop	{r4, r5, r6, pc}
 80073f2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80073f6:	da08      	bge.n	800740a <scalbn+0xb2>
 80073f8:	2d00      	cmp	r5, #0
 80073fa:	a10b      	add	r1, pc, #44	@ (adr r1, 8007428 <scalbn+0xd0>)
 80073fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007400:	dac1      	bge.n	8007386 <scalbn+0x2e>
 8007402:	a10f      	add	r1, pc, #60	@ (adr r1, 8007440 <scalbn+0xe8>)
 8007404:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007408:	e7bd      	b.n	8007386 <scalbn+0x2e>
 800740a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800740e:	3236      	adds	r2, #54	@ 0x36
 8007410:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007414:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007418:	4620      	mov	r0, r4
 800741a:	4b0d      	ldr	r3, [pc, #52]	@ (8007450 <scalbn+0xf8>)
 800741c:	4629      	mov	r1, r5
 800741e:	2200      	movs	r2, #0
 8007420:	e7d4      	b.n	80073cc <scalbn+0x74>
 8007422:	bf00      	nop
 8007424:	f3af 8000 	nop.w
 8007428:	c2f8f359 	.word	0xc2f8f359
 800742c:	01a56e1f 	.word	0x01a56e1f
 8007430:	8800759c 	.word	0x8800759c
 8007434:	7e37e43c 	.word	0x7e37e43c
 8007438:	8800759c 	.word	0x8800759c
 800743c:	fe37e43c 	.word	0xfe37e43c
 8007440:	c2f8f359 	.word	0xc2f8f359
 8007444:	81a56e1f 	.word	0x81a56e1f
 8007448:	43500000 	.word	0x43500000
 800744c:	ffff3cb0 	.word	0xffff3cb0
 8007450:	3c900000 	.word	0x3c900000
 8007454:	00000000 	.word	0x00000000

08007458 <floor>:
 8007458:	ec51 0b10 	vmov	r0, r1, d0
 800745c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007464:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8007468:	2e13      	cmp	r6, #19
 800746a:	460c      	mov	r4, r1
 800746c:	4605      	mov	r5, r0
 800746e:	4680      	mov	r8, r0
 8007470:	dc34      	bgt.n	80074dc <floor+0x84>
 8007472:	2e00      	cmp	r6, #0
 8007474:	da17      	bge.n	80074a6 <floor+0x4e>
 8007476:	a332      	add	r3, pc, #200	@ (adr r3, 8007540 <floor+0xe8>)
 8007478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800747c:	f7f8 fed2 	bl	8000224 <__adddf3>
 8007480:	2200      	movs	r2, #0
 8007482:	2300      	movs	r3, #0
 8007484:	f7f9 fb14 	bl	8000ab0 <__aeabi_dcmpgt>
 8007488:	b150      	cbz	r0, 80074a0 <floor+0x48>
 800748a:	2c00      	cmp	r4, #0
 800748c:	da55      	bge.n	800753a <floor+0xe2>
 800748e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8007492:	432c      	orrs	r4, r5
 8007494:	2500      	movs	r5, #0
 8007496:	42ac      	cmp	r4, r5
 8007498:	4c2b      	ldr	r4, [pc, #172]	@ (8007548 <floor+0xf0>)
 800749a:	bf08      	it	eq
 800749c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80074a0:	4621      	mov	r1, r4
 80074a2:	4628      	mov	r0, r5
 80074a4:	e023      	b.n	80074ee <floor+0x96>
 80074a6:	4f29      	ldr	r7, [pc, #164]	@ (800754c <floor+0xf4>)
 80074a8:	4137      	asrs	r7, r6
 80074aa:	ea01 0307 	and.w	r3, r1, r7
 80074ae:	4303      	orrs	r3, r0
 80074b0:	d01d      	beq.n	80074ee <floor+0x96>
 80074b2:	a323      	add	r3, pc, #140	@ (adr r3, 8007540 <floor+0xe8>)
 80074b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b8:	f7f8 feb4 	bl	8000224 <__adddf3>
 80074bc:	2200      	movs	r2, #0
 80074be:	2300      	movs	r3, #0
 80074c0:	f7f9 faf6 	bl	8000ab0 <__aeabi_dcmpgt>
 80074c4:	2800      	cmp	r0, #0
 80074c6:	d0eb      	beq.n	80074a0 <floor+0x48>
 80074c8:	2c00      	cmp	r4, #0
 80074ca:	bfbe      	ittt	lt
 80074cc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80074d0:	4133      	asrlt	r3, r6
 80074d2:	18e4      	addlt	r4, r4, r3
 80074d4:	ea24 0407 	bic.w	r4, r4, r7
 80074d8:	2500      	movs	r5, #0
 80074da:	e7e1      	b.n	80074a0 <floor+0x48>
 80074dc:	2e33      	cmp	r6, #51	@ 0x33
 80074de:	dd0a      	ble.n	80074f6 <floor+0x9e>
 80074e0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80074e4:	d103      	bne.n	80074ee <floor+0x96>
 80074e6:	4602      	mov	r2, r0
 80074e8:	460b      	mov	r3, r1
 80074ea:	f7f8 fe9b 	bl	8000224 <__adddf3>
 80074ee:	ec41 0b10 	vmov	d0, r0, r1
 80074f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074f6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80074fa:	f04f 37ff 	mov.w	r7, #4294967295
 80074fe:	40df      	lsrs	r7, r3
 8007500:	4207      	tst	r7, r0
 8007502:	d0f4      	beq.n	80074ee <floor+0x96>
 8007504:	a30e      	add	r3, pc, #56	@ (adr r3, 8007540 <floor+0xe8>)
 8007506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800750a:	f7f8 fe8b 	bl	8000224 <__adddf3>
 800750e:	2200      	movs	r2, #0
 8007510:	2300      	movs	r3, #0
 8007512:	f7f9 facd 	bl	8000ab0 <__aeabi_dcmpgt>
 8007516:	2800      	cmp	r0, #0
 8007518:	d0c2      	beq.n	80074a0 <floor+0x48>
 800751a:	2c00      	cmp	r4, #0
 800751c:	da0a      	bge.n	8007534 <floor+0xdc>
 800751e:	2e14      	cmp	r6, #20
 8007520:	d101      	bne.n	8007526 <floor+0xce>
 8007522:	3401      	adds	r4, #1
 8007524:	e006      	b.n	8007534 <floor+0xdc>
 8007526:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800752a:	2301      	movs	r3, #1
 800752c:	40b3      	lsls	r3, r6
 800752e:	441d      	add	r5, r3
 8007530:	4545      	cmp	r5, r8
 8007532:	d3f6      	bcc.n	8007522 <floor+0xca>
 8007534:	ea25 0507 	bic.w	r5, r5, r7
 8007538:	e7b2      	b.n	80074a0 <floor+0x48>
 800753a:	2500      	movs	r5, #0
 800753c:	462c      	mov	r4, r5
 800753e:	e7af      	b.n	80074a0 <floor+0x48>
 8007540:	8800759c 	.word	0x8800759c
 8007544:	7e37e43c 	.word	0x7e37e43c
 8007548:	bff00000 	.word	0xbff00000
 800754c:	000fffff 	.word	0x000fffff

08007550 <_init>:
 8007550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007552:	bf00      	nop
 8007554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007556:	bc08      	pop	{r3}
 8007558:	469e      	mov	lr, r3
 800755a:	4770      	bx	lr

0800755c <_fini>:
 800755c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800755e:	bf00      	nop
 8007560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007562:	bc08      	pop	{r3}
 8007564:	469e      	mov	lr, r3
 8007566:	4770      	bx	lr
